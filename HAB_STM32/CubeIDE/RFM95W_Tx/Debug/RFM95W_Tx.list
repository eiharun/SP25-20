
RFM95W_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c0  08000190  08000190  00001190  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005550  08005550  00006550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055d4  080055d4  00007090  2**0
                  CONTENTS
  4 .ARM          00000008  080055d4  080055d4  000065d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055dc  080055dc  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055dc  080055dc  000065dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080055e0  080055e0  000065e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080055e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  20000090  08005674  00007090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08005674  00007490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de3c  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000243a  00000000  00000000  00014efc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00017338  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2a  00000000  00000000  00018098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc32  00000000  00000000  00018ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000102ca  00000000  00000000  000346f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a47f6  00000000  00000000  000449be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e91b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ccc  00000000  00000000  000e91f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000ecec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005538 	.word	0x08005538

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08005538 	.word	0x08005538

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	@ 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2uiz>:
 80007ac:	004a      	lsls	r2, r1, #1
 80007ae:	d211      	bcs.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007b4:	d211      	bcs.n	80007da <__aeabi_d2uiz+0x2e>
 80007b6:	d50d      	bpl.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c0:	d40e      	bmi.n	80007e0 <__aeabi_d2uiz+0x34>
 80007c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ce:	fa23 f002 	lsr.w	r0, r3, r2
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d102      	bne.n	80007e6 <__aeabi_d2uiz+0x3a>
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	4770      	bx	lr
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	4770      	bx	lr

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b96a 	b.w	8000ad8 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9d08      	ldr	r5, [sp, #32]
 8000822:	460c      	mov	r4, r1
 8000824:	2b00      	cmp	r3, #0
 8000826:	d14e      	bne.n	80008c6 <__udivmoddi4+0xaa>
 8000828:	4694      	mov	ip, r2
 800082a:	458c      	cmp	ip, r1
 800082c:	4686      	mov	lr, r0
 800082e:	fab2 f282 	clz	r2, r2
 8000832:	d962      	bls.n	80008fa <__udivmoddi4+0xde>
 8000834:	b14a      	cbz	r2, 800084a <__udivmoddi4+0x2e>
 8000836:	f1c2 0320 	rsb	r3, r2, #32
 800083a:	4091      	lsls	r1, r2
 800083c:	fa20 f303 	lsr.w	r3, r0, r3
 8000840:	fa0c fc02 	lsl.w	ip, ip, r2
 8000844:	4319      	orrs	r1, r3
 8000846:	fa00 fe02 	lsl.w	lr, r0, r2
 800084a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800084e:	fa1f f68c 	uxth.w	r6, ip
 8000852:	fbb1 f4f7 	udiv	r4, r1, r7
 8000856:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800085a:	fb07 1114 	mls	r1, r7, r4, r1
 800085e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000862:	fb04 f106 	mul.w	r1, r4, r6
 8000866:	4299      	cmp	r1, r3
 8000868:	d90a      	bls.n	8000880 <__udivmoddi4+0x64>
 800086a:	eb1c 0303 	adds.w	r3, ip, r3
 800086e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000872:	f080 8112 	bcs.w	8000a9a <__udivmoddi4+0x27e>
 8000876:	4299      	cmp	r1, r3
 8000878:	f240 810f 	bls.w	8000a9a <__udivmoddi4+0x27e>
 800087c:	3c02      	subs	r4, #2
 800087e:	4463      	add	r3, ip
 8000880:	1a59      	subs	r1, r3, r1
 8000882:	fa1f f38e 	uxth.w	r3, lr
 8000886:	fbb1 f0f7 	udiv	r0, r1, r7
 800088a:	fb07 1110 	mls	r1, r7, r0, r1
 800088e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000892:	fb00 f606 	mul.w	r6, r0, r6
 8000896:	429e      	cmp	r6, r3
 8000898:	d90a      	bls.n	80008b0 <__udivmoddi4+0x94>
 800089a:	eb1c 0303 	adds.w	r3, ip, r3
 800089e:	f100 31ff 	add.w	r1, r0, #4294967295
 80008a2:	f080 80fc 	bcs.w	8000a9e <__udivmoddi4+0x282>
 80008a6:	429e      	cmp	r6, r3
 80008a8:	f240 80f9 	bls.w	8000a9e <__udivmoddi4+0x282>
 80008ac:	4463      	add	r3, ip
 80008ae:	3802      	subs	r0, #2
 80008b0:	1b9b      	subs	r3, r3, r6
 80008b2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80008b6:	2100      	movs	r1, #0
 80008b8:	b11d      	cbz	r5, 80008c2 <__udivmoddi4+0xa6>
 80008ba:	40d3      	lsrs	r3, r2
 80008bc:	2200      	movs	r2, #0
 80008be:	e9c5 3200 	strd	r3, r2, [r5]
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d905      	bls.n	80008d6 <__udivmoddi4+0xba>
 80008ca:	b10d      	cbz	r5, 80008d0 <__udivmoddi4+0xb4>
 80008cc:	e9c5 0100 	strd	r0, r1, [r5]
 80008d0:	2100      	movs	r1, #0
 80008d2:	4608      	mov	r0, r1
 80008d4:	e7f5      	b.n	80008c2 <__udivmoddi4+0xa6>
 80008d6:	fab3 f183 	clz	r1, r3
 80008da:	2900      	cmp	r1, #0
 80008dc:	d146      	bne.n	800096c <__udivmoddi4+0x150>
 80008de:	42a3      	cmp	r3, r4
 80008e0:	d302      	bcc.n	80008e8 <__udivmoddi4+0xcc>
 80008e2:	4290      	cmp	r0, r2
 80008e4:	f0c0 80f0 	bcc.w	8000ac8 <__udivmoddi4+0x2ac>
 80008e8:	1a86      	subs	r6, r0, r2
 80008ea:	eb64 0303 	sbc.w	r3, r4, r3
 80008ee:	2001      	movs	r0, #1
 80008f0:	2d00      	cmp	r5, #0
 80008f2:	d0e6      	beq.n	80008c2 <__udivmoddi4+0xa6>
 80008f4:	e9c5 6300 	strd	r6, r3, [r5]
 80008f8:	e7e3      	b.n	80008c2 <__udivmoddi4+0xa6>
 80008fa:	2a00      	cmp	r2, #0
 80008fc:	f040 8090 	bne.w	8000a20 <__udivmoddi4+0x204>
 8000900:	eba1 040c 	sub.w	r4, r1, ip
 8000904:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000908:	fa1f f78c 	uxth.w	r7, ip
 800090c:	2101      	movs	r1, #1
 800090e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000912:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000916:	fb08 4416 	mls	r4, r8, r6, r4
 800091a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800091e:	fb07 f006 	mul.w	r0, r7, r6
 8000922:	4298      	cmp	r0, r3
 8000924:	d908      	bls.n	8000938 <__udivmoddi4+0x11c>
 8000926:	eb1c 0303 	adds.w	r3, ip, r3
 800092a:	f106 34ff 	add.w	r4, r6, #4294967295
 800092e:	d202      	bcs.n	8000936 <__udivmoddi4+0x11a>
 8000930:	4298      	cmp	r0, r3
 8000932:	f200 80cd 	bhi.w	8000ad0 <__udivmoddi4+0x2b4>
 8000936:	4626      	mov	r6, r4
 8000938:	1a1c      	subs	r4, r3, r0
 800093a:	fa1f f38e 	uxth.w	r3, lr
 800093e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000942:	fb08 4410 	mls	r4, r8, r0, r4
 8000946:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800094a:	fb00 f707 	mul.w	r7, r0, r7
 800094e:	429f      	cmp	r7, r3
 8000950:	d908      	bls.n	8000964 <__udivmoddi4+0x148>
 8000952:	eb1c 0303 	adds.w	r3, ip, r3
 8000956:	f100 34ff 	add.w	r4, r0, #4294967295
 800095a:	d202      	bcs.n	8000962 <__udivmoddi4+0x146>
 800095c:	429f      	cmp	r7, r3
 800095e:	f200 80b0 	bhi.w	8000ac2 <__udivmoddi4+0x2a6>
 8000962:	4620      	mov	r0, r4
 8000964:	1bdb      	subs	r3, r3, r7
 8000966:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800096a:	e7a5      	b.n	80008b8 <__udivmoddi4+0x9c>
 800096c:	f1c1 0620 	rsb	r6, r1, #32
 8000970:	408b      	lsls	r3, r1
 8000972:	fa22 f706 	lsr.w	r7, r2, r6
 8000976:	431f      	orrs	r7, r3
 8000978:	fa20 fc06 	lsr.w	ip, r0, r6
 800097c:	fa04 f301 	lsl.w	r3, r4, r1
 8000980:	ea43 030c 	orr.w	r3, r3, ip
 8000984:	40f4      	lsrs	r4, r6
 8000986:	fa00 f801 	lsl.w	r8, r0, r1
 800098a:	0c38      	lsrs	r0, r7, #16
 800098c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000990:	fbb4 fef0 	udiv	lr, r4, r0
 8000994:	fa1f fc87 	uxth.w	ip, r7
 8000998:	fb00 441e 	mls	r4, r0, lr, r4
 800099c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009a0:	fb0e f90c 	mul.w	r9, lr, ip
 80009a4:	45a1      	cmp	r9, r4
 80009a6:	fa02 f201 	lsl.w	r2, r2, r1
 80009aa:	d90a      	bls.n	80009c2 <__udivmoddi4+0x1a6>
 80009ac:	193c      	adds	r4, r7, r4
 80009ae:	f10e 3aff 	add.w	sl, lr, #4294967295
 80009b2:	f080 8084 	bcs.w	8000abe <__udivmoddi4+0x2a2>
 80009b6:	45a1      	cmp	r9, r4
 80009b8:	f240 8081 	bls.w	8000abe <__udivmoddi4+0x2a2>
 80009bc:	f1ae 0e02 	sub.w	lr, lr, #2
 80009c0:	443c      	add	r4, r7
 80009c2:	eba4 0409 	sub.w	r4, r4, r9
 80009c6:	fa1f f983 	uxth.w	r9, r3
 80009ca:	fbb4 f3f0 	udiv	r3, r4, r0
 80009ce:	fb00 4413 	mls	r4, r0, r3, r4
 80009d2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80009d6:	fb03 fc0c 	mul.w	ip, r3, ip
 80009da:	45a4      	cmp	ip, r4
 80009dc:	d907      	bls.n	80009ee <__udivmoddi4+0x1d2>
 80009de:	193c      	adds	r4, r7, r4
 80009e0:	f103 30ff 	add.w	r0, r3, #4294967295
 80009e4:	d267      	bcs.n	8000ab6 <__udivmoddi4+0x29a>
 80009e6:	45a4      	cmp	ip, r4
 80009e8:	d965      	bls.n	8000ab6 <__udivmoddi4+0x29a>
 80009ea:	3b02      	subs	r3, #2
 80009ec:	443c      	add	r4, r7
 80009ee:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80009f2:	fba0 9302 	umull	r9, r3, r0, r2
 80009f6:	eba4 040c 	sub.w	r4, r4, ip
 80009fa:	429c      	cmp	r4, r3
 80009fc:	46ce      	mov	lr, r9
 80009fe:	469c      	mov	ip, r3
 8000a00:	d351      	bcc.n	8000aa6 <__udivmoddi4+0x28a>
 8000a02:	d04e      	beq.n	8000aa2 <__udivmoddi4+0x286>
 8000a04:	b155      	cbz	r5, 8000a1c <__udivmoddi4+0x200>
 8000a06:	ebb8 030e 	subs.w	r3, r8, lr
 8000a0a:	eb64 040c 	sbc.w	r4, r4, ip
 8000a0e:	fa04 f606 	lsl.w	r6, r4, r6
 8000a12:	40cb      	lsrs	r3, r1
 8000a14:	431e      	orrs	r6, r3
 8000a16:	40cc      	lsrs	r4, r1
 8000a18:	e9c5 6400 	strd	r6, r4, [r5]
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	e750      	b.n	80008c2 <__udivmoddi4+0xa6>
 8000a20:	f1c2 0320 	rsb	r3, r2, #32
 8000a24:	fa20 f103 	lsr.w	r1, r0, r3
 8000a28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a2c:	fa24 f303 	lsr.w	r3, r4, r3
 8000a30:	4094      	lsls	r4, r2
 8000a32:	430c      	orrs	r4, r1
 8000a34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a38:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a3c:	fa1f f78c 	uxth.w	r7, ip
 8000a40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a44:	fb08 3110 	mls	r1, r8, r0, r3
 8000a48:	0c23      	lsrs	r3, r4, #16
 8000a4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4e:	fb00 f107 	mul.w	r1, r0, r7
 8000a52:	4299      	cmp	r1, r3
 8000a54:	d908      	bls.n	8000a68 <__udivmoddi4+0x24c>
 8000a56:	eb1c 0303 	adds.w	r3, ip, r3
 8000a5a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000a5e:	d22c      	bcs.n	8000aba <__udivmoddi4+0x29e>
 8000a60:	4299      	cmp	r1, r3
 8000a62:	d92a      	bls.n	8000aba <__udivmoddi4+0x29e>
 8000a64:	3802      	subs	r0, #2
 8000a66:	4463      	add	r3, ip
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	b2a4      	uxth	r4, r4
 8000a6c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000a70:	fb08 3311 	mls	r3, r8, r1, r3
 8000a74:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a78:	fb01 f307 	mul.w	r3, r1, r7
 8000a7c:	42a3      	cmp	r3, r4
 8000a7e:	d908      	bls.n	8000a92 <__udivmoddi4+0x276>
 8000a80:	eb1c 0404 	adds.w	r4, ip, r4
 8000a84:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a88:	d213      	bcs.n	8000ab2 <__udivmoddi4+0x296>
 8000a8a:	42a3      	cmp	r3, r4
 8000a8c:	d911      	bls.n	8000ab2 <__udivmoddi4+0x296>
 8000a8e:	3902      	subs	r1, #2
 8000a90:	4464      	add	r4, ip
 8000a92:	1ae4      	subs	r4, r4, r3
 8000a94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a98:	e739      	b.n	800090e <__udivmoddi4+0xf2>
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	e6f0      	b.n	8000880 <__udivmoddi4+0x64>
 8000a9e:	4608      	mov	r0, r1
 8000aa0:	e706      	b.n	80008b0 <__udivmoddi4+0x94>
 8000aa2:	45c8      	cmp	r8, r9
 8000aa4:	d2ae      	bcs.n	8000a04 <__udivmoddi4+0x1e8>
 8000aa6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000aaa:	eb63 0c07 	sbc.w	ip, r3, r7
 8000aae:	3801      	subs	r0, #1
 8000ab0:	e7a8      	b.n	8000a04 <__udivmoddi4+0x1e8>
 8000ab2:	4631      	mov	r1, r6
 8000ab4:	e7ed      	b.n	8000a92 <__udivmoddi4+0x276>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	e799      	b.n	80009ee <__udivmoddi4+0x1d2>
 8000aba:	4630      	mov	r0, r6
 8000abc:	e7d4      	b.n	8000a68 <__udivmoddi4+0x24c>
 8000abe:	46d6      	mov	lr, sl
 8000ac0:	e77f      	b.n	80009c2 <__udivmoddi4+0x1a6>
 8000ac2:	4463      	add	r3, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	e74d      	b.n	8000964 <__udivmoddi4+0x148>
 8000ac8:	4606      	mov	r6, r0
 8000aca:	4623      	mov	r3, r4
 8000acc:	4608      	mov	r0, r1
 8000ace:	e70f      	b.n	80008f0 <__udivmoddi4+0xd4>
 8000ad0:	3e02      	subs	r6, #2
 8000ad2:	4463      	add	r3, ip
 8000ad4:	e730      	b.n	8000938 <__udivmoddi4+0x11c>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_idiv0>:
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*Overwrite _write function to allow printf to print to serial consle*/
int _write(int file, char *ptr, int len) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	60f8      	str	r0, [r7, #12]
 8000ae4:	60b9      	str	r1, [r7, #8]
 8000ae6:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if ( (file == 1) | (file == 2) ){/*Stout=1 or Sterr=2*/
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	bf0c      	ite	eq
 8000aee:	2301      	moveq	r3, #1
 8000af0:	2300      	movne	r3, #0
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	2b02      	cmp	r3, #2
 8000af8:	bf0c      	ite	eq
 8000afa:	2301      	moveq	r3, #1
 8000afc:	2300      	movne	r3, #0
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	4313      	orrs	r3, r2
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d011      	beq.n	8000b2c <_write+0x50>
		hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b10:	68b9      	ldr	r1, [r7, #8]
 8000b12:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <_write+0x5c>)
 8000b14:	f003 fa9e 	bl	8004054 <HAL_UART_Transmit>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8000b1c:	7dfb      	ldrb	r3, [r7, #23]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d101      	bne.n	8000b26 <_write+0x4a>
			return len;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	e004      	b.n	8000b30 <_write+0x54>
		else
			return -1;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e001      	b.n	8000b30 <_write+0x54>
	}
	return -1;
 8000b2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000198 	.word	0x20000198

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0c0      	sub	sp, #256	@ 0x100
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t LoRa_buff[RH_RF95_FIFO_SIZE] = {0};
 8000b42:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000b46:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	3304      	adds	r3, #4
 8000b50:	22fb      	movs	r2, #251	@ 0xfb
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f004 fa3b 	bl	8004fd0 <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5a:	f000 fee2 	bl	8001922 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5e:	f000 f845 	bl	8000bec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b62:	f000 f927 	bl	8000db4 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b66:	f000 f887 	bl	8000c78 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000b6a:	f000 f8f3 	bl	8000d54 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000b6e:	f000 f8c1 	bl	8000cf4 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000b72:	f003 ff6f 	bl	8004a54 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	if(!RF95_Init()){
 8000b76:	f000 fc4d 	bl	8001414 <RF95_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	f083 0301 	eor.w	r3, r3, #1
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d002      	beq.n	8000b8c <main+0x50>
		printf("RFM95 Init Failed\n");
 8000b86:	4815      	ldr	r0, [pc, #84]	@ (8000bdc <main+0xa0>)
 8000b88:	f004 f942 	bl	8004e10 <puts>
	}
	printf("RFM95 Init Success\n");
 8000b8c:	4814      	ldr	r0, [pc, #80]	@ (8000be0 <main+0xa4>)
 8000b8e:	f004 f93f 	bl	8004e10 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_SET);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2140      	movs	r1, #64	@ 0x40
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b9a:	f001 f9df 	bl	8001f5c <HAL_GPIO_WritePin>
  	strcpy((char*)LoRa_buff, "Test\n");
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4a10      	ldr	r2, [pc, #64]	@ (8000be4 <main+0xa8>)
 8000ba2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba6:	6018      	str	r0, [r3, #0]
 8000ba8:	3304      	adds	r3, #4
 8000baa:	8019      	strh	r1, [r3, #0]
  	RF95_send(LoRa_buff);
 8000bac:	463b      	mov	r3, r7
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fd56 	bl	8001660 <RF95_send>
		HAL_Delay(1000);
 8000bb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bb8:	f000 ff28 	bl	8001a0c <HAL_Delay>
		HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2140      	movs	r1, #64	@ 0x40
 8000bc0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc4:	f001 f9ca 	bl	8001f5c <HAL_GPIO_WritePin>
		printf("Sent data\r\n");
 8000bc8:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <main+0xac>)
 8000bca:	f004 f921 	bl	8004e10 <puts>
		HAL_Delay(1000);
 8000bce:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000bd2:	f000 ff1b 	bl	8001a0c <HAL_Delay>
		HAL_GPIO_WritePin(TX_LED_GPIO_Port, TX_LED_Pin, GPIO_PIN_SET);
 8000bd6:	bf00      	nop
 8000bd8:	e7db      	b.n	8000b92 <main+0x56>
 8000bda:	bf00      	nop
 8000bdc:	08005550 	.word	0x08005550
 8000be0:	08005564 	.word	0x08005564
 8000be4:	08005578 	.word	0x08005578
 8000be8:	08005580 	.word	0x08005580

08000bec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b096      	sub	sp, #88	@ 0x58
 8000bf0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2244      	movs	r2, #68	@ 0x44
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f004 f9e8 	bl	8004fd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c00:	463b      	mov	r3, r7
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	605a      	str	r2, [r3, #4]
 8000c08:	609a      	str	r2, [r3, #8]
 8000c0a:	60da      	str	r2, [r3, #12]
 8000c0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c12:	f001 f9ed 	bl	8001ff0 <HAL_PWREx_ControlVoltageScaling>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c1c:	f000 f93e 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c20:	2310      	movs	r3, #16
 8000c22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c24:	2301      	movs	r3, #1
 8000c26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000c2c:	23a0      	movs	r3, #160	@ 0xa0
 8000c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f001 fa2f 	bl	800209c <HAL_RCC_OscConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000c44:	f000 f92a 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	230f      	movs	r3, #15
 8000c4a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c54:	2300      	movs	r3, #0
 8000c56:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2101      	movs	r1, #1
 8000c60:	4618      	mov	r0, r3
 8000c62:	f001 fe7d 	bl	8002960 <HAL_RCC_ClockConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c6c:	f000 f916 	bl	8000e9c <Error_Handler>
  }
}
 8000c70:	bf00      	nop
 8000c72:	3758      	adds	r7, #88	@ 0x58
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8000cf0 <MX_SPI1_Init+0x78>)
 8000c80:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c82:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000c84:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c88:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8a:	4b18      	ldr	r3, [pc, #96]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c90:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000c92:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000c96:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c98:	4b14      	ldr	r3, [pc, #80]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c9e:	4b13      	ldr	r3, [pc, #76]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ca4:	4b11      	ldr	r3, [pc, #68]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000ca6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000caa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cac:	4b0f      	ldr	r3, [pc, #60]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000cc4:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000cc6:	2207      	movs	r2, #7
 8000cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cca:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cd6:	4805      	ldr	r0, [pc, #20]	@ (8000cec <MX_SPI1_Init+0x74>)
 8000cd8:	f002 f9ec 	bl	80030b4 <HAL_SPI_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000ce2:	f000 f8db 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200000ac 	.word	0x200000ac
 8000cf0:	40013000 	.word	0x40013000

08000cf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000cfa:	4a15      	ldr	r2, [pc, #84]	@ (8000d50 <MX_USART1_UART_Init+0x5c>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d30:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d36:	4805      	ldr	r0, [pc, #20]	@ (8000d4c <MX_USART1_UART_Init+0x58>)
 8000d38:	f003 f8e8 	bl	8003f0c <HAL_UART_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d42:	f000 f8ab 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000110 	.word	0x20000110
 8000d50:	40013800 	.word	0x40013800

08000d54 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d5a:	4a15      	ldr	r2, [pc, #84]	@ (8000db0 <MX_USART2_UART_Init+0x5c>)
 8000d5c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d64:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d66:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d7a:	220c      	movs	r2, #12
 8000d7c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_USART2_UART_Init+0x58>)
 8000d98:	f003 f906 	bl	8003fa8 <HAL_HalfDuplex_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000da2:	f000 f87b 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000198 	.word	0x20000198
 8000db0:	40004400 	.word	0x40004400

08000db4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dba:	f107 030c 	add.w	r3, r7, #12
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
 8000dc2:	605a      	str	r2, [r3, #4]
 8000dc4:	609a      	str	r2, [r3, #8]
 8000dc6:	60da      	str	r2, [r3, #12]
 8000dc8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dca:	4b32      	ldr	r3, [pc, #200]	@ (8000e94 <MX_GPIO_Init+0xe0>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dce:	4a31      	ldr	r2, [pc, #196]	@ (8000e94 <MX_GPIO_Init+0xe0>)
 8000dd0:	f043 0304 	orr.w	r3, r3, #4
 8000dd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dd6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e94 <MX_GPIO_Init+0xe0>)
 8000dd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dda:	f003 0304 	and.w	r3, r3, #4
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e94 <MX_GPIO_Init+0xe0>)
 8000de4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de6:	4a2b      	ldr	r2, [pc, #172]	@ (8000e94 <MX_GPIO_Init+0xe0>)
 8000de8:	f043 0301 	orr.w	r3, r3, #1
 8000dec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dee:	4b29      	ldr	r3, [pc, #164]	@ (8000e94 <MX_GPIO_Init+0xe0>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfa:	4b26      	ldr	r3, [pc, #152]	@ (8000e94 <MX_GPIO_Init+0xe0>)
 8000dfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dfe:	4a25      	ldr	r2, [pc, #148]	@ (8000e94 <MX_GPIO_Init+0xe0>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e06:	4b23      	ldr	r3, [pc, #140]	@ (8000e94 <MX_GPIO_Init+0xe0>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	603b      	str	r3, [r7, #0]
 8000e10:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TX_LED_Pin|RX_LED_Pin, GPIO_PIN_RESET);
 8000e12:	2200      	movs	r2, #0
 8000e14:	21c0      	movs	r1, #192	@ 0xc0
 8000e16:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e1a:	f001 f89f 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFM_CS_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2181      	movs	r1, #129	@ 0x81
 8000e22:	481d      	ldr	r0, [pc, #116]	@ (8000e98 <MX_GPIO_Init+0xe4>)
 8000e24:	f001 f89a 	bl	8001f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_LED_Pin RX_LED_Pin */
  GPIO_InitStruct.Pin = TX_LED_Pin|RX_LED_Pin;
 8000e28:	23c0      	movs	r3, #192	@ 0xc0
 8000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e30:	2301      	movs	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e42:	f000 ff19 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM_CS_Pin RFM_RST_Pin */
  GPIO_InitStruct.Pin = RFM_CS_Pin|RFM_RST_Pin;
 8000e46:	2381      	movs	r3, #129	@ 0x81
 8000e48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480e      	ldr	r0, [pc, #56]	@ (8000e98 <MX_GPIO_Init+0xe4>)
 8000e5e:	f000 ff0b 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM_INT0_Pin */
  GPIO_InitStruct.Pin = RFM_INT0_Pin;
 8000e62:	2340      	movs	r3, #64	@ 0x40
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e66:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RFM_INT0_GPIO_Port, &GPIO_InitStruct);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	4808      	ldr	r0, [pc, #32]	@ (8000e98 <MX_GPIO_Init+0xe4>)
 8000e78:	f000 fefe 	bl	8001c78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2017      	movs	r0, #23
 8000e82:	f000 fec2 	bl	8001c0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e86:	2017      	movs	r0, #23
 8000e88:	f000 fedb 	bl	8001c42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e8c:	bf00      	nop
 8000e8e:	3720      	adds	r7, #32
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40021000 	.word	0x40021000
 8000e98:	48000400 	.word	0x48000400

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <Error_Handler+0x8>

08000ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b0f      	ldr	r3, [pc, #60]	@ (8000eec <HAL_MspInit+0x44>)
 8000eb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000eec <HAL_MspInit+0x44>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eba:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <HAL_MspInit+0x44>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	607b      	str	r3, [r7, #4]
 8000ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec6:	4b09      	ldr	r3, [pc, #36]	@ (8000eec <HAL_MspInit+0x44>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eca:	4a08      	ldr	r2, [pc, #32]	@ (8000eec <HAL_MspInit+0x44>)
 8000ecc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_MspInit+0x44>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eda:	603b      	str	r3, [r7, #0]
 8000edc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	370c      	adds	r7, #12
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08a      	sub	sp, #40	@ 0x28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a17      	ldr	r2, [pc, #92]	@ (8000f6c <HAL_SPI_MspInit+0x7c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d127      	bne.n	8000f62 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f12:	4b17      	ldr	r3, [pc, #92]	@ (8000f70 <HAL_SPI_MspInit+0x80>)
 8000f14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f16:	4a16      	ldr	r2, [pc, #88]	@ (8000f70 <HAL_SPI_MspInit+0x80>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f1e:	4b14      	ldr	r3, [pc, #80]	@ (8000f70 <HAL_SPI_MspInit+0x80>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <HAL_SPI_MspInit+0x80>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f2e:	4a10      	ldr	r2, [pc, #64]	@ (8000f70 <HAL_SPI_MspInit+0x80>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f36:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_SPI_MspInit+0x80>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f42:	2338      	movs	r3, #56	@ 0x38
 8000f44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f52:	2305      	movs	r3, #5
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f56:	f107 0314 	add.w	r3, r7, #20
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4805      	ldr	r0, [pc, #20]	@ (8000f74 <HAL_SPI_MspInit+0x84>)
 8000f5e:	f000 fe8b 	bl	8001c78 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000f62:	bf00      	nop
 8000f64:	3728      	adds	r7, #40	@ 0x28
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40013000 	.word	0x40013000
 8000f70:	40021000 	.word	0x40021000
 8000f74:	48000400 	.word	0x48000400

08000f78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b098      	sub	sp, #96	@ 0x60
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f90:	f107 0318 	add.w	r3, r7, #24
 8000f94:	2234      	movs	r2, #52	@ 0x34
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f004 f819 	bl	8004fd0 <memset>
  if(huart->Instance==USART1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a47      	ldr	r2, [pc, #284]	@ (80010c0 <HAL_UART_MspInit+0x148>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d138      	bne.n	800101a <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb0:	f107 0318 	add.w	r3, r7, #24
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f001 fef7 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fc0:	f7ff ff6c 	bl	8000e9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 8000fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc8:	4a3e      	ldr	r2, [pc, #248]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 8000fca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fce:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fd0:	4b3c      	ldr	r3, [pc, #240]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 8000fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fd4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	4b39      	ldr	r3, [pc, #228]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fe0:	4a38      	ldr	r2, [pc, #224]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 8000fe2:	f043 0301 	orr.w	r3, r3, #1
 8000fe6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fe8:	4b36      	ldr	r3, [pc, #216]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 8000fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fec:	f003 0301 	and.w	r3, r3, #1
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000ff4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001002:	2303      	movs	r3, #3
 8001004:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001006:	2307      	movs	r3, #7
 8001008:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800100e:	4619      	mov	r1, r3
 8001010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001014:	f000 fe30 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001018:	e04d      	b.n	80010b6 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a2a      	ldr	r2, [pc, #168]	@ (80010c8 <HAL_UART_MspInit+0x150>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d148      	bne.n	80010b6 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001024:	2302      	movs	r3, #2
 8001026:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800102c:	f107 0318 	add.w	r3, r7, #24
 8001030:	4618      	mov	r0, r3
 8001032:	f001 feb9 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 800103c:	f7ff ff2e 	bl	8000e9c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001040:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001044:	4a1f      	ldr	r2, [pc, #124]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 8001046:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800104a:	6593      	str	r3, [r2, #88]	@ 0x58
 800104c:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001050:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001054:	60fb      	str	r3, [r7, #12]
 8001056:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 800105a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800105c:	4a19      	ldr	r2, [pc, #100]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 800105e:	f043 0301 	orr.w	r3, r3, #1
 8001062:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001064:	4b17      	ldr	r3, [pc, #92]	@ (80010c4 <HAL_UART_MspInit+0x14c>)
 8001066:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001068:	f003 0301 	and.w	r3, r3, #1
 800106c:	60bb      	str	r3, [r7, #8]
 800106e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001070:	2304      	movs	r3, #4
 8001072:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001074:	2312      	movs	r3, #18
 8001076:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001078:	2301      	movs	r3, #1
 800107a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001080:	2307      	movs	r3, #7
 8001082:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001088:	4619      	mov	r1, r3
 800108a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800108e:	f000 fdf3 	bl	8001c78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001096:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001098:	2302      	movs	r3, #2
 800109a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	2303      	movs	r3, #3
 80010a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80010a4:	2303      	movs	r3, #3
 80010a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80010a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b2:	f000 fde1 	bl	8001c78 <HAL_GPIO_Init>
}
 80010b6:	bf00      	nop
 80010b8:	3760      	adds	r7, #96	@ 0x60
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40013800 	.word	0x40013800
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40004400 	.word	0x40004400

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <NMI_Handler+0x4>

080010d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <MemManage_Handler+0x4>

080010e4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001122:	f000 fc53 	bl	80019cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}

0800112a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM_INT0_Pin);
 800112e:	2040      	movs	r0, #64	@ 0x40
 8001130:	f000 ff2c 	bl	8001f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e00a      	b.n	8001160 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800114a:	f3af 8000 	nop.w
 800114e:	4601      	mov	r1, r0
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	b2ca      	uxtb	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	3301      	adds	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	429a      	cmp	r2, r3
 8001166:	dbf0      	blt.n	800114a <_read+0x12>
  }

  return len;
 8001168:	687b      	ldr	r3, [r7, #4]
}
 800116a:	4618      	mov	r0, r3
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118a:	b480      	push	{r7}
 800118c:	b083      	sub	sp, #12
 800118e:	af00      	add	r7, sp, #0
 8001190:	6078      	str	r0, [r7, #4]
 8001192:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800119a:	605a      	str	r2, [r3, #4]
  return 0;
 800119c:	2300      	movs	r3, #0
}
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr

080011aa <_isatty>:

int _isatty(int file)
{
 80011aa:	b480      	push	{r7}
 80011ac:	b083      	sub	sp, #12
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b2:	2301      	movs	r3, #1
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e4:	4a14      	ldr	r2, [pc, #80]	@ (8001238 <_sbrk+0x5c>)
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <_sbrk+0x60>)
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f0:	4b13      	ldr	r3, [pc, #76]	@ (8001240 <_sbrk+0x64>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d102      	bne.n	80011fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011f8:	4b11      	ldr	r3, [pc, #68]	@ (8001240 <_sbrk+0x64>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	@ (8001244 <_sbrk+0x68>)
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011fe:	4b10      	ldr	r3, [pc, #64]	@ (8001240 <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	429a      	cmp	r2, r3
 800120a:	d207      	bcs.n	800121c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800120c:	f003 ff2e 	bl	800506c <__errno>
 8001210:	4603      	mov	r3, r0
 8001212:	220c      	movs	r2, #12
 8001214:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001216:	f04f 33ff 	mov.w	r3, #4294967295
 800121a:	e009      	b.n	8001230 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800121c:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <_sbrk+0x64>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001222:	4b07      	ldr	r3, [pc, #28]	@ (8001240 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4413      	add	r3, r2
 800122a:	4a05      	ldr	r2, [pc, #20]	@ (8001240 <_sbrk+0x64>)
 800122c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800122e:	68fb      	ldr	r3, [r7, #12]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3718      	adds	r7, #24
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000a000 	.word	0x2000a000
 800123c:	00000400 	.word	0x00000400
 8001240:	20000220 	.word	0x20000220
 8001244:	20000490 	.word	0x20000490

08001248 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800124c:	4b06      	ldr	r3, [pc, #24]	@ (8001268 <SystemInit+0x20>)
 800124e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001252:	4a05      	ldr	r2, [pc, #20]	@ (8001268 <SystemInit+0x20>)
 8001254:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001258:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800125c:	bf00      	nop
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	e000ed00 	.word	0xe000ed00

0800126c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800126c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001270:	f7ff ffea 	bl	8001248 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001274:	480c      	ldr	r0, [pc, #48]	@ (80012a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001276:	490d      	ldr	r1, [pc, #52]	@ (80012ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001278:	4a0d      	ldr	r2, [pc, #52]	@ (80012b0 <LoopForever+0xe>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800128c:	4c0a      	ldr	r4, [pc, #40]	@ (80012b8 <LoopForever+0x16>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800129a:	f003 feed 	bl	8005078 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800129e:	f7ff fc4d 	bl	8000b3c <main>

080012a2 <LoopForever>:

LoopForever:
    b LoopForever
 80012a2:	e7fe      	b.n	80012a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80012a4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80012a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012ac:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80012b0:	080055e4 	.word	0x080055e4
  ldr r2, =_sbss
 80012b4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80012b8:	20000490 	.word	0x20000490

080012bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012bc:	e7fe      	b.n	80012bc <ADC1_2_IRQHandler>
	...

080012c0 <RF95_write>:
		{ 0x73,   0x74,    0x00}, // IH_Bw125Cr45Sf128 (the chip default + Implicit header)
};

HAL_StatusTypeDef err;
HAL_StatusTypeDef RF95_write(char reg, char wValue)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	460a      	mov	r2, r1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	4613      	mov	r3, r2
 80012ce:	71bb      	strb	r3, [r7, #6]
	char buff[2]={0};
 80012d0:	2300      	movs	r3, #0
 80012d2:	81bb      	strh	r3, [r7, #12]

	buff[0] = W | reg;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	733b      	strb	r3, [r7, #12]
	buff[1] = wValue;
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_RESET);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2101      	movs	r1, #1
 80012e6:	480c      	ldr	r0, [pc, #48]	@ (8001318 <RF95_write+0x58>)
 80012e8:	f000 fe38 	bl	8001f5c <HAL_GPIO_WritePin>
	err = HAL_SPI_Transmit(&hspi1, (uint8_t*)&buff, 2, 100);
 80012ec:	f107 010c 	add.w	r1, r7, #12
 80012f0:	2364      	movs	r3, #100	@ 0x64
 80012f2:	2202      	movs	r2, #2
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <RF95_write+0x5c>)
 80012f6:	f001 ff80 	bl	80031fa <HAL_SPI_Transmit>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
 80012fe:	4b08      	ldr	r3, [pc, #32]	@ (8001320 <RF95_write+0x60>)
 8001300:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_SET);
 8001302:	2201      	movs	r2, #1
 8001304:	2101      	movs	r1, #1
 8001306:	4804      	ldr	r0, [pc, #16]	@ (8001318 <RF95_write+0x58>)
 8001308:	f000 fe28 	bl	8001f5c <HAL_GPIO_WritePin>

	return err;
 800130c:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <RF95_write+0x60>)
 800130e:	781b      	ldrb	r3, [r3, #0]
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	48000400 	.word	0x48000400
 800131c:	200000ac 	.word	0x200000ac
 8001320:	20000327 	.word	0x20000327

08001324 <RF95_write_burst>:


HAL_StatusTypeDef RF95_write_burst(char reg, uint8_t* data)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	71fb      	strb	r3, [r7, #7]
	int length = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
	uint8_t cmd = W | reg;
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800133a:	b2db      	uxtb	r3, r3
 800133c:	72bb      	strb	r3, [r7, #10]
	HAL_StatusTypeDef err;

	length = strlen((const char*)data);
 800133e:	6838      	ldr	r0, [r7, #0]
 8001340:	f7fe ff46 	bl	80001d0 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	60fb      	str	r3, [r7, #12]

	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_RESET);
 8001348:	2200      	movs	r2, #0
 800134a:	2101      	movs	r1, #1
 800134c:	480e      	ldr	r0, [pc, #56]	@ (8001388 <RF95_write_burst+0x64>)
 800134e:	f000 fe05 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&cmd, 1, 100);
 8001352:	f107 010a 	add.w	r1, r7, #10
 8001356:	2364      	movs	r3, #100	@ 0x64
 8001358:	2201      	movs	r2, #1
 800135a:	480c      	ldr	r0, [pc, #48]	@ (800138c <RF95_write_burst+0x68>)
 800135c:	f001 ff4d 	bl	80031fa <HAL_SPI_Transmit>
	err = HAL_SPI_Transmit(&hspi1, (uint8_t*)&LoRa_buff, length, 100);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	b29a      	uxth	r2, r3
 8001364:	2364      	movs	r3, #100	@ 0x64
 8001366:	490a      	ldr	r1, [pc, #40]	@ (8001390 <RF95_write_burst+0x6c>)
 8001368:	4808      	ldr	r0, [pc, #32]	@ (800138c <RF95_write_burst+0x68>)
 800136a:	f001 ff46 	bl	80031fa <HAL_SPI_Transmit>
 800136e:	4603      	mov	r3, r0
 8001370:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_SET);
 8001372:	2201      	movs	r2, #1
 8001374:	2101      	movs	r1, #1
 8001376:	4804      	ldr	r0, [pc, #16]	@ (8001388 <RF95_write_burst+0x64>)
 8001378:	f000 fdf0 	bl	8001f5c <HAL_GPIO_WritePin>

	return err;
 800137c:	7afb      	ldrb	r3, [r7, #11]
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	48000400 	.word	0x48000400
 800138c:	200000ac 	.word	0x200000ac
 8001390:	20000228 	.word	0x20000228

08001394 <RF95_read>:


char RF95_read(char reg)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	4603      	mov	r3, r0
 800139c:	71fb      	strb	r3, [r7, #7]
	char buff = R & reg;
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_RESET);
 80013a8:	2200      	movs	r2, #0
 80013aa:	2101      	movs	r1, #1
 80013ac:	480d      	ldr	r0, [pc, #52]	@ (80013e4 <RF95_read+0x50>)
 80013ae:	f000 fdd5 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&buff, 1, 100);
 80013b2:	f107 010f 	add.w	r1, r7, #15
 80013b6:	2364      	movs	r3, #100	@ 0x64
 80013b8:	2201      	movs	r2, #1
 80013ba:	480b      	ldr	r0, [pc, #44]	@ (80013e8 <RF95_read+0x54>)
 80013bc:	f001 ff1d 	bl	80031fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)&buff, 1, 100);
 80013c0:	f107 010f 	add.w	r1, r7, #15
 80013c4:	2364      	movs	r3, #100	@ 0x64
 80013c6:	2201      	movs	r2, #1
 80013c8:	4807      	ldr	r0, [pc, #28]	@ (80013e8 <RF95_read+0x54>)
 80013ca:	f002 f88c 	bl	80034e6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_SET);
 80013ce:	2201      	movs	r2, #1
 80013d0:	2101      	movs	r1, #1
 80013d2:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <RF95_read+0x50>)
 80013d4:	f000 fdc2 	bl	8001f5c <HAL_GPIO_WritePin>

	return buff;
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3710      	adds	r7, #16
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	48000400 	.word	0x48000400
 80013e8:	200000ac 	.word	0x200000ac

080013ec <RF95_Reset>:
	return err;
}


void RF95_Reset(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80013f0:	2200      	movs	r2, #0
 80013f2:	2180      	movs	r1, #128	@ 0x80
 80013f4:	4806      	ldr	r0, [pc, #24]	@ (8001410 <RF95_Reset+0x24>)
 80013f6:	f000 fdb1 	bl	8001f5c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80013fa:	2014      	movs	r0, #20
 80013fc:	f000 fb06 	bl	8001a0c <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 8001400:	2201      	movs	r2, #1
 8001402:	2180      	movs	r1, #128	@ 0x80
 8001404:	4802      	ldr	r0, [pc, #8]	@ (8001410 <RF95_Reset+0x24>)
 8001406:	f000 fda9 	bl	8001f5c <HAL_GPIO_WritePin>
}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	48000400 	.word	0x48000400

08001414 <RF95_Init>:

uint8_t rbuff = 0;
bool RF95_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
	RF95_Reset();
 8001418:	f7ff ffe8 	bl	80013ec <RF95_Reset>

	// Set sleep mode, so we can also set LORA mode:
	RF95_sleep();
 800141c:	f000 f9de 	bl	80017dc <RF95_sleep>

    RF95_write(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 8001420:	2180      	movs	r1, #128	@ 0x80
 8001422:	2001      	movs	r0, #1
 8001424:	f7ff ff4c 	bl	80012c0 <RF95_write>
    HAL_Delay(20); // Wait for sleep mode to take over from say, CAD
 8001428:	2014      	movs	r0, #20
 800142a:	f000 faef 	bl	8001a0c <HAL_Delay>

    // Check we are in sleep mode, with LORA set
		rbuff = RF95_read(RH_RF95_REG_01_OP_MODE);
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff ffb0 	bl	8001394 <RF95_read>
 8001434:	4603      	mov	r3, r0
 8001436:	461a      	mov	r2, r3
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <RF95_Init+0x6c>)
 800143a:	701a      	strb	r2, [r3, #0]
    if (rbuff != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
 800143c:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <RF95_Init+0x6c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b80      	cmp	r3, #128	@ 0x80
 8001442:	d001      	beq.n	8001448 <RF95_Init+0x34>
    {
        return false; // No device present?
 8001444:	2300      	movs	r3, #0
 8001446:	e018      	b.n	800147a <RF95_Init+0x66>
    }

    // Set up FIFO
    // We configure so that we can use the entire 256 byte FIFO for either receive
    // or transmit, but not both at the same time
    RF95_write(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 8001448:	2100      	movs	r1, #0
 800144a:	200e      	movs	r0, #14
 800144c:	f7ff ff38 	bl	80012c0 <RF95_write>
    RF95_write(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 8001450:	2100      	movs	r1, #0
 8001452:	200f      	movs	r0, #15
 8001454:	f7ff ff34 	bl	80012c0 <RF95_write>
    // Explicit Header Mode
    // payload is TO + FROM + ID + FLAGS + message data
    // RX mode is implmented with RXCONTINUOUS
    // max message data length is 255 - 4 = 251 octets

    RF95_setModeIdle();
 8001458:	f000 f996 	bl	8001788 <RF95_setModeIdle>

    // Set up default configuration
    // No Sync Words in LORA mode.
    RF95_setModemConfig(Bw125Cr45Sf128); // Radio default
 800145c:	2000      	movs	r0, #0
 800145e:	f000 f813 	bl	8001488 <RF95_setModemConfig>
    RF95_setPreambleLength(8); // Default is 8
 8001462:	2008      	movs	r0, #8
 8001464:	f000 f840 	bl	80014e8 <RF95_setPreambleLength>
    // An innocuous ISM frequency, same as RF22's
    RF95_setFrequency(915.0);
 8001468:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8001484 <RF95_Init+0x70>
 800146c:	f000 f854 	bl	8001518 <RF95_setFrequency>
    // Lowish power
    RF95_setTxPower(13, false);
 8001470:	2100      	movs	r1, #0
 8001472:	200d      	movs	r0, #13
 8001474:	f000 f8a2 	bl	80015bc <RF95_setTxPower>

    return true;
 8001478:	2301      	movs	r3, #1
}
 800147a:	4618      	mov	r0, r3
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000328 	.word	0x20000328
 8001484:	4464c000 	.word	0x4464c000

08001488 <RF95_setModemConfig>:


bool RF95_setModemConfig(ModemConfigChoice index)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
	RF95_write(RH_RF95_REG_1D_MODEM_CONFIG1, MODEM_CONFIG_TABLE[index][0]);
 8001492:	79fa      	ldrb	r2, [r7, #7]
 8001494:	4913      	ldr	r1, [pc, #76]	@ (80014e4 <RF95_setModemConfig+0x5c>)
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	440b      	add	r3, r1
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	201d      	movs	r0, #29
 80014a4:	f7ff ff0c 	bl	80012c0 <RF95_write>
	RF95_write(RH_RF95_REG_1E_MODEM_CONFIG2, MODEM_CONFIG_TABLE[index][1]);
 80014a8:	79fa      	ldrb	r2, [r7, #7]
 80014aa:	490e      	ldr	r1, [pc, #56]	@ (80014e4 <RF95_setModemConfig+0x5c>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	440b      	add	r3, r1
 80014b4:	3301      	adds	r3, #1
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	201e      	movs	r0, #30
 80014bc:	f7ff ff00 	bl	80012c0 <RF95_write>
	RF95_write(RH_RF95_REG_26_MODEM_CONFIG3, MODEM_CONFIG_TABLE[index][2]);
 80014c0:	79fa      	ldrb	r2, [r7, #7]
 80014c2:	4908      	ldr	r1, [pc, #32]	@ (80014e4 <RF95_setModemConfig+0x5c>)
 80014c4:	4613      	mov	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	4413      	add	r3, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	3302      	adds	r3, #2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	4619      	mov	r1, r3
 80014d2:	2026      	movs	r0, #38	@ 0x26
 80014d4:	f7ff fef4 	bl	80012c0 <RF95_write>

    return true;
 80014d8:	2301      	movs	r3, #1
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000008 	.word	0x20000008

080014e8 <RF95_setPreambleLength>:


void RF95_setPreambleLength(uint16_t bytes)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	80fb      	strh	r3, [r7, #6]
    RF95_write(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	0a1b      	lsrs	r3, r3, #8
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	4619      	mov	r1, r3
 80014fc:	2020      	movs	r0, #32
 80014fe:	f7ff fedf 	bl	80012c0 <RF95_write>
    RF95_write(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 8001502:	88fb      	ldrh	r3, [r7, #6]
 8001504:	b2db      	uxtb	r3, r3
 8001506:	4619      	mov	r1, r3
 8001508:	2021      	movs	r0, #33	@ 0x21
 800150a:	f7ff fed9 	bl	80012c0 <RF95_write>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <RF95_setFrequency>:


bool RF95_setFrequency(float centre)
{
 8001518:	b5b0      	push	{r4, r5, r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	ed87 0a01 	vstr	s0, [r7, #4]
    // Frf = FRF / FSTEP
    uint64_t frf = (uint32_t)((uint32_t)centre * 1000000.0) / (uint32_t)RH_RF95_FSTEP;
 8001522:	edd7 7a01 	vldr	s15, [r7, #4]
 8001526:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800152a:	ee17 0a90 	vmov	r0, s15
 800152e:	f7ff f8c3 	bl	80006b8 <__aeabi_ui2d>
 8001532:	a320      	add	r3, pc, #128	@ (adr r3, 80015b4 <RF95_setFrequency+0x9c>)
 8001534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001538:	f7fe fe52 	bl	80001e0 <__aeabi_dmul>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	f7ff f932 	bl	80007ac <__aeabi_d2uiz>
 8001548:	4603      	mov	r3, r0
 800154a:	4a19      	ldr	r2, [pc, #100]	@ (80015b0 <RF95_setFrequency+0x98>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	2200      	movs	r2, #0
 8001554:	461c      	mov	r4, r3
 8001556:	4615      	mov	r5, r2
 8001558:	e9c7 4502 	strd	r4, r5, [r7, #8]
    RF95_write(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 800155c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	f04f 0300 	mov.w	r3, #0
 8001568:	0c02      	lsrs	r2, r0, #16
 800156a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800156e:	0c0b      	lsrs	r3, r1, #16
 8001570:	b2d3      	uxtb	r3, r2
 8001572:	4619      	mov	r1, r3
 8001574:	2006      	movs	r0, #6
 8001576:	f7ff fea3 	bl	80012c0 <RF95_write>
    RF95_write(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 800157a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800157e:	f04f 0200 	mov.w	r2, #0
 8001582:	f04f 0300 	mov.w	r3, #0
 8001586:	0a02      	lsrs	r2, r0, #8
 8001588:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800158c:	0a0b      	lsrs	r3, r1, #8
 800158e:	b2d3      	uxtb	r3, r2
 8001590:	4619      	mov	r1, r3
 8001592:	2007      	movs	r0, #7
 8001594:	f7ff fe94 	bl	80012c0 <RF95_write>
    RF95_write(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 8001598:	7a3b      	ldrb	r3, [r7, #8]
 800159a:	4619      	mov	r1, r3
 800159c:	2008      	movs	r0, #8
 800159e:	f7ff fe8f 	bl	80012c0 <RF95_write>

    return true;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bdb0      	pop	{r4, r5, r7, pc}
 80015ac:	f3af 8000 	nop.w
 80015b0:	4325c53f 	.word	0x4325c53f
 80015b4:	00000000 	.word	0x00000000
 80015b8:	412e8480 	.word	0x412e8480

080015bc <RF95_setTxPower>:


void RF95_setTxPower(int8_t power, bool useRFO)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	460a      	mov	r2, r1
 80015c6:	71fb      	strb	r3, [r7, #7]
 80015c8:	4613      	mov	r3, r2
 80015ca:	71bb      	strb	r3, [r7, #6]
    // Sigh, different behaviours depending on whther the module use PA_BOOST or the RFO pin
    // for the transmitter output
    if (useRFO)
 80015cc:	79bb      	ldrb	r3, [r7, #6]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d019      	beq.n	8001606 <RF95_setTxPower+0x4a>
    {
        if (power > 14)power = 14;
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b0e      	cmp	r3, #14
 80015d8:	dd01      	ble.n	80015de <RF95_setTxPower+0x22>
 80015da:	230e      	movs	r3, #14
 80015dc:	71fb      	strb	r3, [r7, #7]
        if (power < -1)power = -1;
 80015de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e6:	da01      	bge.n	80015ec <RF95_setTxPower+0x30>
 80015e8:	23ff      	movs	r3, #255	@ 0xff
 80015ea:	71fb      	strb	r3, [r7, #7]
        RF95_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 80015ec:	79fb      	ldrb	r3, [r7, #7]
 80015ee:	3301      	adds	r3, #1
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	b25b      	sxtb	r3, r3
 80015f4:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	4619      	mov	r1, r3
 80015fe:	2009      	movs	r0, #9
 8001600:	f7ff fe5e 	bl	80012c0 <RF95_write>
        // The documentation is pretty confusing on this topic: PaSelect says the max power is 20dBm,
        // but OutputPower claims it would be 17dBm.
        // My measurements show 20dBm is correct
        RF95_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
    }
}
 8001604:	e028      	b.n	8001658 <RF95_setTxPower+0x9c>
        if (power > 23)power = 23;
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	2b17      	cmp	r3, #23
 800160c:	dd01      	ble.n	8001612 <RF95_setTxPower+0x56>
 800160e:	2317      	movs	r3, #23
 8001610:	71fb      	strb	r3, [r7, #7]
        if (power < 5)power = 5;
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b04      	cmp	r3, #4
 8001618:	dc01      	bgt.n	800161e <RF95_setTxPower+0x62>
 800161a:	2305      	movs	r3, #5
 800161c:	71fb      	strb	r3, [r7, #7]
        if (power > 20)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	2b14      	cmp	r3, #20
 8001624:	dd08      	ble.n	8001638 <RF95_setTxPower+0x7c>
            RF95_write(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 8001626:	2107      	movs	r1, #7
 8001628:	204d      	movs	r0, #77	@ 0x4d
 800162a:	f7ff fe49 	bl	80012c0 <RF95_write>
            power -= 3;
 800162e:	79fb      	ldrb	r3, [r7, #7]
 8001630:	3b03      	subs	r3, #3
 8001632:	b2db      	uxtb	r3, r3
 8001634:	71fb      	strb	r3, [r7, #7]
 8001636:	e003      	b.n	8001640 <RF95_setTxPower+0x84>
            RF95_write(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 8001638:	2104      	movs	r1, #4
 800163a:	204d      	movs	r0, #77	@ 0x4d
 800163c:	f7ff fe40 	bl	80012c0 <RF95_write>
        RF95_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	3b05      	subs	r3, #5
 8001644:	b2db      	uxtb	r3, r3
 8001646:	b25b      	sxtb	r3, r3
 8001648:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800164c:	b25b      	sxtb	r3, r3
 800164e:	b2db      	uxtb	r3, r3
 8001650:	4619      	mov	r1, r3
 8001652:	2009      	movs	r0, #9
 8001654:	f7ff fe34 	bl	80012c0 <RF95_write>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <RF95_send>:
		return false;
}


bool RF95_send(uint8_t* data)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	int len = strlen((char*)data);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7fe fdb1 	bl	80001d0 <strlen>
 800166e:	4603      	mov	r3, r0
 8001670:	60fb      	str	r3, [r7, #12]

	#if Header == Header_used
	uint16_t header_len = sizeof(_txHeaderTo);
	#endif

    if (len > RH_RF95_MAX_MESSAGE_LEN)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2bfb      	cmp	r3, #251	@ 0xfb
 8001676:	dd01      	ble.n	800167c <RF95_send+0x1c>
			return false;
 8001678:	2300      	movs	r3, #0
 800167a:	e02d      	b.n	80016d8 <RF95_send+0x78>

    RF95_waitPacketSent(); // Make sure we dont interrupt an outgoing message
 800167c:	f000 f85a 	bl	8001734 <RF95_waitPacketSent>
    RF95_setModeIdle();
 8001680:	f000 f882 	bl	8001788 <RF95_setModeIdle>

	if (!RF95_waitCAD())
 8001684:	f000 f82c 	bl	80016e0 <RF95_waitCAD>
 8001688:	4603      	mov	r3, r0
 800168a:	f083 0301 	eor.w	r3, r3, #1
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <RF95_send+0x38>
		return false;  // Check channel activity
 8001694:	2300      	movs	r3, #0
 8001696:	e01f      	b.n	80016d8 <RF95_send+0x78>

	RF95_setModeIdle();
 8001698:	f000 f876 	bl	8001788 <RF95_setModeIdle>

    // Position at the beginning of the FIFO
    RF95_write(RH_RF95_REG_0D_FIFO_ADDR_PTR, 0);
 800169c:	2100      	movs	r1, #0
 800169e:	200d      	movs	r0, #13
 80016a0:	f7ff fe0e 	bl	80012c0 <RF95_write>
	#if Header == Header_used
	RF95_write(RH_RF95_REG_00_FIFO, _txHeaderTo);
	#endif

    // The message data
    RF95_write_burst(RH_RF95_REG_00_FIFO, data);
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	2000      	movs	r0, #0
 80016a8:	f7ff fe3c 	bl	8001324 <RF95_write_burst>

	#if Header == No_header
	RF95_write(RH_RF95_REG_22_PAYLOAD_LENGTH, len);
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	4619      	mov	r1, r3
 80016b2:	2022      	movs	r0, #34	@ 0x22
 80016b4:	f7ff fe04 	bl	80012c0 <RF95_write>
//		uint8_t rBuff[15] = {0};
//		uint16_t lenght_ = RF95_read(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR);
//		RF95_write(RH_RF95_REG_0D_FIFO_ADDR_PTR, lenght_);
//		RF95_read_burst(RH_RF95_REG_00_FIFO,(char*)rBuff, len);

    RF95_setModeTx(); // Start the transmitter
 80016b8:	f000 f8b8 	bl	800182c <RF95_setModeTx>
	while(!RF95_Check_TxDone()){}
 80016bc:	bf00      	nop
 80016be:	f000 f8e3 	bl	8001888 <RF95_Check_TxDone>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f083 0301 	eor.w	r3, r3, #1
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f7      	bne.n	80016be <RF95_send+0x5e>

	RF95_setModeIdle();
 80016ce:	f000 f85b 	bl	8001788 <RF95_setModeIdle>

	RF95_Clear_IRQ();
 80016d2:	f000 f90d 	bl	80018f0 <RF95_Clear_IRQ>
    return true;
 80016d6:	2301      	movs	r3, #1
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <RF95_waitCAD>:


bool RF95_waitCAD(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
	if (!_cad_timeout)
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <RF95_waitCAD+0x50>)
 80016e8:	881b      	ldrh	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <RF95_waitCAD+0x12>
		return true;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e019      	b.n	8001726 <RF95_waitCAD+0x46>
    // Sophisticated DCF function...
    // DCF : BackoffTime = random() x aSlotTime
    // 100 - 1000 ms
    // 10 sec timeout

	RF95_setModeCAD();
 80016f2:	f000 f833 	bl	800175c <RF95_setModeCAD>

    unsigned long t = HAL_GetTick();
 80016f6:	f000 f97d 	bl	80019f4 <HAL_GetTick>
 80016fa:	6078      	str	r0, [r7, #4]
    while (!RF95_Check_CADDone())
 80016fc:	e00a      	b.n	8001714 <RF95_waitCAD+0x34>
    {
      if (HAL_GetTick() - t > _cad_timeout)
 80016fe:	f000 f979 	bl	80019f4 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4a09      	ldr	r2, [pc, #36]	@ (8001730 <RF95_waitCAD+0x50>)
 800170a:	8812      	ldrh	r2, [r2, #0]
 800170c:	4293      	cmp	r3, r2
 800170e:	d901      	bls.n	8001714 <RF95_waitCAD+0x34>
	     return false;
 8001710:	2300      	movs	r3, #0
 8001712:	e008      	b.n	8001726 <RF95_waitCAD+0x46>
    while (!RF95_Check_CADDone())
 8001714:	f000 f8d2 	bl	80018bc <RF95_Check_CADDone>
 8001718:	4603      	mov	r3, r0
 800171a:	f083 0301 	eor.w	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1ec      	bne.n	80016fe <RF95_waitCAD+0x1e>
    }

    return true;
 8001724:	2301      	movs	r3, #1
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000004 	.word	0x20000004

08001734 <RF95_waitPacketSent>:


bool RF95_waitPacketSent(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
    if (_mode == RHModeTx)
 8001738:	4b07      	ldr	r3, [pc, #28]	@ (8001758 <RF95_waitPacketSent+0x24>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b03      	cmp	r3, #3
 800173e:	d108      	bne.n	8001752 <RF95_waitPacketSent+0x1e>
    {
    	while(!RF95_Check_TxDone());
 8001740:	bf00      	nop
 8001742:	f000 f8a1 	bl	8001888 <RF95_Check_TxDone>
 8001746:	4603      	mov	r3, r0
 8001748:	f083 0301 	eor.w	r3, r3, #1
 800174c:	b2db      	uxtb	r3, r3
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f7      	bne.n	8001742 <RF95_waitPacketSent+0xe>
    }

    return true;
 8001752:	2301      	movs	r3, #1
}
 8001754:	4618      	mov	r0, r3
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000224 	.word	0x20000224

0800175c <RF95_setModeCAD>:
		return false;
}


void RF95_setModeCAD(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	if (_mode != RHModeCad)
 8001760:	4b08      	ldr	r3, [pc, #32]	@ (8001784 <RF95_setModeCAD+0x28>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b05      	cmp	r3, #5
 8001766:	d00a      	beq.n	800177e <RF95_setModeCAD+0x22>
	{
			RF95_write(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
 8001768:	2107      	movs	r1, #7
 800176a:	2001      	movs	r0, #1
 800176c:	f7ff fda8 	bl	80012c0 <RF95_write>
			RF95_write(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
 8001770:	2180      	movs	r1, #128	@ 0x80
 8001772:	2040      	movs	r0, #64	@ 0x40
 8001774:	f7ff fda4 	bl	80012c0 <RF95_write>
			_mode = RHModeCad;
 8001778:	4b02      	ldr	r3, [pc, #8]	@ (8001784 <RF95_setModeCAD+0x28>)
 800177a:	2205      	movs	r2, #5
 800177c:	701a      	strb	r2, [r3, #0]
	}
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000224 	.word	0x20000224

08001788 <RF95_setModeIdle>:

uint8_t aux = 0;
void RF95_setModeIdle(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
//	uint8_t aux = 0;
    if (_mode != RHModeIdle)
 800178c:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <RF95_setModeIdle+0x4c>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d01d      	beq.n	80017d0 <RF95_setModeIdle+0x48>
    {
				aux = RF95_read(RH_RF95_REG_01_OP_MODE);
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff fdfd 	bl	8001394 <RF95_read>
 800179a:	4603      	mov	r3, r0
 800179c:	461a      	mov	r2, r3
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <RF95_setModeIdle+0x50>)
 80017a0:	701a      	strb	r2, [r3, #0]
				aux &= 0xF8;
 80017a2:	4b0d      	ldr	r3, [pc, #52]	@ (80017d8 <RF95_setModeIdle+0x50>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	f023 0307 	bic.w	r3, r3, #7
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <RF95_setModeIdle+0x50>)
 80017ae:	701a      	strb	r2, [r3, #0]
				aux |= RH_RF95_MODE_STDBY;
 80017b0:	4b09      	ldr	r3, [pc, #36]	@ (80017d8 <RF95_setModeIdle+0x50>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	f043 0301 	orr.w	r3, r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b07      	ldr	r3, [pc, #28]	@ (80017d8 <RF95_setModeIdle+0x50>)
 80017bc:	701a      	strb	r2, [r3, #0]
        RF95_write(RH_RF95_REG_01_OP_MODE, aux);
 80017be:	4b06      	ldr	r3, [pc, #24]	@ (80017d8 <RF95_setModeIdle+0x50>)
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	4619      	mov	r1, r3
 80017c4:	2001      	movs	r0, #1
 80017c6:	f7ff fd7b 	bl	80012c0 <RF95_write>
        _mode = RHModeIdle;
 80017ca:	4b02      	ldr	r3, [pc, #8]	@ (80017d4 <RF95_setModeIdle+0x4c>)
 80017cc:	2202      	movs	r2, #2
 80017ce:	701a      	strb	r2, [r3, #0]
    }
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000224 	.word	0x20000224
 80017d8:	20000329 	.word	0x20000329

080017dc <RF95_sleep>:


bool RF95_sleep(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
//	uint8_t aux = 0;
    if (_mode != RHModeSleep)
 80017e0:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <RF95_sleep+0x48>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d01a      	beq.n	800181e <RF95_sleep+0x42>
    {
				aux = RF95_read(RH_RF95_REG_01_OP_MODE);
 80017e8:	2001      	movs	r0, #1
 80017ea:	f7ff fdd3 	bl	8001394 <RF95_read>
 80017ee:	4603      	mov	r3, r0
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <RF95_sleep+0x4c>)
 80017f4:	701a      	strb	r2, [r3, #0]
				aux &= 0xF8;
 80017f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001828 <RF95_sleep+0x4c>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	f023 0307 	bic.w	r3, r3, #7
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <RF95_sleep+0x4c>)
 8001802:	701a      	strb	r2, [r3, #0]
				aux |= RH_RF95_MODE_SLEEP;
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <RF95_sleep+0x4c>)
 8001806:	781a      	ldrb	r2, [r3, #0]
 8001808:	4b07      	ldr	r3, [pc, #28]	@ (8001828 <RF95_sleep+0x4c>)
 800180a:	701a      	strb	r2, [r3, #0]
        RF95_write(RH_RF95_REG_01_OP_MODE, aux);
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <RF95_sleep+0x4c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	4619      	mov	r1, r3
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff fd54 	bl	80012c0 <RF95_write>
        _mode = RHModeSleep;
 8001818:	4b02      	ldr	r3, [pc, #8]	@ (8001824 <RF95_sleep+0x48>)
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800181e:	2301      	movs	r3, #1
}
 8001820:	4618      	mov	r0, r3
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000224 	.word	0x20000224
 8001828:	20000329 	.word	0x20000329

0800182c <RF95_setModeTx>:
    }
}


void RF95_setModeTx(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
//	uint8_t aux = 0;
    if (_mode != RHModeTx)
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <RF95_setModeTx+0x54>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d021      	beq.n	800187c <RF95_setModeTx+0x50>
    {
				aux = RF95_read(RH_RF95_REG_01_OP_MODE);
 8001838:	2001      	movs	r0, #1
 800183a:	f7ff fdab 	bl	8001394 <RF95_read>
 800183e:	4603      	mov	r3, r0
 8001840:	461a      	mov	r2, r3
 8001842:	4b10      	ldr	r3, [pc, #64]	@ (8001884 <RF95_setModeTx+0x58>)
 8001844:	701a      	strb	r2, [r3, #0]
				aux &= 0xF8;
 8001846:	4b0f      	ldr	r3, [pc, #60]	@ (8001884 <RF95_setModeTx+0x58>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	f023 0307 	bic.w	r3, r3, #7
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <RF95_setModeTx+0x58>)
 8001852:	701a      	strb	r2, [r3, #0]
				aux |= RH_RF95_MODE_TX;
 8001854:	4b0b      	ldr	r3, [pc, #44]	@ (8001884 <RF95_setModeTx+0x58>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	f043 0303 	orr.w	r3, r3, #3
 800185c:	b2da      	uxtb	r2, r3
 800185e:	4b09      	ldr	r3, [pc, #36]	@ (8001884 <RF95_setModeTx+0x58>)
 8001860:	701a      	strb	r2, [r3, #0]
        RF95_write(RH_RF95_REG_01_OP_MODE, aux);
 8001862:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <RF95_setModeTx+0x58>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	4619      	mov	r1, r3
 8001868:	2001      	movs	r0, #1
 800186a:	f7ff fd29 	bl	80012c0 <RF95_write>
        RF95_write(RH_RF95_REG_40_DIO_MAPPING1, 0x40); // Interrupt on TxDone
 800186e:	2140      	movs	r1, #64	@ 0x40
 8001870:	2040      	movs	r0, #64	@ 0x40
 8001872:	f7ff fd25 	bl	80012c0 <RF95_write>
        _mode = RHModeTx;
 8001876:	4b02      	ldr	r3, [pc, #8]	@ (8001880 <RF95_setModeTx+0x54>)
 8001878:	2203      	movs	r2, #3
 800187a:	701a      	strb	r2, [r3, #0]
    }
}
 800187c:	bf00      	nop
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000224 	.word	0x20000224
 8001884:	20000329 	.word	0x20000329

08001888 <RF95_Check_TxDone>:
	return reg_read;
}


bool RF95_Check_TxDone(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
	char reg_read = 0;
 800188e:	2300      	movs	r3, #0
 8001890:	71fb      	strb	r3, [r7, #7]
	reg_read = RF95_read(RH_RF95_REG_12_IRQ_FLAGS);
 8001892:	2012      	movs	r0, #18
 8001894:	f7ff fd7e 	bl	8001394 <RF95_read>
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]

	reg_read = (reg_read & RH_RF95_TX_DONE) >> 3;
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	10db      	asrs	r3, r3, #3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	71fb      	strb	r3, [r7, #7]

	return reg_read;
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	bf14      	ite	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	2300      	moveq	r3, #0
 80018b2:	b2db      	uxtb	r3, r3
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <RF95_Check_CADDone>:


bool RF95_Check_CADDone(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
	char reg_read = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	71fb      	strb	r3, [r7, #7]
	reg_read = RF95_read(RH_RF95_REG_12_IRQ_FLAGS);
 80018c6:	2012      	movs	r0, #18
 80018c8:	f7ff fd64 	bl	8001394 <RF95_read>
 80018cc:	4603      	mov	r3, r0
 80018ce:	71fb      	strb	r3, [r7, #7]
	reg_read = (reg_read & RH_RF95_CAD_DONE) >> 2;
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	109b      	asrs	r3, r3, #2
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	71fb      	strb	r3, [r7, #7]

	return reg_read;
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	bf14      	ite	ne
 80018e2:	2301      	movne	r3, #1
 80018e4:	2300      	moveq	r3, #0
 80018e6:	b2db      	uxtb	r3, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <RF95_Clear_IRQ>:
	return reg_read;
}


void RF95_Clear_IRQ(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
	uint8_t irq_flags = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	71fb      	strb	r3, [r7, #7]

	RF95_write(RH_RF95_REG_12_IRQ_FLAGS, 0xFF);
 80018fa:	21ff      	movs	r1, #255	@ 0xff
 80018fc:	2012      	movs	r0, #18
 80018fe:	f7ff fcdf 	bl	80012c0 <RF95_write>

	irq_flags = RF95_read(RH_RF95_REG_12_IRQ_FLAGS);
 8001902:	2012      	movs	r0, #18
 8001904:	f7ff fd46 	bl	8001394 <RF95_read>
 8001908:	4603      	mov	r3, r0
 800190a:	71fb      	strb	r3, [r7, #7]
	if(irq_flags != 0)
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <RF95_Clear_IRQ+0x2a>
		RF95_write(RH_RF95_REG_12_IRQ_FLAGS, 0xFF);
 8001912:	21ff      	movs	r1, #255	@ 0xff
 8001914:	2012      	movs	r0, #18
 8001916:	f7ff fcd3 	bl	80012c0 <RF95_write>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001928:	2300      	movs	r3, #0
 800192a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192c:	2003      	movs	r0, #3
 800192e:	f000 f961 	bl	8001bf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001932:	2000      	movs	r0, #0
 8001934:	f000 f80e 	bl	8001954 <HAL_InitTick>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	71fb      	strb	r3, [r7, #7]
 8001942:	e001      	b.n	8001948 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001944:	f7ff fab0 	bl	8000ea8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001948:	79fb      	ldrb	r3, [r7, #7]
}
 800194a:	4618      	mov	r0, r3
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800195c:	2300      	movs	r3, #0
 800195e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001960:	4b17      	ldr	r3, [pc, #92]	@ (80019c0 <HAL_InitTick+0x6c>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d023      	beq.n	80019b0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001968:	4b16      	ldr	r3, [pc, #88]	@ (80019c4 <HAL_InitTick+0x70>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b14      	ldr	r3, [pc, #80]	@ (80019c0 <HAL_InitTick+0x6c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f96d 	bl	8001c5e <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10f      	bne.n	80019aa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b0f      	cmp	r3, #15
 800198e:	d809      	bhi.n	80019a4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001990:	2200      	movs	r2, #0
 8001992:	6879      	ldr	r1, [r7, #4]
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f000 f937 	bl	8001c0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800199c:	4a0a      	ldr	r2, [pc, #40]	@ (80019c8 <HAL_InitTick+0x74>)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6013      	str	r3, [r2, #0]
 80019a2:	e007      	b.n	80019b4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e004      	b.n	80019b4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	73fb      	strb	r3, [r7, #15]
 80019ae:	e001      	b.n	80019b4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3710      	adds	r7, #16
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	2000001c 	.word	0x2000001c
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000018 	.word	0x20000018

080019cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019d0:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_IncTick+0x20>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	4b06      	ldr	r3, [pc, #24]	@ (80019f0 <HAL_IncTick+0x24>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <HAL_IncTick+0x24>)
 80019de:	6013      	str	r3, [r2, #0]
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	2000001c 	.word	0x2000001c
 80019f0:	2000032c 	.word	0x2000032c

080019f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return uwTick;
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_GetTick+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	2000032c 	.word	0x2000032c

08001a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a14:	f7ff ffee 	bl	80019f4 <HAL_GetTick>
 8001a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a24:	d005      	beq.n	8001a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001a26:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <HAL_Delay+0x44>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4413      	add	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffde 	bl	80019f4 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d8f7      	bhi.n	8001a34 <HAL_Delay+0x28>
  {
  }
}
 8001a44:	bf00      	nop
 8001a46:	bf00      	nop
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000001c 	.word	0x2000001c

08001a54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a64:	4b0c      	ldr	r3, [pc, #48]	@ (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a6a:	68ba      	ldr	r2, [r7, #8]
 8001a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a70:	4013      	ands	r3, r2
 8001a72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a86:	4a04      	ldr	r2, [pc, #16]	@ (8001a98 <__NVIC_SetPriorityGrouping+0x44>)
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	60d3      	str	r3, [r2, #12]
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aa0:	4b04      	ldr	r3, [pc, #16]	@ (8001ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	0a1b      	lsrs	r3, r3, #8
 8001aa6:	f003 0307 	and.w	r3, r3, #7
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000ed00 	.word	0xe000ed00

08001ab8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	db0b      	blt.n	8001ae2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	f003 021f 	and.w	r2, r3, #31
 8001ad0:	4907      	ldr	r1, [pc, #28]	@ (8001af0 <__NVIC_EnableIRQ+0x38>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	095b      	lsrs	r3, r3, #5
 8001ad8:	2001      	movs	r0, #1
 8001ada:	fa00 f202 	lsl.w	r2, r0, r2
 8001ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	e000e100 	.word	0xe000e100

08001af4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	6039      	str	r1, [r7, #0]
 8001afe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	db0a      	blt.n	8001b1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	490c      	ldr	r1, [pc, #48]	@ (8001b40 <__NVIC_SetPriority+0x4c>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b1c:	e00a      	b.n	8001b34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	4908      	ldr	r1, [pc, #32]	@ (8001b44 <__NVIC_SetPriority+0x50>)
 8001b24:	79fb      	ldrb	r3, [r7, #7]
 8001b26:	f003 030f 	and.w	r3, r3, #15
 8001b2a:	3b04      	subs	r3, #4
 8001b2c:	0112      	lsls	r2, r2, #4
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	440b      	add	r3, r1
 8001b32:	761a      	strb	r2, [r3, #24]
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000e100 	.word	0xe000e100
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	@ 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f1c3 0307 	rsb	r3, r3, #7
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	bf28      	it	cs
 8001b66:	2304      	movcs	r3, #4
 8001b68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d902      	bls.n	8001b78 <NVIC_EncodePriority+0x30>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3b03      	subs	r3, #3
 8001b76:	e000      	b.n	8001b7a <NVIC_EncodePriority+0x32>
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43da      	mvns	r2, r3
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9a:	43d9      	mvns	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba0:	4313      	orrs	r3, r2
         );
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	@ 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bc0:	d301      	bcc.n	8001bc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00f      	b.n	8001be6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <SysTick_Config+0x40>)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bce:	210f      	movs	r1, #15
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f7ff ff8e 	bl	8001af4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd8:	4b05      	ldr	r3, [pc, #20]	@ (8001bf0 <SysTick_Config+0x40>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bde:	4b04      	ldr	r3, [pc, #16]	@ (8001bf0 <SysTick_Config+0x40>)
 8001be0:	2207      	movs	r2, #7
 8001be2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	e000e010 	.word	0xe000e010

08001bf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ff29 	bl	8001a54 <__NVIC_SetPriorityGrouping>
}
 8001c02:	bf00      	nop
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	60b9      	str	r1, [r7, #8]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c1c:	f7ff ff3e 	bl	8001a9c <__NVIC_GetPriorityGrouping>
 8001c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	68b9      	ldr	r1, [r7, #8]
 8001c26:	6978      	ldr	r0, [r7, #20]
 8001c28:	f7ff ff8e 	bl	8001b48 <NVIC_EncodePriority>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff ff5d 	bl	8001af4 <__NVIC_SetPriority>
}
 8001c3a:	bf00      	nop
 8001c3c:	3718      	adds	r7, #24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b082      	sub	sp, #8
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	4603      	mov	r3, r0
 8001c4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff ff31 	bl	8001ab8 <__NVIC_EnableIRQ>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b082      	sub	sp, #8
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7ff ffa2 	bl	8001bb0 <SysTick_Config>
 8001c6c:	4603      	mov	r3, r0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b087      	sub	sp, #28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c86:	e14e      	b.n	8001f26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 8140 	beq.w	8001f20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0303 	and.w	r3, r3, #3
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d005      	beq.n	8001cb8 <HAL_GPIO_Init+0x40>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d130      	bne.n	8001d1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	68da      	ldr	r2, [r3, #12]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cee:	2201      	movs	r2, #1
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	693a      	ldr	r2, [r7, #16]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	f003 0201 	and.w	r2, r3, #1
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b03      	cmp	r3, #3
 8001d24:	d017      	beq.n	8001d56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	2203      	movs	r2, #3
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d123      	bne.n	8001daa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	08da      	lsrs	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3208      	adds	r2, #8
 8001da4:	6939      	ldr	r1, [r7, #16]
 8001da6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	005b      	lsls	r3, r3, #1
 8001db4:	2203      	movs	r2, #3
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0203 	and.w	r2, r3, #3
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 809a 	beq.w	8001f20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dec:	4b55      	ldr	r3, [pc, #340]	@ (8001f44 <HAL_GPIO_Init+0x2cc>)
 8001dee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001df0:	4a54      	ldr	r2, [pc, #336]	@ (8001f44 <HAL_GPIO_Init+0x2cc>)
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001df8:	4b52      	ldr	r3, [pc, #328]	@ (8001f44 <HAL_GPIO_Init+0x2cc>)
 8001dfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e04:	4a50      	ldr	r2, [pc, #320]	@ (8001f48 <HAL_GPIO_Init+0x2d0>)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	089b      	lsrs	r3, r3, #2
 8001e0a:	3302      	adds	r3, #2
 8001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0303 	and.w	r3, r3, #3
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	220f      	movs	r2, #15
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e2e:	d013      	beq.n	8001e58 <HAL_GPIO_Init+0x1e0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a46      	ldr	r2, [pc, #280]	@ (8001f4c <HAL_GPIO_Init+0x2d4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00d      	beq.n	8001e54 <HAL_GPIO_Init+0x1dc>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a45      	ldr	r2, [pc, #276]	@ (8001f50 <HAL_GPIO_Init+0x2d8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d007      	beq.n	8001e50 <HAL_GPIO_Init+0x1d8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a44      	ldr	r2, [pc, #272]	@ (8001f54 <HAL_GPIO_Init+0x2dc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <HAL_GPIO_Init+0x1d4>
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e006      	b.n	8001e5a <HAL_GPIO_Init+0x1e2>
 8001e4c:	2307      	movs	r3, #7
 8001e4e:	e004      	b.n	8001e5a <HAL_GPIO_Init+0x1e2>
 8001e50:	2302      	movs	r3, #2
 8001e52:	e002      	b.n	8001e5a <HAL_GPIO_Init+0x1e2>
 8001e54:	2301      	movs	r3, #1
 8001e56:	e000      	b.n	8001e5a <HAL_GPIO_Init+0x1e2>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	f002 0203 	and.w	r2, r2, #3
 8001e60:	0092      	lsls	r2, r2, #2
 8001e62:	4093      	lsls	r3, r2
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e6a:	4937      	ldr	r1, [pc, #220]	@ (8001f48 <HAL_GPIO_Init+0x2d0>)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	089b      	lsrs	r3, r3, #2
 8001e70:	3302      	adds	r3, #2
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e78:	4b37      	ldr	r3, [pc, #220]	@ (8001f58 <HAL_GPIO_Init+0x2e0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f58 <HAL_GPIO_Init+0x2e0>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	@ (8001f58 <HAL_GPIO_Init+0x2e0>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ec6:	4a24      	ldr	r2, [pc, #144]	@ (8001f58 <HAL_GPIO_Init+0x2e0>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ecc:	4b22      	ldr	r3, [pc, #136]	@ (8001f58 <HAL_GPIO_Init+0x2e0>)
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	693a      	ldr	r2, [r7, #16]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef0:	4a19      	ldr	r2, [pc, #100]	@ (8001f58 <HAL_GPIO_Init+0x2e0>)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <HAL_GPIO_Init+0x2e0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001f12:	693a      	ldr	r2, [r7, #16]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001f58 <HAL_GPIO_Init+0x2e0>)
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	3301      	adds	r3, #1
 8001f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f47f aea9 	bne.w	8001c88 <HAL_GPIO_Init+0x10>
  }
}
 8001f36:	bf00      	nop
 8001f38:	bf00      	nop
 8001f3a:	371c      	adds	r7, #28
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40010000 	.word	0x40010000
 8001f4c:	48000400 	.word	0x48000400
 8001f50:	48000800 	.word	0x48000800
 8001f54:	48000c00 	.word	0x48000c00
 8001f58:	40010400 	.word	0x40010400

08001f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	460b      	mov	r3, r1
 8001f66:	807b      	strh	r3, [r7, #2]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f6c:	787b      	ldrb	r3, [r7, #1]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f72:	887a      	ldrh	r2, [r7, #2]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f78:	e002      	b.n	8001f80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f96:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f98:	695a      	ldr	r2, [r3, #20]
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d006      	beq.n	8001fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001fa2:	4a05      	ldr	r2, [pc, #20]	@ (8001fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001fa8:	88fb      	ldrh	r3, [r7, #6]
 8001faa:	4618      	mov	r0, r3
 8001fac:	f000 f806 	bl	8001fbc <HAL_GPIO_EXTI_Callback>
  }
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40010400 	.word	0x40010400

08001fbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <HAL_PWREx_GetVoltageRange+0x18>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40007000 	.word	0x40007000

08001ff0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ffe:	d130      	bne.n	8002062 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002000:	4b23      	ldr	r3, [pc, #140]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002008:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800200c:	d038      	beq.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800200e:	4b20      	ldr	r3, [pc, #128]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002016:	4a1e      	ldr	r2, [pc, #120]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002018:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800201c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800201e:	4b1d      	ldr	r3, [pc, #116]	@ (8002094 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2232      	movs	r2, #50	@ 0x32
 8002024:	fb02 f303 	mul.w	r3, r2, r3
 8002028:	4a1b      	ldr	r2, [pc, #108]	@ (8002098 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9b      	lsrs	r3, r3, #18
 8002030:	3301      	adds	r3, #1
 8002032:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002034:	e002      	b.n	800203c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	3b01      	subs	r3, #1
 800203a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800203c:	4b14      	ldr	r3, [pc, #80]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002048:	d102      	bne.n	8002050 <HAL_PWREx_ControlVoltageScaling+0x60>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f2      	bne.n	8002036 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002050:	4b0f      	ldr	r3, [pc, #60]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002058:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205c:	d110      	bne.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800205e:	2303      	movs	r3, #3
 8002060:	e00f      	b.n	8002082 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800206e:	d007      	beq.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002070:	4b07      	ldr	r3, [pc, #28]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002078:	4a05      	ldr	r2, [pc, #20]	@ (8002090 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800207a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800207e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40007000 	.word	0x40007000
 8002094:	20000000 	.word	0x20000000
 8002098:	431bde83 	.word	0x431bde83

0800209c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d102      	bne.n	80020b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	f000 bc4f 	b.w	800294e <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b0:	4b97      	ldr	r3, [pc, #604]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 030c 	and.w	r3, r3, #12
 80020b8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ba:	4b95      	ldr	r3, [pc, #596]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0310 	and.w	r3, r3, #16
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80e6 	beq.w	800229e <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020d2:	6a3b      	ldr	r3, [r7, #32]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d007      	beq.n	80020e8 <HAL_RCC_OscConfig+0x4c>
 80020d8:	6a3b      	ldr	r3, [r7, #32]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	f040 808d 	bne.w	80021fa <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	f040 8089 	bne.w	80021fa <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020e8:	4b89      	ldr	r3, [pc, #548]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d006      	beq.n	8002102 <HAL_RCC_OscConfig+0x66>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	69db      	ldr	r3, [r3, #28]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	f000 bc26 	b.w	800294e <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002106:	4b82      	ldr	r3, [pc, #520]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d004      	beq.n	800211c <HAL_RCC_OscConfig+0x80>
 8002112:	4b7f      	ldr	r3, [pc, #508]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800211a:	e005      	b.n	8002128 <HAL_RCC_OscConfig+0x8c>
 800211c:	4b7c      	ldr	r3, [pc, #496]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 800211e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002128:	4293      	cmp	r3, r2
 800212a:	d224      	bcs.n	8002176 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002130:	4618      	mov	r0, r3
 8002132:	f000 fdd9 	bl	8002ce8 <RCC_SetFlashLatencyFromMSIRange>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	f000 bc06 	b.w	800294e <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002142:	4b73      	ldr	r3, [pc, #460]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a72      	ldr	r2, [pc, #456]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b70      	ldr	r3, [pc, #448]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800215a:	496d      	ldr	r1, [pc, #436]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 800215c:	4313      	orrs	r3, r2
 800215e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002160:	4b6b      	ldr	r3, [pc, #428]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a1b      	ldr	r3, [r3, #32]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	4968      	ldr	r1, [pc, #416]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
 8002174:	e025      	b.n	80021c2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002176:	4b66      	ldr	r3, [pc, #408]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a65      	ldr	r2, [pc, #404]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 800217c:	f043 0308 	orr.w	r3, r3, #8
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	4b63      	ldr	r3, [pc, #396]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218e:	4960      	ldr	r1, [pc, #384]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002190:	4313      	orrs	r3, r2
 8002192:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002194:	4b5e      	ldr	r3, [pc, #376]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a1b      	ldr	r3, [r3, #32]
 80021a0:	021b      	lsls	r3, r3, #8
 80021a2:	495b      	ldr	r1, [pc, #364]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80021a4:	4313      	orrs	r3, r2
 80021a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a8:	6a3b      	ldr	r3, [r7, #32]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fd98 	bl	8002ce8 <RCC_SetFlashLatencyFromMSIRange>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e3c5      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80021c2:	f000 fccd 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 80021c6:	4602      	mov	r2, r0
 80021c8:	4b51      	ldr	r3, [pc, #324]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	4950      	ldr	r1, [pc, #320]	@ (8002314 <HAL_RCC_OscConfig+0x278>)
 80021d4:	5ccb      	ldrb	r3, [r1, r3]
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	fa22 f303 	lsr.w	r3, r2, r3
 80021de:	4a4e      	ldr	r2, [pc, #312]	@ (8002318 <HAL_RCC_OscConfig+0x27c>)
 80021e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80021e2:	4b4e      	ldr	r3, [pc, #312]	@ (800231c <HAL_RCC_OscConfig+0x280>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fbb4 	bl	8001954 <HAL_InitTick>
 80021ec:	4603      	mov	r3, r0
 80021ee:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80021f0:	7dfb      	ldrb	r3, [r7, #23]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d052      	beq.n	800229c <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	e3a9      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d032      	beq.n	8002268 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002202:	4b43      	ldr	r3, [pc, #268]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a42      	ldr	r2, [pc, #264]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800220e:	f7ff fbf1 	bl	80019f4 <HAL_GetTick>
 8002212:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002214:	e008      	b.n	8002228 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002216:	f7ff fbed 	bl	80019f4 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d901      	bls.n	8002228 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e392      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002228:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002234:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a35      	ldr	r2, [pc, #212]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6013      	str	r3, [r2, #0]
 8002240:	4b33      	ldr	r3, [pc, #204]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800224c:	4930      	ldr	r1, [pc, #192]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 800224e:	4313      	orrs	r3, r2
 8002250:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002252:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	492b      	ldr	r1, [pc, #172]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002262:	4313      	orrs	r3, r2
 8002264:	604b      	str	r3, [r1, #4]
 8002266:	e01a      	b.n	800229e <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002268:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a28      	ldr	r2, [pc, #160]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 800226e:	f023 0301 	bic.w	r3, r3, #1
 8002272:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002274:	f7ff fbbe 	bl	80019f4 <HAL_GetTick>
 8002278:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800227c:	f7ff fbba 	bl	80019f4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e35f      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800228e:	4b20      	ldr	r3, [pc, #128]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x1e0>
 800229a:	e000      	b.n	800229e <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800229c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d073      	beq.n	8002392 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022aa:	6a3b      	ldr	r3, [r7, #32]
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_OscConfig+0x220>
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	2b0c      	cmp	r3, #12
 80022b4:	d10e      	bne.n	80022d4 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	2b03      	cmp	r3, #3
 80022ba:	d10b      	bne.n	80022d4 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022bc:	4b14      	ldr	r3, [pc, #80]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d063      	beq.n	8002390 <HAL_RCC_OscConfig+0x2f4>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d15f      	bne.n	8002390 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e33c      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022dc:	d106      	bne.n	80022ec <HAL_RCC_OscConfig+0x250>
 80022de:	4b0c      	ldr	r3, [pc, #48]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80022e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	e025      	b.n	8002338 <HAL_RCC_OscConfig+0x29c>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022f4:	d114      	bne.n	8002320 <HAL_RCC_OscConfig+0x284>
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a05      	ldr	r2, [pc, #20]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 80022fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002300:	6013      	str	r3, [r2, #0]
 8002302:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a02      	ldr	r2, [pc, #8]	@ (8002310 <HAL_RCC_OscConfig+0x274>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e013      	b.n	8002338 <HAL_RCC_OscConfig+0x29c>
 8002310:	40021000 	.word	0x40021000
 8002314:	0800558c 	.word	0x0800558c
 8002318:	20000000 	.word	0x20000000
 800231c:	20000018 	.word	0x20000018
 8002320:	4b8f      	ldr	r3, [pc, #572]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a8e      	ldr	r2, [pc, #568]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b8c      	ldr	r3, [pc, #560]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a8b      	ldr	r2, [pc, #556]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7ff fb58 	bl	80019f4 <HAL_GetTick>
 8002344:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7ff fb54 	bl	80019f4 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e2f9      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235a:	4b81      	ldr	r3, [pc, #516]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x2ac>
 8002366:	e014      	b.n	8002392 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7ff fb44 	bl	80019f4 <HAL_GetTick>
 800236c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff fb40 	bl	80019f4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	@ 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e2e5      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002382:	4b77      	ldr	r3, [pc, #476]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x2d4>
 800238e:	e000      	b.n	8002392 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d060      	beq.n	8002460 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	d005      	beq.n	80023b0 <HAL_RCC_OscConfig+0x314>
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b0c      	cmp	r3, #12
 80023a8:	d119      	bne.n	80023de <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d116      	bne.n	80023de <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_OscConfig+0x32c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e2c2      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c8:	4b65      	ldr	r3, [pc, #404]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	061b      	lsls	r3, r3, #24
 80023d6:	4962      	ldr	r1, [pc, #392]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023dc:	e040      	b.n	8002460 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d023      	beq.n	800242e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a5d      	ldr	r2, [pc, #372]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80023ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f2:	f7ff faff 	bl	80019f4 <HAL_GetTick>
 80023f6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fa:	f7ff fafb 	bl	80019f4 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e2a0      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800240c:	4b54      	ldr	r3, [pc, #336]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002418:	4b51      	ldr	r3, [pc, #324]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	061b      	lsls	r3, r3, #24
 8002426:	494e      	ldr	r1, [pc, #312]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002428:	4313      	orrs	r3, r2
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	e018      	b.n	8002460 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242e:	4b4c      	ldr	r3, [pc, #304]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a4b      	ldr	r2, [pc, #300]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243a:	f7ff fadb 	bl	80019f4 <HAL_GetTick>
 800243e:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002442:	f7ff fad7 	bl	80019f4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e27c      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002454:	4b42      	ldr	r3, [pc, #264]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f0      	bne.n	8002442 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 8082 	beq.w	8002572 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d05f      	beq.n	8002536 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002476:	4b3a      	ldr	r3, [pc, #232]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800247c:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	699a      	ldr	r2, [r3, #24]
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	f003 0310 	and.w	r3, r3, #16
 8002488:	429a      	cmp	r2, r3
 800248a:	d037      	beq.n	80024fc <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d006      	beq.n	80024a4 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e254      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01b      	beq.n	80024e6 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80024ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024b6:	f023 0301 	bic.w	r3, r3, #1
 80024ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80024be:	f7ff fa99 	bl	80019f4 <HAL_GetTick>
 80024c2:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024c4:	e008      	b.n	80024d8 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024c6:	f7ff fa95 	bl	80019f4 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	2b11      	cmp	r3, #17
 80024d2:	d901      	bls.n	80024d8 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80024d4:	2303      	movs	r3, #3
 80024d6:	e23a      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024d8:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1ef      	bne.n	80024c6 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80024e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024ec:	f023 0210 	bic.w	r2, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	491a      	ldr	r1, [pc, #104]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fc:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002502:	4a17      	ldr	r2, [pc, #92]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250c:	f7ff fa72 	bl	80019f4 <HAL_GetTick>
 8002510:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002514:	f7ff fa6e 	bl	80019f4 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b11      	cmp	r3, #17
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e213      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002526:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ef      	beq.n	8002514 <HAL_RCC_OscConfig+0x478>
 8002534:	e01d      	b.n	8002572 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 8002538:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800253c:	4a08      	ldr	r2, [pc, #32]	@ (8002560 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	f023 0301 	bic.w	r3, r3, #1
 8002542:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002546:	f7ff fa55 	bl	80019f4 <HAL_GetTick>
 800254a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800254c:	e00a      	b.n	8002564 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800254e:	f7ff fa51 	bl	80019f4 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b11      	cmp	r3, #17
 800255a:	d903      	bls.n	8002564 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e1f6      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
 8002560:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002564:	4ba9      	ldr	r3, [pc, #676]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1ed      	bne.n	800254e <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	2b00      	cmp	r3, #0
 800257c:	f000 80bd 	beq.w	80026fa <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002580:	2300      	movs	r3, #0
 8002582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002586:	4ba1      	ldr	r3, [pc, #644]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800258a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d10e      	bne.n	80025b0 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002592:	4b9e      	ldr	r3, [pc, #632]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002596:	4a9d      	ldr	r2, [pc, #628]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259c:	6593      	str	r3, [r2, #88]	@ 0x58
 800259e:	4b9b      	ldr	r3, [pc, #620]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80025aa:	2301      	movs	r3, #1
 80025ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b0:	4b97      	ldr	r3, [pc, #604]	@ (8002810 <HAL_RCC_OscConfig+0x774>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d118      	bne.n	80025ee <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025bc:	4b94      	ldr	r3, [pc, #592]	@ (8002810 <HAL_RCC_OscConfig+0x774>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a93      	ldr	r2, [pc, #588]	@ (8002810 <HAL_RCC_OscConfig+0x774>)
 80025c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c8:	f7ff fa14 	bl	80019f4 <HAL_GetTick>
 80025cc:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025d0:	f7ff fa10 	bl	80019f4 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e1b5      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002810 <HAL_RCC_OscConfig+0x774>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d02c      	beq.n	8002654 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80025fa:	4b84      	ldr	r3, [pc, #528]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002600:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260c:	497f      	ldr	r1, [pc, #508]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f003 0304 	and.w	r3, r3, #4
 800261c:	2b00      	cmp	r3, #0
 800261e:	d010      	beq.n	8002642 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002620:	4b7a      	ldr	r3, [pc, #488]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002626:	4a79      	ldr	r2, [pc, #484]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002628:	f043 0304 	orr.w	r3, r3, #4
 800262c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002630:	4b76      	ldr	r3, [pc, #472]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002636:	4a75      	ldr	r2, [pc, #468]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002640:	e018      	b.n	8002674 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002642:	4b72      	ldr	r3, [pc, #456]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002648:	4a70      	ldr	r2, [pc, #448]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002652:	e00f      	b.n	8002674 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002654:	4b6d      	ldr	r3, [pc, #436]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800265a:	4a6c      	ldr	r2, [pc, #432]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002664:	4b69      	ldr	r3, [pc, #420]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800266a:	4a68      	ldr	r2, [pc, #416]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 800266c:	f023 0304 	bic.w	r3, r3, #4
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d016      	beq.n	80026aa <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800267c:	f7ff f9ba 	bl	80019f4 <HAL_GetTick>
 8002680:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002682:	e00a      	b.n	800269a <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002684:	f7ff f9b6 	bl	80019f4 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002692:	4293      	cmp	r3, r2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e159      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269a:	4b5c      	ldr	r3, [pc, #368]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ed      	beq.n	8002684 <HAL_RCC_OscConfig+0x5e8>
 80026a8:	e01d      	b.n	80026e6 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026aa:	f7ff f9a3 	bl	80019f4 <HAL_GetTick>
 80026ae:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026b0:	e00a      	b.n	80026c8 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b2:	f7ff f99f 	bl	80019f4 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d901      	bls.n	80026c8 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e142      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026c8:	4b50      	ldr	r3, [pc, #320]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ed      	bne.n	80026b2 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80026d6:	4b4d      	ldr	r3, [pc, #308]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80026dc:	4a4b      	ldr	r2, [pc, #300]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 80026de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d105      	bne.n	80026fa <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ee:	4b47      	ldr	r3, [pc, #284]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 80026f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f2:	4a46      	ldr	r2, [pc, #280]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 80026f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0320 	and.w	r3, r3, #32
 8002702:	2b00      	cmp	r3, #0
 8002704:	d03c      	beq.n	8002780 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800270a:	2b00      	cmp	r3, #0
 800270c:	d01c      	beq.n	8002748 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800270e:	4b3f      	ldr	r3, [pc, #252]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002710:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002714:	4a3d      	ldr	r2, [pc, #244]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002716:	f043 0301 	orr.w	r3, r3, #1
 800271a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7ff f969 	bl	80019f4 <HAL_GetTick>
 8002722:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002726:	f7ff f965 	bl	80019f4 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e10a      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002738:	4b34      	ldr	r3, [pc, #208]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 800273a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0ef      	beq.n	8002726 <HAL_RCC_OscConfig+0x68a>
 8002746:	e01b      	b.n	8002780 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002748:	4b30      	ldr	r3, [pc, #192]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 800274a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800274e:	4a2f      	ldr	r2, [pc, #188]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002758:	f7ff f94c 	bl	80019f4 <HAL_GetTick>
 800275c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800275e:	e008      	b.n	8002772 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002760:	f7ff f948 	bl	80019f4 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0ed      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002772:	4b26      	ldr	r3, [pc, #152]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002774:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1ef      	bne.n	8002760 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80e1 	beq.w	800294c <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278e:	2b02      	cmp	r3, #2
 8002790:	f040 80b5 	bne.w	80028fe <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002794:	4b1d      	ldr	r3, [pc, #116]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0203 	and.w	r2, r3, #3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d124      	bne.n	80027f2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027b2:	3b01      	subs	r3, #1
 80027b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d11b      	bne.n	80027f2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d113      	bne.n	80027f2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	3b01      	subs	r3, #1
 80027d8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d109      	bne.n	80027f2 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d05f      	beq.n	80028b2 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2b0c      	cmp	r3, #12
 80027f6:	d05a      	beq.n	80028ae <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027f8:	4b04      	ldr	r3, [pc, #16]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a03      	ldr	r2, [pc, #12]	@ (800280c <HAL_RCC_OscConfig+0x770>)
 80027fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002802:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002804:	f7ff f8f6 	bl	80019f4 <HAL_GetTick>
 8002808:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800280a:	e00c      	b.n	8002826 <HAL_RCC_OscConfig+0x78a>
 800280c:	40021000 	.word	0x40021000
 8002810:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002814:	f7ff f8ee 	bl	80019f4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b02      	cmp	r3, #2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e093      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002826:	4b4c      	ldr	r3, [pc, #304]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f0      	bne.n	8002814 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002832:	4b49      	ldr	r3, [pc, #292]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 8002834:	68da      	ldr	r2, [r3, #12]
 8002836:	4b49      	ldr	r3, [pc, #292]	@ (800295c <HAL_RCC_OscConfig+0x8c0>)
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002842:	3a01      	subs	r2, #1
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	4311      	orrs	r1, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800284c:	0212      	lsls	r2, r2, #8
 800284e:	4311      	orrs	r1, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002854:	0852      	lsrs	r2, r2, #1
 8002856:	3a01      	subs	r2, #1
 8002858:	0552      	lsls	r2, r2, #21
 800285a:	4311      	orrs	r1, r2
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002860:	0852      	lsrs	r2, r2, #1
 8002862:	3a01      	subs	r2, #1
 8002864:	0652      	lsls	r2, r2, #25
 8002866:	430a      	orrs	r2, r1
 8002868:	493b      	ldr	r1, [pc, #236]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 800286a:	4313      	orrs	r3, r2
 800286c:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800286e:	4b3a      	ldr	r3, [pc, #232]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a39      	ldr	r2, [pc, #228]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 8002874:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002878:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800287a:	4b37      	ldr	r3, [pc, #220]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	4a36      	ldr	r2, [pc, #216]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 8002880:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002884:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002886:	f7ff f8b5 	bl	80019f4 <HAL_GetTick>
 800288a:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7ff f8b1 	bl	80019f4 <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e056      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0f0      	beq.n	800288e <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028ac:	e04e      	b.n	800294c <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e04d      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	4b29      	ldr	r3, [pc, #164]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d146      	bne.n	800294c <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80028be:	4b26      	ldr	r3, [pc, #152]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a25      	ldr	r2, [pc, #148]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 80028c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028c8:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ca:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	4a22      	ldr	r2, [pc, #136]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 80028d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80028d4:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028d6:	f7ff f88d 	bl	80019f4 <HAL_GetTick>
 80028da:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028de:	f7ff f889 	bl	80019f4 <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e02e      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f0:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d0f0      	beq.n	80028de <HAL_RCC_OscConfig+0x842>
 80028fc:	e026      	b.n	800294c <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	2b0c      	cmp	r3, #12
 8002902:	d021      	beq.n	8002948 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002904:	4b14      	ldr	r3, [pc, #80]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a13      	ldr	r2, [pc, #76]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 800290a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800290e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002910:	f7ff f870 	bl	80019f4 <HAL_GetTick>
 8002914:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002918:	f7ff f86c 	bl	80019f4 <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e011      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800292a:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1f0      	bne.n	8002918 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002936:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	4a07      	ldr	r2, [pc, #28]	@ (8002958 <HAL_RCC_OscConfig+0x8bc>)
 800293c:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002940:	f023 0303 	bic.w	r3, r3, #3
 8002944:	60d3      	str	r3, [r2, #12]
 8002946:	e001      	b.n	800294c <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e000      	b.n	800294e <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3728      	adds	r7, #40	@ 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	f99f808c 	.word	0xf99f808c

08002960 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0e7      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002974:	4b75      	ldr	r3, [pc, #468]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d910      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002982:	4b72      	ldr	r3, [pc, #456]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f023 0207 	bic.w	r2, r3, #7
 800298a:	4970      	ldr	r1, [pc, #448]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b6e      	ldr	r3, [pc, #440]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0cf      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d010      	beq.n	80029d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4b66      	ldr	r3, [pc, #408]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80029bc:	429a      	cmp	r2, r3
 80029be:	d908      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c0:	4b63      	ldr	r3, [pc, #396]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	4960      	ldr	r1, [pc, #384]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04c      	beq.n	8002a78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d107      	bne.n	80029f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029e6:	4b5a      	ldr	r3, [pc, #360]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d121      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0a6      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d107      	bne.n	8002a0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029fe:	4b54      	ldr	r3, [pc, #336]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d115      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e09a      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d107      	bne.n	8002a26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a16:	4b4e      	ldr	r3, [pc, #312]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d109      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e08e      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a26:	4b4a      	ldr	r3, [pc, #296]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e086      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	4b46      	ldr	r3, [pc, #280]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f023 0203 	bic.w	r2, r3, #3
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4943      	ldr	r1, [pc, #268]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a48:	f7fe ffd4 	bl	80019f4 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4e:	e00a      	b.n	8002a66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe ffd0 	bl	80019f4 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e06e      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a66:	4b3a      	ldr	r3, [pc, #232]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 020c 	and.w	r2, r3, #12
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d1eb      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d010      	beq.n	8002aa6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689a      	ldr	r2, [r3, #8]
 8002a88:	4b31      	ldr	r3, [pc, #196]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d208      	bcs.n	8002aa6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a94:	4b2e      	ldr	r3, [pc, #184]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	492b      	ldr	r1, [pc, #172]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002aa6:	4b29      	ldr	r3, [pc, #164]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d210      	bcs.n	8002ad6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ab4:	4b25      	ldr	r3, [pc, #148]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f023 0207 	bic.w	r2, r3, #7
 8002abc:	4923      	ldr	r1, [pc, #140]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac4:	4b21      	ldr	r3, [pc, #132]	@ (8002b4c <HAL_RCC_ClockConfig+0x1ec>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e036      	b.n	8002b44 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0304 	and.w	r3, r3, #4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d008      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	4918      	ldr	r1, [pc, #96]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0308 	and.w	r3, r3, #8
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d009      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b00:	4b13      	ldr	r3, [pc, #76]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4910      	ldr	r1, [pc, #64]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b14:	f000 f824 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b50 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	490b      	ldr	r1, [pc, #44]	@ (8002b54 <HAL_RCC_ClockConfig+0x1f4>)
 8002b26:	5ccb      	ldrb	r3, [r1, r3]
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b30:	4a09      	ldr	r2, [pc, #36]	@ (8002b58 <HAL_RCC_ClockConfig+0x1f8>)
 8002b32:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b34:	4b09      	ldr	r3, [pc, #36]	@ (8002b5c <HAL_RCC_ClockConfig+0x1fc>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7fe ff0b 	bl	8001954 <HAL_InitTick>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b42:	7afb      	ldrb	r3, [r7, #11]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	40022000 	.word	0x40022000
 8002b50:	40021000 	.word	0x40021000
 8002b54:	0800558c 	.word	0x0800558c
 8002b58:	20000000 	.word	0x20000000
 8002b5c:	20000018 	.word	0x20000018

08002b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b089      	sub	sp, #36	@ 0x24
 8002b64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b6e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b78:	4b3b      	ldr	r3, [pc, #236]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_GetSysClockFreq+0x34>
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d121      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d11e      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b94:	4b34      	ldr	r3, [pc, #208]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d107      	bne.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ba0:	4b31      	ldr	r3, [pc, #196]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	61fb      	str	r3, [r7, #28]
 8002bae:	e005      	b.n	8002bbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	091b      	lsrs	r3, r3, #4
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bbc:	4a2b      	ldr	r2, [pc, #172]	@ (8002c6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d10d      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002bd0:	e00a      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d102      	bne.n	8002bde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bd8:	4b25      	ldr	r3, [pc, #148]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e004      	b.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d101      	bne.n	8002be8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002be4:	4b23      	ldr	r3, [pc, #140]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002be6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b0c      	cmp	r3, #12
 8002bec:	d134      	bne.n	8002c58 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002bee:	4b1e      	ldr	r3, [pc, #120]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d003      	beq.n	8002c06 <HAL_RCC_GetSysClockFreq+0xa6>
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d003      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0xac>
 8002c04:	e005      	b.n	8002c12 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c06:	4b1a      	ldr	r3, [pc, #104]	@ (8002c70 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c08:	617b      	str	r3, [r7, #20]
      break;
 8002c0a:	e005      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c0c:	4b19      	ldr	r3, [pc, #100]	@ (8002c74 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c0e:	617b      	str	r3, [r7, #20]
      break;
 8002c10:	e002      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	617b      	str	r3, [r7, #20]
      break;
 8002c16:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c18:	4b13      	ldr	r3, [pc, #76]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	3301      	adds	r3, #1
 8002c24:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c26:	4b10      	ldr	r3, [pc, #64]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	0a1b      	lsrs	r3, r3, #8
 8002c2c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	fb03 f202 	mul.w	r2, r3, r2
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c68 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	0e5b      	lsrs	r3, r3, #25
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	3301      	adds	r3, #1
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c56:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c58:	69bb      	ldr	r3, [r7, #24]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3724      	adds	r7, #36	@ 0x24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	080055a4 	.word	0x080055a4
 8002c70:	00f42400 	.word	0x00f42400
 8002c74:	007a1200 	.word	0x007a1200

08002c78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c7c:	4b03      	ldr	r3, [pc, #12]	@ (8002c8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000000 	.word	0x20000000

08002c90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c94:	f7ff fff0 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	4904      	ldr	r1, [pc, #16]	@ (8002cb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ca6:	5ccb      	ldrb	r3, [r1, r3]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	0800559c 	.word	0x0800559c

08002cbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cc0:	f7ff ffda 	bl	8002c78 <HAL_RCC_GetHCLKFreq>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	4b06      	ldr	r3, [pc, #24]	@ (8002ce0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	0adb      	lsrs	r3, r3, #11
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	4904      	ldr	r1, [pc, #16]	@ (8002ce4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cd2:	5ccb      	ldrb	r3, [r1, r3]
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	0800559c 	.word	0x0800559c

08002ce8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b086      	sub	sp, #24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d00:	f7ff f968 	bl	8001fd4 <HAL_PWREx_GetVoltageRange>
 8002d04:	6178      	str	r0, [r7, #20]
 8002d06:	e014      	b.n	8002d32 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d08:	4b25      	ldr	r3, [pc, #148]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0c:	4a24      	ldr	r2, [pc, #144]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d12:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d14:	4b22      	ldr	r3, [pc, #136]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d20:	f7ff f958 	bl	8001fd4 <HAL_PWREx_GetVoltageRange>
 8002d24:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d26:	4b1e      	ldr	r3, [pc, #120]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002da0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d30:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d38:	d10b      	bne.n	8002d52 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b80      	cmp	r3, #128	@ 0x80
 8002d3e:	d919      	bls.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2ba0      	cmp	r3, #160	@ 0xa0
 8002d44:	d902      	bls.n	8002d4c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d46:	2302      	movs	r3, #2
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	e013      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	613b      	str	r3, [r7, #16]
 8002d50:	e010      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b80      	cmp	r3, #128	@ 0x80
 8002d56:	d902      	bls.n	8002d5e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d58:	2303      	movs	r3, #3
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	e00a      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2b80      	cmp	r3, #128	@ 0x80
 8002d62:	d102      	bne.n	8002d6a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d64:	2302      	movs	r3, #2
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	e004      	b.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b70      	cmp	r3, #112	@ 0x70
 8002d6e:	d101      	bne.n	8002d74 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d70:	2301      	movs	r3, #1
 8002d72:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002d74:	4b0b      	ldr	r3, [pc, #44]	@ (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f023 0207 	bic.w	r2, r3, #7
 8002d7c:	4909      	ldr	r1, [pc, #36]	@ (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002d84:	4b07      	ldr	r3, [pc, #28]	@ (8002da4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0307 	and.w	r3, r3, #7
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d001      	beq.n	8002d96 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	40022000 	.word	0x40022000

08002da8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002db0:	2300      	movs	r3, #0
 8002db2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002db4:	2300      	movs	r3, #0
 8002db6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 809e 	beq.w	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002dca:	4b46      	ldr	r3, [pc, #280]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00d      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002de0:	4b40      	ldr	r3, [pc, #256]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de4:	4a3f      	ldr	r2, [pc, #252]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002de6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dea:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dec:	4b3d      	ldr	r3, [pc, #244]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002df4:	60bb      	str	r3, [r7, #8]
 8002df6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dfc:	4b3a      	ldr	r3, [pc, #232]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a39      	ldr	r2, [pc, #228]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e08:	f7fe fdf4 	bl	80019f4 <HAL_GetTick>
 8002e0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e0e:	e009      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e10:	f7fe fdf0 	bl	80019f4 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d902      	bls.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	74fb      	strb	r3, [r7, #19]
        break;
 8002e22:	e005      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e24:	4b30      	ldr	r3, [pc, #192]	@ (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d0ef      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002e30:	7cfb      	ldrb	r3, [r7, #19]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d15a      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e36:	4b2b      	ldr	r3, [pc, #172]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e3c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d01e      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d019      	beq.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e52:	4b24      	ldr	r3, [pc, #144]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e5e:	4b21      	ldr	r3, [pc, #132]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e64:	4a1f      	ldr	r2, [pc, #124]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	4a1b      	ldr	r2, [pc, #108]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e76:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e7a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e7e:	4a19      	ldr	r2, [pc, #100]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d016      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e90:	f7fe fdb0 	bl	80019f4 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e96:	e00b      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e98:	f7fe fdac 	bl	80019f4 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d902      	bls.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	74fb      	strb	r3, [r7, #19]
            break;
 8002eae:	e006      	b.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0ec      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002ebe:	7cfb      	ldrb	r3, [r7, #19]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec4:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eca:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	4904      	ldr	r1, [pc, #16]	@ (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002eda:	e009      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	74bb      	strb	r3, [r7, #18]
 8002ee0:	e006      	b.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eec:	7cfb      	ldrb	r3, [r7, #19]
 8002eee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ef0:	7c7b      	ldrb	r3, [r7, #17]
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d105      	bne.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ef6:	4b6e      	ldr	r3, [pc, #440]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ef8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002efa:	4a6d      	ldr	r2, [pc, #436]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002efc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f00:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00a      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f0e:	4b68      	ldr	r3, [pc, #416]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f14:	f023 0203 	bic.w	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4964      	ldr	r1, [pc, #400]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d00a      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f30:	4b5f      	ldr	r3, [pc, #380]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f36:	f023 020c 	bic.w	r2, r3, #12
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	495c      	ldr	r1, [pc, #368]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00a      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f52:	4b57      	ldr	r3, [pc, #348]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f58:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4953      	ldr	r1, [pc, #332]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d00a      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f74:	4b4e      	ldr	r3, [pc, #312]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	494b      	ldr	r1, [pc, #300]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f96:	4b46      	ldr	r3, [pc, #280]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f9c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	4942      	ldr	r1, [pc, #264]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fbe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	493a      	ldr	r1, [pc, #232]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00a      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fda:	4b35      	ldr	r3, [pc, #212]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	695b      	ldr	r3, [r3, #20]
 8002fe8:	4931      	ldr	r1, [pc, #196]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00a      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ffc:	4b2c      	ldr	r3, [pc, #176]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003002:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	4929      	ldr	r1, [pc, #164]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800300c:	4313      	orrs	r3, r2
 800300e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301a:	2b00      	cmp	r3, #0
 800301c:	d00a      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800301e:	4b24      	ldr	r3, [pc, #144]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003020:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003024:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	69db      	ldr	r3, [r3, #28]
 800302c:	4920      	ldr	r1, [pc, #128]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800302e:	4313      	orrs	r3, r2
 8003030:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d015      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003040:	4b1b      	ldr	r3, [pc, #108]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003046:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	4918      	ldr	r1, [pc, #96]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800305e:	d105      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003060:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a12      	ldr	r2, [pc, #72]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003066:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800306a:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d015      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003078:	4b0d      	ldr	r3, [pc, #52]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800307a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003086:	490a      	ldr	r1, [pc, #40]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003088:	4313      	orrs	r3, r2
 800308a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003092:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003096:	d105      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003098:	4b05      	ldr	r3, [pc, #20]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4a04      	ldr	r2, [pc, #16]	@ (80030b0 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800309e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3718      	adds	r7, #24
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d101      	bne.n	80030c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030c2:	2301      	movs	r3, #1
 80030c4:	e095      	b.n	80031f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d108      	bne.n	80030e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030d6:	d009      	beq.n	80030ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	61da      	str	r2, [r3, #28]
 80030de:	e005      	b.n	80030ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d106      	bne.n	800310c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2200      	movs	r2, #0
 8003102:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f7fd fef2 	bl	8000ef0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2202      	movs	r2, #2
 8003110:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003122:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800312c:	d902      	bls.n	8003134 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	e002      	b.n	800313a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003134:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003138:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8003142:	d007      	beq.n	8003154 <HAL_SPI_Init+0xa0>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800314c:	d002      	beq.n	8003154 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0302 	and.w	r3, r3, #2
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	69db      	ldr	r3, [r3, #28]
 8003188:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800318c:	431a      	orrs	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003196:	ea42 0103 	orr.w	r1, r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	0c1b      	lsrs	r3, r3, #16
 80031b0:	f003 0204 	and.w	r2, r3, #4
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b8:	f003 0310 	and.w	r3, r3, #16
 80031bc:	431a      	orrs	r2, r3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031c2:	f003 0308 	and.w	r3, r3, #8
 80031c6:	431a      	orrs	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80031d0:	ea42 0103 	orr.w	r1, r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80031f0:	2300      	movs	r3, #0
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b088      	sub	sp, #32
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	603b      	str	r3, [r7, #0]
 8003206:	4613      	mov	r3, r2
 8003208:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800320a:	f7fe fbf3 	bl	80019f4 <HAL_GetTick>
 800320e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d001      	beq.n	8003224 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003220:	2302      	movs	r3, #2
 8003222:	e15c      	b.n	80034de <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d002      	beq.n	8003230 <HAL_SPI_Transmit+0x36>
 800322a:	88fb      	ldrh	r3, [r7, #6]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e154      	b.n	80034de <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_SPI_Transmit+0x48>
 800323e:	2302      	movs	r3, #2
 8003240:	e14d      	b.n	80034de <HAL_SPI_Transmit+0x2e4>
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	2203      	movs	r2, #3
 800324e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2200      	movs	r2, #0
 8003256:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	88fa      	ldrh	r2, [r7, #6]
 8003262:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	88fa      	ldrh	r2, [r7, #6]
 8003268:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2200      	movs	r2, #0
 8003274:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003294:	d10f      	bne.n	80032b6 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032c0:	2b40      	cmp	r3, #64	@ 0x40
 80032c2:	d007      	beq.n	80032d4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032dc:	d952      	bls.n	8003384 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <HAL_SPI_Transmit+0xf2>
 80032e6:	8b7b      	ldrh	r3, [r7, #26]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d145      	bne.n	8003378 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032fc:	1c9a      	adds	r2, r3, #2
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003306:	b29b      	uxth	r3, r3
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003310:	e032      	b.n	8003378 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b02      	cmp	r3, #2
 800331e:	d112      	bne.n	8003346 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003324:	881a      	ldrh	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003330:	1c9a      	adds	r2, r3, #2
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800333a:	b29b      	uxth	r3, r3
 800333c:	3b01      	subs	r3, #1
 800333e:	b29a      	uxth	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003344:	e018      	b.n	8003378 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003346:	f7fe fb55 	bl	80019f4 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d803      	bhi.n	800335e <HAL_SPI_Transmit+0x164>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335c:	d102      	bne.n	8003364 <HAL_SPI_Transmit+0x16a>
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d109      	bne.n	8003378 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e0b2      	b.n	80034de <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800337c:	b29b      	uxth	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1c7      	bne.n	8003312 <HAL_SPI_Transmit+0x118>
 8003382:	e083      	b.n	800348c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_SPI_Transmit+0x198>
 800338c:	8b7b      	ldrh	r3, [r7, #26]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d177      	bne.n	8003482 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d912      	bls.n	80033c2 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033ac:	1c9a      	adds	r2, r3, #2
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b02      	subs	r3, #2
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033c0:	e05f      	b.n	8003482 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	330c      	adds	r3, #12
 80033cc:	7812      	ldrb	r2, [r2, #0]
 80033ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033d4:	1c5a      	adds	r2, r3, #1
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80033e8:	e04b      	b.n	8003482 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d12b      	bne.n	8003450 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d912      	bls.n	8003428 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003406:	881a      	ldrh	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003412:	1c9a      	adds	r2, r3, #2
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b02      	subs	r3, #2
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003426:	e02c      	b.n	8003482 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	330c      	adds	r3, #12
 8003432:	7812      	ldrb	r2, [r2, #0]
 8003434:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343a:	1c5a      	adds	r2, r3, #1
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800344e:	e018      	b.n	8003482 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003450:	f7fe fad0 	bl	80019f4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	429a      	cmp	r2, r3
 800345e:	d803      	bhi.n	8003468 <HAL_SPI_Transmit+0x26e>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d102      	bne.n	800346e <HAL_SPI_Transmit+0x274>
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d109      	bne.n	8003482 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e02d      	b.n	80034de <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003486:	b29b      	uxth	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1ae      	bne.n	80033ea <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800348c:	69fa      	ldr	r2, [r7, #28]
 800348e:	6839      	ldr	r1, [r7, #0]
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f000 fcf5 	bl	8003e80 <SPI_EndRxTxTransaction>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80034aa:	2300      	movs	r3, #0
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	617b      	str	r3, [r7, #20]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	617b      	str	r3, [r7, #20]
 80034be:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80034dc:	2300      	movs	r3, #0
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}

080034e6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b088      	sub	sp, #32
 80034ea:	af02      	add	r7, sp, #8
 80034ec:	60f8      	str	r0, [r7, #12]
 80034ee:	60b9      	str	r1, [r7, #8]
 80034f0:	603b      	str	r3, [r7, #0]
 80034f2:	4613      	mov	r3, r2
 80034f4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003502:	2302      	movs	r3, #2
 8003504:	e123      	b.n	800374e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800350e:	d112      	bne.n	8003536 <HAL_SPI_Receive+0x50>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10e      	bne.n	8003536 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2204      	movs	r2, #4
 800351c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003520:	88fa      	ldrh	r2, [r7, #6]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	9300      	str	r3, [sp, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	68ba      	ldr	r2, [r7, #8]
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	68f8      	ldr	r0, [r7, #12]
 800352e:	f000 f912 	bl	8003756 <HAL_SPI_TransmitReceive>
 8003532:	4603      	mov	r3, r0
 8003534:	e10b      	b.n	800374e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003536:	f7fe fa5d 	bl	80019f4 <HAL_GetTick>
 800353a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d002      	beq.n	8003548 <HAL_SPI_Receive+0x62>
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e100      	b.n	800374e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_SPI_Receive+0x74>
 8003556:	2302      	movs	r3, #2
 8003558:	e0f9      	b.n	800374e <HAL_SPI_Receive+0x268>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2204      	movs	r2, #4
 8003566:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	88fa      	ldrh	r2, [r7, #6]
 8003582:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2200      	movs	r2, #0
 8003596:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80035ac:	d908      	bls.n	80035c0 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	e007      	b.n	80035d0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80035ce:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d8:	d10f      	bne.n	80035fa <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035e8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80035f8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b40      	cmp	r3, #64	@ 0x40
 8003606:	d007      	beq.n	8003618 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003616:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003620:	d875      	bhi.n	800370e <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003622:	e037      	b.n	8003694 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d117      	bne.n	8003662 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f103 020c 	add.w	r2, r3, #12
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363e:	7812      	ldrb	r2, [r2, #0]
 8003640:	b2d2      	uxtb	r2, r2
 8003642:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003660:	e018      	b.n	8003694 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003662:	f7fe f9c7 	bl	80019f4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	683a      	ldr	r2, [r7, #0]
 800366e:	429a      	cmp	r2, r3
 8003670:	d803      	bhi.n	800367a <HAL_SPI_Receive+0x194>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d102      	bne.n	8003680 <HAL_SPI_Receive+0x19a>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e05c      	b.n	800374e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1c1      	bne.n	8003624 <HAL_SPI_Receive+0x13e>
 80036a0:	e03b      	b.n	800371a <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d115      	bne.n	80036dc <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68da      	ldr	r2, [r3, #12]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	b292      	uxth	r2, r2
 80036bc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c2:	1c9a      	adds	r2, r3, #2
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80036da:	e018      	b.n	800370e <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036dc:	f7fe f98a 	bl	80019f4 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d803      	bhi.n	80036f4 <HAL_SPI_Receive+0x20e>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f2:	d102      	bne.n	80036fa <HAL_SPI_Receive+0x214>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e01f      	b.n	800374e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003714:	b29b      	uxth	r3, r3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1c3      	bne.n	80036a2 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	6839      	ldr	r1, [r7, #0]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fb56 	bl	8003dd0 <SPI_EndRxTransaction>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2220      	movs	r2, #32
 800372e:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800374c:	2300      	movs	r3, #0
  }
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}

08003756 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b08a      	sub	sp, #40	@ 0x28
 800375a:	af00      	add	r7, sp, #0
 800375c:	60f8      	str	r0, [r7, #12]
 800375e:	60b9      	str	r1, [r7, #8]
 8003760:	607a      	str	r2, [r7, #4]
 8003762:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003768:	f7fe f944 	bl	80019f4 <HAL_GetTick>
 800376c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003774:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800377c:	887b      	ldrh	r3, [r7, #2]
 800377e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003780:	887b      	ldrh	r3, [r7, #2]
 8003782:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003784:	7ffb      	ldrb	r3, [r7, #31]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d00c      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x4e>
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003790:	d106      	bne.n	80037a0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d102      	bne.n	80037a0 <HAL_SPI_TransmitReceive+0x4a>
 800379a:	7ffb      	ldrb	r3, [r7, #31]
 800379c:	2b04      	cmp	r3, #4
 800379e:	d001      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80037a0:	2302      	movs	r3, #2
 80037a2:	e1f3      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d005      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x60>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d002      	beq.n	80037b6 <HAL_SPI_TransmitReceive+0x60>
 80037b0:	887b      	ldrh	r3, [r7, #2]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e1e8      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d101      	bne.n	80037c8 <HAL_SPI_TransmitReceive+0x72>
 80037c4:	2302      	movs	r3, #2
 80037c6:	e1e1      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x436>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d003      	beq.n	80037e4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2205      	movs	r2, #5
 80037e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	887a      	ldrh	r2, [r7, #2]
 80037f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	887a      	ldrh	r2, [r7, #2]
 80037fc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	887a      	ldrh	r2, [r7, #2]
 800380a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	887a      	ldrh	r2, [r7, #2]
 8003810:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2200      	movs	r2, #0
 8003816:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003826:	d802      	bhi.n	800382e <HAL_SPI_TransmitReceive+0xd8>
 8003828:	8abb      	ldrh	r3, [r7, #20]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d908      	bls.n	8003840 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	e007      	b.n	8003850 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800384e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385a:	2b40      	cmp	r3, #64	@ 0x40
 800385c:	d007      	beq.n	800386e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800386c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003876:	f240 8083 	bls.w	8003980 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d002      	beq.n	8003888 <HAL_SPI_TransmitReceive+0x132>
 8003882:	8afb      	ldrh	r3, [r7, #22]
 8003884:	2b01      	cmp	r3, #1
 8003886:	d16f      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800388c:	881a      	ldrh	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003898:	1c9a      	adds	r2, r3, #2
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	3b01      	subs	r3, #1
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038ac:	e05c      	b.n	8003968 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d11b      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x19e>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x19e>
 80038c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d113      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	881a      	ldrh	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	1c9a      	adds	r2, r3, #2
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038f0:	2300      	movs	r3, #0
 80038f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d11c      	bne.n	800393c <HAL_SPI_TransmitReceive+0x1e6>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d016      	beq.n	800393c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003918:	b292      	uxth	r2, r2
 800391a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	1c9a      	adds	r2, r3, #2
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800392c:	b29b      	uxth	r3, r3
 800392e:	3b01      	subs	r3, #1
 8003930:	b29a      	uxth	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003938:	2301      	movs	r3, #1
 800393a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800393c:	f7fe f85a 	bl	80019f4 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003948:	429a      	cmp	r2, r3
 800394a:	d80d      	bhi.n	8003968 <HAL_SPI_TransmitReceive+0x212>
 800394c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d009      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003964:	2303      	movs	r3, #3
 8003966:	e111      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800396c:	b29b      	uxth	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d19d      	bne.n	80038ae <HAL_SPI_TransmitReceive+0x158>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d197      	bne.n	80038ae <HAL_SPI_TransmitReceive+0x158>
 800397e:	e0e5      	b.n	8003b4c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <HAL_SPI_TransmitReceive+0x23a>
 8003988:	8afb      	ldrh	r3, [r7, #22]
 800398a:	2b01      	cmp	r3, #1
 800398c:	f040 80d1 	bne.w	8003b32 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b01      	cmp	r3, #1
 8003998:	d912      	bls.n	80039c0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800399e:	881a      	ldrh	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039aa:	1c9a      	adds	r2, r3, #2
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b02      	subs	r3, #2
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039be:	e0b8      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	330c      	adds	r3, #12
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039dc:	b29b      	uxth	r3, r3
 80039de:	3b01      	subs	r3, #1
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e6:	e0a4      	b.n	8003b32 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d134      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x30a>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d02f      	beq.n	8003a60 <HAL_SPI_TransmitReceive+0x30a>
 8003a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d12c      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d912      	bls.n	8003a36 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	881a      	ldrh	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b02      	subs	r3, #2
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a34:	e012      	b.n	8003a5c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	330c      	adds	r3, #12
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d148      	bne.n	8003b00 <HAL_SPI_TransmitReceive+0x3aa>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d042      	beq.n	8003b00 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d923      	bls.n	8003ace <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	b292      	uxth	r2, r2
 8003a92:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a98:	1c9a      	adds	r2, r3, #2
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	3b02      	subs	r3, #2
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d81f      	bhi.n	8003afc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003aca:	605a      	str	r2, [r3, #4]
 8003acc:	e016      	b.n	8003afc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f103 020c 	add.w	r2, r3, #12
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	7812      	ldrb	r2, [r2, #0]
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	3b01      	subs	r3, #1
 8003af4:	b29a      	uxth	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003afc:	2301      	movs	r3, #1
 8003afe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b00:	f7fd ff78 	bl	80019f4 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b0c:	429a      	cmp	r2, r3
 8003b0e:	d803      	bhi.n	8003b18 <HAL_SPI_TransmitReceive+0x3c2>
 8003b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d102      	bne.n	8003b1e <HAL_SPI_TransmitReceive+0x3c8>
 8003b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2201      	movs	r2, #1
 8003b22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e02c      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	f47f af55 	bne.w	80039e8 <HAL_SPI_TransmitReceive+0x292>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	f47f af4e 	bne.w	80039e8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b4c:	6a3a      	ldr	r2, [r7, #32]
 8003b4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f995 	bl	8003e80 <SPI_EndRxTxTransaction>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e00e      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
  }
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3728      	adds	r7, #40	@ 0x28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b088      	sub	sp, #32
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ba4:	f7fd ff26 	bl	80019f4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bb4:	f7fd ff1e 	bl	80019f4 <HAL_GetTick>
 8003bb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bba:	4b39      	ldr	r3, [pc, #228]	@ (8003ca0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	015b      	lsls	r3, r3, #5
 8003bc0:	0d1b      	lsrs	r3, r3, #20
 8003bc2:	69fa      	ldr	r2, [r7, #28]
 8003bc4:	fb02 f303 	mul.w	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bca:	e054      	b.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd2:	d050      	beq.n	8003c76 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bd4:	f7fd ff0e 	bl	80019f4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	69fa      	ldr	r2, [r7, #28]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d902      	bls.n	8003bea <SPI_WaitFlagStateUntilTimeout+0x56>
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d13d      	bne.n	8003c66 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003bf8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c02:	d111      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c0c:	d004      	beq.n	8003c18 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c16:	d107      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c26:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c2c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c30:	d10f      	bne.n	8003c52 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c50:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e017      	b.n	8003c96 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	68ba      	ldr	r2, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	bf0c      	ite	eq
 8003c86:	2301      	moveq	r3, #1
 8003c88:	2300      	movne	r3, #0
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d19b      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c94:	2300      	movs	r3, #0
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3720      	adds	r7, #32
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000000 	.word	0x20000000

08003ca4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	@ 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cb6:	f7fd fe9d 	bl	80019f4 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbe:	1a9b      	subs	r3, r3, r2
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003cc6:	f7fd fe95 	bl	80019f4 <HAL_GetTick>
 8003cca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	330c      	adds	r3, #12
 8003cd2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003cd4:	4b3d      	ldr	r3, [pc, #244]	@ (8003dcc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4413      	add	r3, r2
 8003cde:	00da      	lsls	r2, r3, #3
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	0d1b      	lsrs	r3, r3, #20
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003cec:	e060      	b.n	8003db0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003cf4:	d107      	bne.n	8003d06 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d0c:	d050      	beq.n	8003db0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d0e:	f7fd fe71 	bl	80019f4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	6a3b      	ldr	r3, [r7, #32]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d902      	bls.n	8003d24 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d13d      	bne.n	8003da0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003d32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d3c:	d111      	bne.n	8003d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d46:	d004      	beq.n	8003d52 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d50:	d107      	bne.n	8003d62 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d60:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d6a:	d10f      	bne.n	8003d8c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d8a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e010      	b.n	8003dc2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003da0:	69bb      	ldr	r3, [r7, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689a      	ldr	r2, [r3, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	4013      	ands	r3, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d196      	bne.n	8003cee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003dc0:	2300      	movs	r3, #0
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3728      	adds	r7, #40	@ 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	20000000 	.word	0x20000000

08003dd0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af02      	add	r7, sp, #8
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003de4:	d111      	bne.n	8003e0a <SPI_EndRxTransaction+0x3a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dee:	d004      	beq.n	8003dfa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003df8:	d107      	bne.n	8003e0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e08:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	9300      	str	r3, [sp, #0]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2200      	movs	r2, #0
 8003e12:	2180      	movs	r1, #128	@ 0x80
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff febd 	bl	8003b94 <SPI_WaitFlagStateUntilTimeout>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d007      	beq.n	8003e30 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e24:	f043 0220 	orr.w	r2, r3, #32
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e023      	b.n	8003e78 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e38:	d11d      	bne.n	8003e76 <SPI_EndRxTransaction+0xa6>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e42:	d004      	beq.n	8003e4e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e4c:	d113      	bne.n	8003e76 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003e5a:	68f8      	ldr	r0, [r7, #12]
 8003e5c:	f7ff ff22 	bl	8003ca4 <SPI_WaitFifoStateUntilTimeout>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d007      	beq.n	8003e76 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e6a:	f043 0220 	orr.w	r2, r3, #32
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e000      	b.n	8003e78 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af02      	add	r7, sp, #8
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f7ff ff03 	bl	8003ca4 <SPI_WaitFifoStateUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d007      	beq.n	8003eb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ea8:	f043 0220 	orr.w	r2, r3, #32
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e027      	b.n	8003f04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	9300      	str	r3, [sp, #0]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	2180      	movs	r1, #128	@ 0x80
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff fe68 	bl	8003b94 <SPI_WaitFlagStateUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d007      	beq.n	8003eda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ece:	f043 0220 	orr.w	r2, r3, #32
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e014      	b.n	8003f04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003ee6:	68f8      	ldr	r0, [r7, #12]
 8003ee8:	f7ff fedc 	bl	8003ca4 <SPI_WaitFifoStateUntilTimeout>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d007      	beq.n	8003f02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ef6:	f043 0220 	orr.w	r2, r3, #32
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e000      	b.n	8003f04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b082      	sub	sp, #8
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e040      	b.n	8003fa0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fd f822 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2224      	movs	r2, #36	@ 0x24
 8003f38:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f022 0201 	bic.w	r2, r2, #1
 8003f48:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fb62 	bl	800461c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f905 	bl	8004168 <UART_SetConfig>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e01b      	b.n	8003fa0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685a      	ldr	r2, [r3, #4]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f042 0201 	orr.w	r2, r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 fbe1 	bl	8004760 <UART_CheckIdleState>
 8003f9e:	4603      	mov	r3, r0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3708      	adds	r7, #8
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}

08003fa8 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e048      	b.n	800404c <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fc ffd4 	bl	8000f78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2224      	movs	r2, #36	@ 0x24
 8003fd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f022 0201 	bic.w	r2, r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f000 fb14 	bl	800461c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 f8b7 	bl	8004168 <UART_SetConfig>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e023      	b.n	800404c <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004012:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 8004022:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	689a      	ldr	r2, [r3, #8]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0208 	orr.w	r2, r2, #8
 8004032:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f000 fb8b 	bl	8004760 <UART_CheckIdleState>
 800404a:	4603      	mov	r3, r0
}
 800404c:	4618      	mov	r0, r3
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}

08004054 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b08a      	sub	sp, #40	@ 0x28
 8004058:	af02      	add	r7, sp, #8
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	603b      	str	r3, [r7, #0]
 8004060:	4613      	mov	r3, r2
 8004062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004068:	2b20      	cmp	r3, #32
 800406a:	d177      	bne.n	800415c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d002      	beq.n	8004078 <HAL_UART_Transmit+0x24>
 8004072:	88fb      	ldrh	r3, [r7, #6]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e070      	b.n	800415e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2221      	movs	r2, #33	@ 0x21
 8004088:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800408a:	f7fd fcb3 	bl	80019f4 <HAL_GetTick>
 800408e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	88fa      	ldrh	r2, [r7, #6]
 8004094:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	88fa      	ldrh	r2, [r7, #6]
 800409c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a8:	d108      	bne.n	80040bc <HAL_UART_Transmit+0x68>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d104      	bne.n	80040bc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	61bb      	str	r3, [r7, #24]
 80040ba:	e003      	b.n	80040c4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040c0:	2300      	movs	r3, #0
 80040c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040c4:	e02f      	b.n	8004126 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	9300      	str	r3, [sp, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	2200      	movs	r2, #0
 80040ce:	2180      	movs	r1, #128	@ 0x80
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 fbed 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d004      	beq.n	80040e6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e03b      	b.n	800415e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80040e6:	69fb      	ldr	r3, [r7, #28]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d10b      	bne.n	8004104 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	881a      	ldrh	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040f8:	b292      	uxth	r2, r2
 80040fa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80040fc:	69bb      	ldr	r3, [r7, #24]
 80040fe:	3302      	adds	r3, #2
 8004100:	61bb      	str	r3, [r7, #24]
 8004102:	e007      	b.n	8004114 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004104:	69fb      	ldr	r3, [r7, #28]
 8004106:	781a      	ldrb	r2, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	3301      	adds	r3, #1
 8004112:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800411a:	b29b      	uxth	r3, r3
 800411c:	3b01      	subs	r3, #1
 800411e:	b29a      	uxth	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1c9      	bne.n	80040c6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	2200      	movs	r2, #0
 800413a:	2140      	movs	r1, #64	@ 0x40
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fbb7 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d004      	beq.n	8004152 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2220      	movs	r2, #32
 800414c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e005      	b.n	800415e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2220      	movs	r2, #32
 8004156:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	3720      	adds	r7, #32
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
	...

08004168 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800416c:	b08a      	sub	sp, #40	@ 0x28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	431a      	orrs	r2, r3
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	431a      	orrs	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	4313      	orrs	r3, r2
 800418e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	4b9e      	ldr	r3, [pc, #632]	@ (8004410 <UART_SetConfig+0x2a8>)
 8004198:	4013      	ands	r3, r2
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	6812      	ldr	r2, [r2, #0]
 800419e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80041a0:	430b      	orrs	r3, r1
 80041a2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a93      	ldr	r2, [pc, #588]	@ (8004414 <UART_SetConfig+0x2ac>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d004      	beq.n	80041d4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d0:	4313      	orrs	r3, r2
 80041d2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e4:	430a      	orrs	r2, r1
 80041e6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a8a      	ldr	r2, [pc, #552]	@ (8004418 <UART_SetConfig+0x2b0>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d126      	bne.n	8004240 <UART_SetConfig+0xd8>
 80041f2:	4b8a      	ldr	r3, [pc, #552]	@ (800441c <UART_SetConfig+0x2b4>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f8:	f003 0303 	and.w	r3, r3, #3
 80041fc:	2b03      	cmp	r3, #3
 80041fe:	d81b      	bhi.n	8004238 <UART_SetConfig+0xd0>
 8004200:	a201      	add	r2, pc, #4	@ (adr r2, 8004208 <UART_SetConfig+0xa0>)
 8004202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004206:	bf00      	nop
 8004208:	08004219 	.word	0x08004219
 800420c:	08004229 	.word	0x08004229
 8004210:	08004221 	.word	0x08004221
 8004214:	08004231 	.word	0x08004231
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800421e:	e0ab      	b.n	8004378 <UART_SetConfig+0x210>
 8004220:	2302      	movs	r3, #2
 8004222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004226:	e0a7      	b.n	8004378 <UART_SetConfig+0x210>
 8004228:	2304      	movs	r3, #4
 800422a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800422e:	e0a3      	b.n	8004378 <UART_SetConfig+0x210>
 8004230:	2308      	movs	r3, #8
 8004232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004236:	e09f      	b.n	8004378 <UART_SetConfig+0x210>
 8004238:	2310      	movs	r3, #16
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800423e:	e09b      	b.n	8004378 <UART_SetConfig+0x210>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a76      	ldr	r2, [pc, #472]	@ (8004420 <UART_SetConfig+0x2b8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d138      	bne.n	80042bc <UART_SetConfig+0x154>
 800424a:	4b74      	ldr	r3, [pc, #464]	@ (800441c <UART_SetConfig+0x2b4>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	2b0c      	cmp	r3, #12
 8004256:	d82d      	bhi.n	80042b4 <UART_SetConfig+0x14c>
 8004258:	a201      	add	r2, pc, #4	@ (adr r2, 8004260 <UART_SetConfig+0xf8>)
 800425a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800425e:	bf00      	nop
 8004260:	08004295 	.word	0x08004295
 8004264:	080042b5 	.word	0x080042b5
 8004268:	080042b5 	.word	0x080042b5
 800426c:	080042b5 	.word	0x080042b5
 8004270:	080042a5 	.word	0x080042a5
 8004274:	080042b5 	.word	0x080042b5
 8004278:	080042b5 	.word	0x080042b5
 800427c:	080042b5 	.word	0x080042b5
 8004280:	0800429d 	.word	0x0800429d
 8004284:	080042b5 	.word	0x080042b5
 8004288:	080042b5 	.word	0x080042b5
 800428c:	080042b5 	.word	0x080042b5
 8004290:	080042ad 	.word	0x080042ad
 8004294:	2300      	movs	r3, #0
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800429a:	e06d      	b.n	8004378 <UART_SetConfig+0x210>
 800429c:	2302      	movs	r3, #2
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042a2:	e069      	b.n	8004378 <UART_SetConfig+0x210>
 80042a4:	2304      	movs	r3, #4
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042aa:	e065      	b.n	8004378 <UART_SetConfig+0x210>
 80042ac:	2308      	movs	r3, #8
 80042ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042b2:	e061      	b.n	8004378 <UART_SetConfig+0x210>
 80042b4:	2310      	movs	r3, #16
 80042b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ba:	e05d      	b.n	8004378 <UART_SetConfig+0x210>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a58      	ldr	r2, [pc, #352]	@ (8004424 <UART_SetConfig+0x2bc>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d125      	bne.n	8004312 <UART_SetConfig+0x1aa>
 80042c6:	4b55      	ldr	r3, [pc, #340]	@ (800441c <UART_SetConfig+0x2b4>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042cc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042d0:	2b30      	cmp	r3, #48	@ 0x30
 80042d2:	d016      	beq.n	8004302 <UART_SetConfig+0x19a>
 80042d4:	2b30      	cmp	r3, #48	@ 0x30
 80042d6:	d818      	bhi.n	800430a <UART_SetConfig+0x1a2>
 80042d8:	2b20      	cmp	r3, #32
 80042da:	d00a      	beq.n	80042f2 <UART_SetConfig+0x18a>
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d814      	bhi.n	800430a <UART_SetConfig+0x1a2>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <UART_SetConfig+0x182>
 80042e4:	2b10      	cmp	r3, #16
 80042e6:	d008      	beq.n	80042fa <UART_SetConfig+0x192>
 80042e8:	e00f      	b.n	800430a <UART_SetConfig+0x1a2>
 80042ea:	2300      	movs	r3, #0
 80042ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f0:	e042      	b.n	8004378 <UART_SetConfig+0x210>
 80042f2:	2302      	movs	r3, #2
 80042f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f8:	e03e      	b.n	8004378 <UART_SetConfig+0x210>
 80042fa:	2304      	movs	r3, #4
 80042fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004300:	e03a      	b.n	8004378 <UART_SetConfig+0x210>
 8004302:	2308      	movs	r3, #8
 8004304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004308:	e036      	b.n	8004378 <UART_SetConfig+0x210>
 800430a:	2310      	movs	r3, #16
 800430c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004310:	e032      	b.n	8004378 <UART_SetConfig+0x210>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a3f      	ldr	r2, [pc, #252]	@ (8004414 <UART_SetConfig+0x2ac>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d12a      	bne.n	8004372 <UART_SetConfig+0x20a>
 800431c:	4b3f      	ldr	r3, [pc, #252]	@ (800441c <UART_SetConfig+0x2b4>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004326:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800432a:	d01a      	beq.n	8004362 <UART_SetConfig+0x1fa>
 800432c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004330:	d81b      	bhi.n	800436a <UART_SetConfig+0x202>
 8004332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004336:	d00c      	beq.n	8004352 <UART_SetConfig+0x1ea>
 8004338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800433c:	d815      	bhi.n	800436a <UART_SetConfig+0x202>
 800433e:	2b00      	cmp	r3, #0
 8004340:	d003      	beq.n	800434a <UART_SetConfig+0x1e2>
 8004342:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004346:	d008      	beq.n	800435a <UART_SetConfig+0x1f2>
 8004348:	e00f      	b.n	800436a <UART_SetConfig+0x202>
 800434a:	2300      	movs	r3, #0
 800434c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004350:	e012      	b.n	8004378 <UART_SetConfig+0x210>
 8004352:	2302      	movs	r3, #2
 8004354:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004358:	e00e      	b.n	8004378 <UART_SetConfig+0x210>
 800435a:	2304      	movs	r3, #4
 800435c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004360:	e00a      	b.n	8004378 <UART_SetConfig+0x210>
 8004362:	2308      	movs	r3, #8
 8004364:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004368:	e006      	b.n	8004378 <UART_SetConfig+0x210>
 800436a:	2310      	movs	r3, #16
 800436c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004370:	e002      	b.n	8004378 <UART_SetConfig+0x210>
 8004372:	2310      	movs	r3, #16
 8004374:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a25      	ldr	r2, [pc, #148]	@ (8004414 <UART_SetConfig+0x2ac>)
 800437e:	4293      	cmp	r3, r2
 8004380:	f040 808a 	bne.w	8004498 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004384:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004388:	2b08      	cmp	r3, #8
 800438a:	d824      	bhi.n	80043d6 <UART_SetConfig+0x26e>
 800438c:	a201      	add	r2, pc, #4	@ (adr r2, 8004394 <UART_SetConfig+0x22c>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080043d7 	.word	0x080043d7
 800439c:	080043c1 	.word	0x080043c1
 80043a0:	080043d7 	.word	0x080043d7
 80043a4:	080043c7 	.word	0x080043c7
 80043a8:	080043d7 	.word	0x080043d7
 80043ac:	080043d7 	.word	0x080043d7
 80043b0:	080043d7 	.word	0x080043d7
 80043b4:	080043cf 	.word	0x080043cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043b8:	f7fe fc6a 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 80043bc:	61f8      	str	r0, [r7, #28]
        break;
 80043be:	e010      	b.n	80043e2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043c0:	4b19      	ldr	r3, [pc, #100]	@ (8004428 <UART_SetConfig+0x2c0>)
 80043c2:	61fb      	str	r3, [r7, #28]
        break;
 80043c4:	e00d      	b.n	80043e2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043c6:	f7fe fbcb 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 80043ca:	61f8      	str	r0, [r7, #28]
        break;
 80043cc:	e009      	b.n	80043e2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043d2:	61fb      	str	r3, [r7, #28]
        break;
 80043d4:	e005      	b.n	80043e2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 80043d6:	2300      	movs	r3, #0
 80043d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80043e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8109 	beq.w	80045fc <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	4613      	mov	r3, r2
 80043f0:	005b      	lsls	r3, r3, #1
 80043f2:	4413      	add	r3, r2
 80043f4:	69fa      	ldr	r2, [r7, #28]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d305      	bcc.n	8004406 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	429a      	cmp	r2, r3
 8004404:	d912      	bls.n	800442c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800440c:	e0f6      	b.n	80045fc <UART_SetConfig+0x494>
 800440e:	bf00      	nop
 8004410:	efff69f3 	.word	0xefff69f3
 8004414:	40008000 	.word	0x40008000
 8004418:	40013800 	.word	0x40013800
 800441c:	40021000 	.word	0x40021000
 8004420:	40004400 	.word	0x40004400
 8004424:	40004800 	.word	0x40004800
 8004428:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2200      	movs	r2, #0
 8004430:	461c      	mov	r4, r3
 8004432:	4615      	mov	r5, r2
 8004434:	f04f 0200 	mov.w	r2, #0
 8004438:	f04f 0300 	mov.w	r3, #0
 800443c:	022b      	lsls	r3, r5, #8
 800443e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004442:	0222      	lsls	r2, r4, #8
 8004444:	68f9      	ldr	r1, [r7, #12]
 8004446:	6849      	ldr	r1, [r1, #4]
 8004448:	0849      	lsrs	r1, r1, #1
 800444a:	2000      	movs	r0, #0
 800444c:	4688      	mov	r8, r1
 800444e:	4681      	mov	r9, r0
 8004450:	eb12 0a08 	adds.w	sl, r2, r8
 8004454:	eb43 0b09 	adc.w	fp, r3, r9
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004466:	4650      	mov	r0, sl
 8004468:	4659      	mov	r1, fp
 800446a:	f7fc f9bf 	bl	80007ec <__aeabi_uldivmod>
 800446e:	4602      	mov	r2, r0
 8004470:	460b      	mov	r3, r1
 8004472:	4613      	mov	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800447c:	d308      	bcc.n	8004490 <UART_SetConfig+0x328>
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004484:	d204      	bcs.n	8004490 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	60da      	str	r2, [r3, #12]
 800448e:	e0b5      	b.n	80045fc <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004496:	e0b1      	b.n	80045fc <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044a0:	d15d      	bne.n	800455e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 80044a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d827      	bhi.n	80044fa <UART_SetConfig+0x392>
 80044aa:	a201      	add	r2, pc, #4	@ (adr r2, 80044b0 <UART_SetConfig+0x348>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044d5 	.word	0x080044d5
 80044b4:	080044dd 	.word	0x080044dd
 80044b8:	080044e5 	.word	0x080044e5
 80044bc:	080044fb 	.word	0x080044fb
 80044c0:	080044eb 	.word	0x080044eb
 80044c4:	080044fb 	.word	0x080044fb
 80044c8:	080044fb 	.word	0x080044fb
 80044cc:	080044fb 	.word	0x080044fb
 80044d0:	080044f3 	.word	0x080044f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d4:	f7fe fbdc 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 80044d8:	61f8      	str	r0, [r7, #28]
        break;
 80044da:	e014      	b.n	8004506 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044dc:	f7fe fbee 	bl	8002cbc <HAL_RCC_GetPCLK2Freq>
 80044e0:	61f8      	str	r0, [r7, #28]
        break;
 80044e2:	e010      	b.n	8004506 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e4:	4b4c      	ldr	r3, [pc, #304]	@ (8004618 <UART_SetConfig+0x4b0>)
 80044e6:	61fb      	str	r3, [r7, #28]
        break;
 80044e8:	e00d      	b.n	8004506 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ea:	f7fe fb39 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 80044ee:	61f8      	str	r0, [r7, #28]
        break;
 80044f0:	e009      	b.n	8004506 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044f6:	61fb      	str	r3, [r7, #28]
        break;
 80044f8:	e005      	b.n	8004506 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004504:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d077      	beq.n	80045fc <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800450c:	69fb      	ldr	r3, [r7, #28]
 800450e:	005a      	lsls	r2, r3, #1
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	085b      	lsrs	r3, r3, #1
 8004516:	441a      	add	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b0f      	cmp	r3, #15
 8004526:	d916      	bls.n	8004556 <UART_SetConfig+0x3ee>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452e:	d212      	bcs.n	8004556 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	b29b      	uxth	r3, r3
 8004534:	f023 030f 	bic.w	r3, r3, #15
 8004538:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	085b      	lsrs	r3, r3, #1
 800453e:	b29b      	uxth	r3, r3
 8004540:	f003 0307 	and.w	r3, r3, #7
 8004544:	b29a      	uxth	r2, r3
 8004546:	8afb      	ldrh	r3, [r7, #22]
 8004548:	4313      	orrs	r3, r2
 800454a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	8afa      	ldrh	r2, [r7, #22]
 8004552:	60da      	str	r2, [r3, #12]
 8004554:	e052      	b.n	80045fc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800455c:	e04e      	b.n	80045fc <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 800455e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004562:	2b08      	cmp	r3, #8
 8004564:	d827      	bhi.n	80045b6 <UART_SetConfig+0x44e>
 8004566:	a201      	add	r2, pc, #4	@ (adr r2, 800456c <UART_SetConfig+0x404>)
 8004568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800456c:	08004591 	.word	0x08004591
 8004570:	08004599 	.word	0x08004599
 8004574:	080045a1 	.word	0x080045a1
 8004578:	080045b7 	.word	0x080045b7
 800457c:	080045a7 	.word	0x080045a7
 8004580:	080045b7 	.word	0x080045b7
 8004584:	080045b7 	.word	0x080045b7
 8004588:	080045b7 	.word	0x080045b7
 800458c:	080045af 	.word	0x080045af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004590:	f7fe fb7e 	bl	8002c90 <HAL_RCC_GetPCLK1Freq>
 8004594:	61f8      	str	r0, [r7, #28]
        break;
 8004596:	e014      	b.n	80045c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004598:	f7fe fb90 	bl	8002cbc <HAL_RCC_GetPCLK2Freq>
 800459c:	61f8      	str	r0, [r7, #28]
        break;
 800459e:	e010      	b.n	80045c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <UART_SetConfig+0x4b0>)
 80045a2:	61fb      	str	r3, [r7, #28]
        break;
 80045a4:	e00d      	b.n	80045c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a6:	f7fe fadb 	bl	8002b60 <HAL_RCC_GetSysClockFreq>
 80045aa:	61f8      	str	r0, [r7, #28]
        break;
 80045ac:	e009      	b.n	80045c2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045b2:	61fb      	str	r3, [r7, #28]
        break;
 80045b4:	e005      	b.n	80045c2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045c0:	bf00      	nop
    }

    if (pclk != 0U)
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d019      	beq.n	80045fc <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	085a      	lsrs	r2, r3, #1
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	441a      	add	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045da:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	2b0f      	cmp	r3, #15
 80045e0:	d909      	bls.n	80045f6 <UART_SetConfig+0x48e>
 80045e2:	69bb      	ldr	r3, [r7, #24]
 80045e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045e8:	d205      	bcs.n	80045f6 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	b29a      	uxth	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
 80045f4:	e002      	b.n	80045fc <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004608:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800460c:	4618      	mov	r0, r3
 800460e:	3728      	adds	r7, #40	@ 0x28
 8004610:	46bd      	mov	sp, r7
 8004612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004616:	bf00      	nop
 8004618:	00f42400 	.word	0x00f42400

0800461c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004628:	f003 0308 	and.w	r3, r3, #8
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00a      	beq.n	8004646 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00a      	beq.n	8004668 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00a      	beq.n	800468a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	430a      	orrs	r2, r1
 8004688:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468e:	f003 0304 	and.w	r3, r3, #4
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00a      	beq.n	80046ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	f003 0310 	and.w	r3, r3, #16
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00a      	beq.n	80046ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	430a      	orrs	r2, r1
 80046cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	f003 0320 	and.w	r3, r3, #32
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00a      	beq.n	80046f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	430a      	orrs	r2, r1
 80046ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01a      	beq.n	8004732 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	430a      	orrs	r2, r1
 8004710:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800471a:	d10a      	bne.n	8004732 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	430a      	orrs	r2, r1
 8004752:	605a      	str	r2, [r3, #4]
  }
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b098      	sub	sp, #96	@ 0x60
 8004764:	af02      	add	r7, sp, #8
 8004766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004770:	f7fd f940 	bl	80019f4 <HAL_GetTick>
 8004774:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f003 0308 	and.w	r3, r3, #8
 8004780:	2b08      	cmp	r3, #8
 8004782:	d12e      	bne.n	80047e2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004784:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800478c:	2200      	movs	r2, #0
 800478e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f88c 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d021      	beq.n	80047e2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047a6:	e853 3f00 	ldrex	r3, [r3]
 80047aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80047b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	461a      	mov	r2, r3
 80047ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80047be:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80047c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80047c4:	e841 2300 	strex	r3, r2, [r1]
 80047c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d1e6      	bne.n	800479e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2220      	movs	r2, #32
 80047d4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047de:	2303      	movs	r3, #3
 80047e0:	e062      	b.n	80048a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d149      	bne.n	8004884 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80047f4:	9300      	str	r3, [sp, #0]
 80047f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80047f8:	2200      	movs	r2, #0
 80047fa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f856 	bl	80048b0 <UART_WaitOnFlagUntilTimeout>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d03c      	beq.n	8004884 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	e853 3f00 	ldrex	r3, [r3]
 8004816:	623b      	str	r3, [r7, #32]
   return(result);
 8004818:	6a3b      	ldr	r3, [r7, #32]
 800481a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800481e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	461a      	mov	r2, r3
 8004826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004828:	633b      	str	r3, [r7, #48]	@ 0x30
 800482a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800482c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800482e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004830:	e841 2300 	strex	r3, r2, [r1]
 8004834:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1e6      	bne.n	800480a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	e853 3f00 	ldrex	r3, [r3]
 800484a:	60fb      	str	r3, [r7, #12]
   return(result);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	3308      	adds	r3, #8
 800485a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800485c:	61fa      	str	r2, [r7, #28]
 800485e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004860:	69b9      	ldr	r1, [r7, #24]
 8004862:	69fa      	ldr	r2, [r7, #28]
 8004864:	e841 2300 	strex	r3, r2, [r1]
 8004868:	617b      	str	r3, [r7, #20]
   return(result);
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1e5      	bne.n	800483c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e011      	b.n	80048a8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2220      	movs	r2, #32
 8004888:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3758      	adds	r7, #88	@ 0x58
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	603b      	str	r3, [r7, #0]
 80048bc:	4613      	mov	r3, r2
 80048be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048c0:	e04f      	b.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d04b      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ca:	f7fd f893 	bl	80019f4 <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d302      	bcc.n	80048e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e04e      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0304 	and.w	r3, r3, #4
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d037      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b80      	cmp	r3, #128	@ 0x80
 80048f6:	d034      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b40      	cmp	r3, #64	@ 0x40
 80048fc:	d031      	beq.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	69db      	ldr	r3, [r3, #28]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d110      	bne.n	800492e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2208      	movs	r2, #8
 8004912:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f000 f838 	bl	800498a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2208      	movs	r2, #8
 800491e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e029      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004938:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800493c:	d111      	bne.n	8004962 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004946:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f81e 	bl	800498a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e00f      	b.n	8004982 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	69da      	ldr	r2, [r3, #28]
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4013      	ands	r3, r2
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	429a      	cmp	r2, r3
 8004970:	bf0c      	ite	eq
 8004972:	2301      	moveq	r3, #1
 8004974:	2300      	movne	r3, #0
 8004976:	b2db      	uxtb	r3, r3
 8004978:	461a      	mov	r2, r3
 800497a:	79fb      	ldrb	r3, [r7, #7]
 800497c:	429a      	cmp	r2, r3
 800497e:	d0a0      	beq.n	80048c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800498a:	b480      	push	{r7}
 800498c:	b095      	sub	sp, #84	@ 0x54
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800499a:	e853 3f00 	ldrex	r3, [r3]
 800499e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80049a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049b2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049b8:	e841 2300 	strex	r3, r2, [r1]
 80049bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d1e6      	bne.n	8004992 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	3308      	adds	r3, #8
 80049ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	e853 3f00 	ldrex	r3, [r3]
 80049d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f023 0301 	bic.w	r3, r3, #1
 80049da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	3308      	adds	r3, #8
 80049e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049ec:	e841 2300 	strex	r3, r2, [r1]
 80049f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1e5      	bne.n	80049c4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d118      	bne.n	8004a32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	e853 3f00 	ldrex	r3, [r3]
 8004a0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f023 0310 	bic.w	r3, r3, #16
 8004a14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a1e:	61bb      	str	r3, [r7, #24]
 8004a20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a22:	6979      	ldr	r1, [r7, #20]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	e841 2300 	strex	r3, r2, [r1]
 8004a2a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1e6      	bne.n	8004a00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a46:	bf00      	nop
 8004a48:	3754      	adds	r7, #84	@ 0x54
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004a58:	4904      	ldr	r1, [pc, #16]	@ (8004a6c <MX_FATFS_Init+0x18>)
 8004a5a:	4805      	ldr	r0, [pc, #20]	@ (8004a70 <MX_FATFS_Init+0x1c>)
 8004a5c:	f000 f8b0 	bl	8004bc0 <FATFS_LinkDriver>
 8004a60:	4603      	mov	r3, r0
 8004a62:	461a      	mov	r2, r3
 8004a64:	4b03      	ldr	r3, [pc, #12]	@ (8004a74 <MX_FATFS_Init+0x20>)
 8004a66:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004a68:	bf00      	nop
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	20000334 	.word	0x20000334
 8004a70:	20000020 	.word	0x20000020
 8004a74:	20000330 	.word	0x20000330

08004a78 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	4603      	mov	r3, r0
 8004a80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004a82:	4b06      	ldr	r3, [pc, #24]	@ (8004a9c <USER_initialize+0x24>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004a88:	4b04      	ldr	r3, [pc, #16]	@ (8004a9c <USER_initialize+0x24>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	370c      	adds	r7, #12
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	2000001d 	.word	0x2000001d

08004aa0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004aaa:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <USER_status+0x24>)
 8004aac:	2201      	movs	r2, #1
 8004aae:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004ab0:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <USER_status+0x24>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	2000001d 	.word	0x2000001d

08004ac8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60b9      	str	r1, [r7, #8]
 8004ad0:	607a      	str	r2, [r7, #4]
 8004ad2:	603b      	str	r3, [r7, #0]
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004ad8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr

08004ae6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004ae6:	b480      	push	{r7}
 8004ae8:	b085      	sub	sp, #20
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
 8004af2:	4603      	mov	r3, r0
 8004af4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004af6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3714      	adds	r7, #20
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	603a      	str	r2, [r7, #0]
 8004b0e:	71fb      	strb	r3, [r7, #7]
 8004b10:	460b      	mov	r3, r1
 8004b12:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	73fb      	strb	r3, [r7, #15]
    return res;
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
	...

08004b28 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b087      	sub	sp, #28
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	4613      	mov	r3, r2
 8004b34:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004b36:	2301      	movs	r3, #1
 8004b38:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004b3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004bbc <FATFS_LinkDriverEx+0x94>)
 8004b40:	7a5b      	ldrb	r3, [r3, #9]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d131      	bne.n	8004bac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004b48:	4b1c      	ldr	r3, [pc, #112]	@ (8004bbc <FATFS_LinkDriverEx+0x94>)
 8004b4a:	7a5b      	ldrb	r3, [r3, #9]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	4b1a      	ldr	r3, [pc, #104]	@ (8004bbc <FATFS_LinkDriverEx+0x94>)
 8004b52:	2100      	movs	r1, #0
 8004b54:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004b56:	4b19      	ldr	r3, [pc, #100]	@ (8004bbc <FATFS_LinkDriverEx+0x94>)
 8004b58:	7a5b      	ldrb	r3, [r3, #9]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	4a17      	ldr	r2, [pc, #92]	@ (8004bbc <FATFS_LinkDriverEx+0x94>)
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004b66:	4b15      	ldr	r3, [pc, #84]	@ (8004bbc <FATFS_LinkDriverEx+0x94>)
 8004b68:	7a5b      	ldrb	r3, [r3, #9]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b13      	ldr	r3, [pc, #76]	@ (8004bbc <FATFS_LinkDriverEx+0x94>)
 8004b70:	4413      	add	r3, r2
 8004b72:	79fa      	ldrb	r2, [r7, #7]
 8004b74:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004b76:	4b11      	ldr	r3, [pc, #68]	@ (8004bbc <FATFS_LinkDriverEx+0x94>)
 8004b78:	7a5b      	ldrb	r3, [r3, #9]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	1c5a      	adds	r2, r3, #1
 8004b7e:	b2d1      	uxtb	r1, r2
 8004b80:	4a0e      	ldr	r2, [pc, #56]	@ (8004bbc <FATFS_LinkDriverEx+0x94>)
 8004b82:	7251      	strb	r1, [r2, #9]
 8004b84:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004b86:	7dbb      	ldrb	r3, [r7, #22]
 8004b88:	3330      	adds	r3, #48	@ 0x30
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	3301      	adds	r3, #1
 8004b94:	223a      	movs	r2, #58	@ 0x3a
 8004b96:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	3302      	adds	r3, #2
 8004b9c:	222f      	movs	r2, #47	@ 0x2f
 8004b9e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	3303      	adds	r3, #3
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	371c      	adds	r7, #28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	20000338 	.word	0x20000338

08004bc0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004bca:	2200      	movs	r2, #0
 8004bcc:	6839      	ldr	r1, [r7, #0]
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7ff ffaa 	bl	8004b28 <FATFS_LinkDriverEx>
 8004bd4:	4603      	mov	r3, r0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3708      	adds	r7, #8
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
	...

08004be0 <std>:
 8004be0:	2300      	movs	r3, #0
 8004be2:	b510      	push	{r4, lr}
 8004be4:	4604      	mov	r4, r0
 8004be6:	e9c0 3300 	strd	r3, r3, [r0]
 8004bea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bee:	6083      	str	r3, [r0, #8]
 8004bf0:	8181      	strh	r1, [r0, #12]
 8004bf2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004bf4:	81c2      	strh	r2, [r0, #14]
 8004bf6:	6183      	str	r3, [r0, #24]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	2208      	movs	r2, #8
 8004bfc:	305c      	adds	r0, #92	@ 0x5c
 8004bfe:	f000 f9e7 	bl	8004fd0 <memset>
 8004c02:	4b0d      	ldr	r3, [pc, #52]	@ (8004c38 <std+0x58>)
 8004c04:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c06:	4b0d      	ldr	r3, [pc, #52]	@ (8004c3c <std+0x5c>)
 8004c08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <std+0x60>)
 8004c0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004c44 <std+0x64>)
 8004c10:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c12:	4b0d      	ldr	r3, [pc, #52]	@ (8004c48 <std+0x68>)
 8004c14:	6224      	str	r4, [r4, #32]
 8004c16:	429c      	cmp	r4, r3
 8004c18:	d006      	beq.n	8004c28 <std+0x48>
 8004c1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c1e:	4294      	cmp	r4, r2
 8004c20:	d002      	beq.n	8004c28 <std+0x48>
 8004c22:	33d0      	adds	r3, #208	@ 0xd0
 8004c24:	429c      	cmp	r4, r3
 8004c26:	d105      	bne.n	8004c34 <std+0x54>
 8004c28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c30:	f000 ba46 	b.w	80050c0 <__retarget_lock_init_recursive>
 8004c34:	bd10      	pop	{r4, pc}
 8004c36:	bf00      	nop
 8004c38:	08004e21 	.word	0x08004e21
 8004c3c:	08004e43 	.word	0x08004e43
 8004c40:	08004e7b 	.word	0x08004e7b
 8004c44:	08004e9f 	.word	0x08004e9f
 8004c48:	20000344 	.word	0x20000344

08004c4c <stdio_exit_handler>:
 8004c4c:	4a02      	ldr	r2, [pc, #8]	@ (8004c58 <stdio_exit_handler+0xc>)
 8004c4e:	4903      	ldr	r1, [pc, #12]	@ (8004c5c <stdio_exit_handler+0x10>)
 8004c50:	4803      	ldr	r0, [pc, #12]	@ (8004c60 <stdio_exit_handler+0x14>)
 8004c52:	f000 b869 	b.w	8004d28 <_fwalk_sglue>
 8004c56:	bf00      	nop
 8004c58:	20000034 	.word	0x20000034
 8004c5c:	080053c1 	.word	0x080053c1
 8004c60:	20000044 	.word	0x20000044

08004c64 <cleanup_stdio>:
 8004c64:	6841      	ldr	r1, [r0, #4]
 8004c66:	4b0c      	ldr	r3, [pc, #48]	@ (8004c98 <cleanup_stdio+0x34>)
 8004c68:	4299      	cmp	r1, r3
 8004c6a:	b510      	push	{r4, lr}
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	d001      	beq.n	8004c74 <cleanup_stdio+0x10>
 8004c70:	f000 fba6 	bl	80053c0 <_fflush_r>
 8004c74:	68a1      	ldr	r1, [r4, #8]
 8004c76:	4b09      	ldr	r3, [pc, #36]	@ (8004c9c <cleanup_stdio+0x38>)
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	d002      	beq.n	8004c82 <cleanup_stdio+0x1e>
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f000 fb9f 	bl	80053c0 <_fflush_r>
 8004c82:	68e1      	ldr	r1, [r4, #12]
 8004c84:	4b06      	ldr	r3, [pc, #24]	@ (8004ca0 <cleanup_stdio+0x3c>)
 8004c86:	4299      	cmp	r1, r3
 8004c88:	d004      	beq.n	8004c94 <cleanup_stdio+0x30>
 8004c8a:	4620      	mov	r0, r4
 8004c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c90:	f000 bb96 	b.w	80053c0 <_fflush_r>
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	bf00      	nop
 8004c98:	20000344 	.word	0x20000344
 8004c9c:	200003ac 	.word	0x200003ac
 8004ca0:	20000414 	.word	0x20000414

08004ca4 <global_stdio_init.part.0>:
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <global_stdio_init.part.0+0x30>)
 8004ca8:	4c0b      	ldr	r4, [pc, #44]	@ (8004cd8 <global_stdio_init.part.0+0x34>)
 8004caa:	4a0c      	ldr	r2, [pc, #48]	@ (8004cdc <global_stdio_init.part.0+0x38>)
 8004cac:	601a      	str	r2, [r3, #0]
 8004cae:	4620      	mov	r0, r4
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2104      	movs	r1, #4
 8004cb4:	f7ff ff94 	bl	8004be0 <std>
 8004cb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	2109      	movs	r1, #9
 8004cc0:	f7ff ff8e 	bl	8004be0 <std>
 8004cc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cc8:	2202      	movs	r2, #2
 8004cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cce:	2112      	movs	r1, #18
 8004cd0:	f7ff bf86 	b.w	8004be0 <std>
 8004cd4:	2000047c 	.word	0x2000047c
 8004cd8:	20000344 	.word	0x20000344
 8004cdc:	08004c4d 	.word	0x08004c4d

08004ce0 <__sfp_lock_acquire>:
 8004ce0:	4801      	ldr	r0, [pc, #4]	@ (8004ce8 <__sfp_lock_acquire+0x8>)
 8004ce2:	f000 b9ee 	b.w	80050c2 <__retarget_lock_acquire_recursive>
 8004ce6:	bf00      	nop
 8004ce8:	20000485 	.word	0x20000485

08004cec <__sfp_lock_release>:
 8004cec:	4801      	ldr	r0, [pc, #4]	@ (8004cf4 <__sfp_lock_release+0x8>)
 8004cee:	f000 b9e9 	b.w	80050c4 <__retarget_lock_release_recursive>
 8004cf2:	bf00      	nop
 8004cf4:	20000485 	.word	0x20000485

08004cf8 <__sinit>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	4604      	mov	r4, r0
 8004cfc:	f7ff fff0 	bl	8004ce0 <__sfp_lock_acquire>
 8004d00:	6a23      	ldr	r3, [r4, #32]
 8004d02:	b11b      	cbz	r3, 8004d0c <__sinit+0x14>
 8004d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d08:	f7ff bff0 	b.w	8004cec <__sfp_lock_release>
 8004d0c:	4b04      	ldr	r3, [pc, #16]	@ (8004d20 <__sinit+0x28>)
 8004d0e:	6223      	str	r3, [r4, #32]
 8004d10:	4b04      	ldr	r3, [pc, #16]	@ (8004d24 <__sinit+0x2c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1f5      	bne.n	8004d04 <__sinit+0xc>
 8004d18:	f7ff ffc4 	bl	8004ca4 <global_stdio_init.part.0>
 8004d1c:	e7f2      	b.n	8004d04 <__sinit+0xc>
 8004d1e:	bf00      	nop
 8004d20:	08004c65 	.word	0x08004c65
 8004d24:	2000047c 	.word	0x2000047c

08004d28 <_fwalk_sglue>:
 8004d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d2c:	4607      	mov	r7, r0
 8004d2e:	4688      	mov	r8, r1
 8004d30:	4614      	mov	r4, r2
 8004d32:	2600      	movs	r6, #0
 8004d34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d38:	f1b9 0901 	subs.w	r9, r9, #1
 8004d3c:	d505      	bpl.n	8004d4a <_fwalk_sglue+0x22>
 8004d3e:	6824      	ldr	r4, [r4, #0]
 8004d40:	2c00      	cmp	r4, #0
 8004d42:	d1f7      	bne.n	8004d34 <_fwalk_sglue+0xc>
 8004d44:	4630      	mov	r0, r6
 8004d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d4a:	89ab      	ldrh	r3, [r5, #12]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d907      	bls.n	8004d60 <_fwalk_sglue+0x38>
 8004d50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d54:	3301      	adds	r3, #1
 8004d56:	d003      	beq.n	8004d60 <_fwalk_sglue+0x38>
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4638      	mov	r0, r7
 8004d5c:	47c0      	blx	r8
 8004d5e:	4306      	orrs	r6, r0
 8004d60:	3568      	adds	r5, #104	@ 0x68
 8004d62:	e7e9      	b.n	8004d38 <_fwalk_sglue+0x10>

08004d64 <_puts_r>:
 8004d64:	6a03      	ldr	r3, [r0, #32]
 8004d66:	b570      	push	{r4, r5, r6, lr}
 8004d68:	6884      	ldr	r4, [r0, #8]
 8004d6a:	4605      	mov	r5, r0
 8004d6c:	460e      	mov	r6, r1
 8004d6e:	b90b      	cbnz	r3, 8004d74 <_puts_r+0x10>
 8004d70:	f7ff ffc2 	bl	8004cf8 <__sinit>
 8004d74:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d76:	07db      	lsls	r3, r3, #31
 8004d78:	d405      	bmi.n	8004d86 <_puts_r+0x22>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	0598      	lsls	r0, r3, #22
 8004d7e:	d402      	bmi.n	8004d86 <_puts_r+0x22>
 8004d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d82:	f000 f99e 	bl	80050c2 <__retarget_lock_acquire_recursive>
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	0719      	lsls	r1, r3, #28
 8004d8a:	d502      	bpl.n	8004d92 <_puts_r+0x2e>
 8004d8c:	6923      	ldr	r3, [r4, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d135      	bne.n	8004dfe <_puts_r+0x9a>
 8004d92:	4621      	mov	r1, r4
 8004d94:	4628      	mov	r0, r5
 8004d96:	f000 f8c5 	bl	8004f24 <__swsetup_r>
 8004d9a:	b380      	cbz	r0, 8004dfe <_puts_r+0x9a>
 8004d9c:	f04f 35ff 	mov.w	r5, #4294967295
 8004da0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004da2:	07da      	lsls	r2, r3, #31
 8004da4:	d405      	bmi.n	8004db2 <_puts_r+0x4e>
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	059b      	lsls	r3, r3, #22
 8004daa:	d402      	bmi.n	8004db2 <_puts_r+0x4e>
 8004dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dae:	f000 f989 	bl	80050c4 <__retarget_lock_release_recursive>
 8004db2:	4628      	mov	r0, r5
 8004db4:	bd70      	pop	{r4, r5, r6, pc}
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da04      	bge.n	8004dc4 <_puts_r+0x60>
 8004dba:	69a2      	ldr	r2, [r4, #24]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	dc17      	bgt.n	8004df0 <_puts_r+0x8c>
 8004dc0:	290a      	cmp	r1, #10
 8004dc2:	d015      	beq.n	8004df0 <_puts_r+0x8c>
 8004dc4:	6823      	ldr	r3, [r4, #0]
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	6022      	str	r2, [r4, #0]
 8004dca:	7019      	strb	r1, [r3, #0]
 8004dcc:	68a3      	ldr	r3, [r4, #8]
 8004dce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	60a3      	str	r3, [r4, #8]
 8004dd6:	2900      	cmp	r1, #0
 8004dd8:	d1ed      	bne.n	8004db6 <_puts_r+0x52>
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	da11      	bge.n	8004e02 <_puts_r+0x9e>
 8004dde:	4622      	mov	r2, r4
 8004de0:	210a      	movs	r1, #10
 8004de2:	4628      	mov	r0, r5
 8004de4:	f000 f85f 	bl	8004ea6 <__swbuf_r>
 8004de8:	3001      	adds	r0, #1
 8004dea:	d0d7      	beq.n	8004d9c <_puts_r+0x38>
 8004dec:	250a      	movs	r5, #10
 8004dee:	e7d7      	b.n	8004da0 <_puts_r+0x3c>
 8004df0:	4622      	mov	r2, r4
 8004df2:	4628      	mov	r0, r5
 8004df4:	f000 f857 	bl	8004ea6 <__swbuf_r>
 8004df8:	3001      	adds	r0, #1
 8004dfa:	d1e7      	bne.n	8004dcc <_puts_r+0x68>
 8004dfc:	e7ce      	b.n	8004d9c <_puts_r+0x38>
 8004dfe:	3e01      	subs	r6, #1
 8004e00:	e7e4      	b.n	8004dcc <_puts_r+0x68>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	1c5a      	adds	r2, r3, #1
 8004e06:	6022      	str	r2, [r4, #0]
 8004e08:	220a      	movs	r2, #10
 8004e0a:	701a      	strb	r2, [r3, #0]
 8004e0c:	e7ee      	b.n	8004dec <_puts_r+0x88>
	...

08004e10 <puts>:
 8004e10:	4b02      	ldr	r3, [pc, #8]	@ (8004e1c <puts+0xc>)
 8004e12:	4601      	mov	r1, r0
 8004e14:	6818      	ldr	r0, [r3, #0]
 8004e16:	f7ff bfa5 	b.w	8004d64 <_puts_r>
 8004e1a:	bf00      	nop
 8004e1c:	20000040 	.word	0x20000040

08004e20 <__sread>:
 8004e20:	b510      	push	{r4, lr}
 8004e22:	460c      	mov	r4, r1
 8004e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e28:	f000 f8fc 	bl	8005024 <_read_r>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	bfab      	itete	ge
 8004e30:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004e32:	89a3      	ldrhlt	r3, [r4, #12]
 8004e34:	181b      	addge	r3, r3, r0
 8004e36:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004e3a:	bfac      	ite	ge
 8004e3c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004e3e:	81a3      	strhlt	r3, [r4, #12]
 8004e40:	bd10      	pop	{r4, pc}

08004e42 <__swrite>:
 8004e42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e46:	461f      	mov	r7, r3
 8004e48:	898b      	ldrh	r3, [r1, #12]
 8004e4a:	05db      	lsls	r3, r3, #23
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	460c      	mov	r4, r1
 8004e50:	4616      	mov	r6, r2
 8004e52:	d505      	bpl.n	8004e60 <__swrite+0x1e>
 8004e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e58:	2302      	movs	r3, #2
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f000 f8d0 	bl	8005000 <_lseek_r>
 8004e60:	89a3      	ldrh	r3, [r4, #12]
 8004e62:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e6a:	81a3      	strh	r3, [r4, #12]
 8004e6c:	4632      	mov	r2, r6
 8004e6e:	463b      	mov	r3, r7
 8004e70:	4628      	mov	r0, r5
 8004e72:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e76:	f000 b8e7 	b.w	8005048 <_write_r>

08004e7a <__sseek>:
 8004e7a:	b510      	push	{r4, lr}
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e82:	f000 f8bd 	bl	8005000 <_lseek_r>
 8004e86:	1c43      	adds	r3, r0, #1
 8004e88:	89a3      	ldrh	r3, [r4, #12]
 8004e8a:	bf15      	itete	ne
 8004e8c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e8e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e92:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e96:	81a3      	strheq	r3, [r4, #12]
 8004e98:	bf18      	it	ne
 8004e9a:	81a3      	strhne	r3, [r4, #12]
 8004e9c:	bd10      	pop	{r4, pc}

08004e9e <__sclose>:
 8004e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ea2:	f000 b89d 	b.w	8004fe0 <_close_r>

08004ea6 <__swbuf_r>:
 8004ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ea8:	460e      	mov	r6, r1
 8004eaa:	4614      	mov	r4, r2
 8004eac:	4605      	mov	r5, r0
 8004eae:	b118      	cbz	r0, 8004eb8 <__swbuf_r+0x12>
 8004eb0:	6a03      	ldr	r3, [r0, #32]
 8004eb2:	b90b      	cbnz	r3, 8004eb8 <__swbuf_r+0x12>
 8004eb4:	f7ff ff20 	bl	8004cf8 <__sinit>
 8004eb8:	69a3      	ldr	r3, [r4, #24]
 8004eba:	60a3      	str	r3, [r4, #8]
 8004ebc:	89a3      	ldrh	r3, [r4, #12]
 8004ebe:	071a      	lsls	r2, r3, #28
 8004ec0:	d501      	bpl.n	8004ec6 <__swbuf_r+0x20>
 8004ec2:	6923      	ldr	r3, [r4, #16]
 8004ec4:	b943      	cbnz	r3, 8004ed8 <__swbuf_r+0x32>
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f000 f82b 	bl	8004f24 <__swsetup_r>
 8004ece:	b118      	cbz	r0, 8004ed8 <__swbuf_r+0x32>
 8004ed0:	f04f 37ff 	mov.w	r7, #4294967295
 8004ed4:	4638      	mov	r0, r7
 8004ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ed8:	6823      	ldr	r3, [r4, #0]
 8004eda:	6922      	ldr	r2, [r4, #16]
 8004edc:	1a98      	subs	r0, r3, r2
 8004ede:	6963      	ldr	r3, [r4, #20]
 8004ee0:	b2f6      	uxtb	r6, r6
 8004ee2:	4283      	cmp	r3, r0
 8004ee4:	4637      	mov	r7, r6
 8004ee6:	dc05      	bgt.n	8004ef4 <__swbuf_r+0x4e>
 8004ee8:	4621      	mov	r1, r4
 8004eea:	4628      	mov	r0, r5
 8004eec:	f000 fa68 	bl	80053c0 <_fflush_r>
 8004ef0:	2800      	cmp	r0, #0
 8004ef2:	d1ed      	bne.n	8004ed0 <__swbuf_r+0x2a>
 8004ef4:	68a3      	ldr	r3, [r4, #8]
 8004ef6:	3b01      	subs	r3, #1
 8004ef8:	60a3      	str	r3, [r4, #8]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	1c5a      	adds	r2, r3, #1
 8004efe:	6022      	str	r2, [r4, #0]
 8004f00:	701e      	strb	r6, [r3, #0]
 8004f02:	6962      	ldr	r2, [r4, #20]
 8004f04:	1c43      	adds	r3, r0, #1
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d004      	beq.n	8004f14 <__swbuf_r+0x6e>
 8004f0a:	89a3      	ldrh	r3, [r4, #12]
 8004f0c:	07db      	lsls	r3, r3, #31
 8004f0e:	d5e1      	bpl.n	8004ed4 <__swbuf_r+0x2e>
 8004f10:	2e0a      	cmp	r6, #10
 8004f12:	d1df      	bne.n	8004ed4 <__swbuf_r+0x2e>
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 fa52 	bl	80053c0 <_fflush_r>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d0d9      	beq.n	8004ed4 <__swbuf_r+0x2e>
 8004f20:	e7d6      	b.n	8004ed0 <__swbuf_r+0x2a>
	...

08004f24 <__swsetup_r>:
 8004f24:	b538      	push	{r3, r4, r5, lr}
 8004f26:	4b29      	ldr	r3, [pc, #164]	@ (8004fcc <__swsetup_r+0xa8>)
 8004f28:	4605      	mov	r5, r0
 8004f2a:	6818      	ldr	r0, [r3, #0]
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	b118      	cbz	r0, 8004f38 <__swsetup_r+0x14>
 8004f30:	6a03      	ldr	r3, [r0, #32]
 8004f32:	b90b      	cbnz	r3, 8004f38 <__swsetup_r+0x14>
 8004f34:	f7ff fee0 	bl	8004cf8 <__sinit>
 8004f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f3c:	0719      	lsls	r1, r3, #28
 8004f3e:	d422      	bmi.n	8004f86 <__swsetup_r+0x62>
 8004f40:	06da      	lsls	r2, r3, #27
 8004f42:	d407      	bmi.n	8004f54 <__swsetup_r+0x30>
 8004f44:	2209      	movs	r2, #9
 8004f46:	602a      	str	r2, [r5, #0]
 8004f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f4c:	81a3      	strh	r3, [r4, #12]
 8004f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f52:	e033      	b.n	8004fbc <__swsetup_r+0x98>
 8004f54:	0758      	lsls	r0, r3, #29
 8004f56:	d512      	bpl.n	8004f7e <__swsetup_r+0x5a>
 8004f58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f5a:	b141      	cbz	r1, 8004f6e <__swsetup_r+0x4a>
 8004f5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f60:	4299      	cmp	r1, r3
 8004f62:	d002      	beq.n	8004f6a <__swsetup_r+0x46>
 8004f64:	4628      	mov	r0, r5
 8004f66:	f000 f8af 	bl	80050c8 <_free_r>
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f6e:	89a3      	ldrh	r3, [r4, #12]
 8004f70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004f74:	81a3      	strh	r3, [r4, #12]
 8004f76:	2300      	movs	r3, #0
 8004f78:	6063      	str	r3, [r4, #4]
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	89a3      	ldrh	r3, [r4, #12]
 8004f80:	f043 0308 	orr.w	r3, r3, #8
 8004f84:	81a3      	strh	r3, [r4, #12]
 8004f86:	6923      	ldr	r3, [r4, #16]
 8004f88:	b94b      	cbnz	r3, 8004f9e <__swsetup_r+0x7a>
 8004f8a:	89a3      	ldrh	r3, [r4, #12]
 8004f8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f94:	d003      	beq.n	8004f9e <__swsetup_r+0x7a>
 8004f96:	4621      	mov	r1, r4
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 fa5f 	bl	800545c <__smakebuf_r>
 8004f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fa2:	f013 0201 	ands.w	r2, r3, #1
 8004fa6:	d00a      	beq.n	8004fbe <__swsetup_r+0x9a>
 8004fa8:	2200      	movs	r2, #0
 8004faa:	60a2      	str	r2, [r4, #8]
 8004fac:	6962      	ldr	r2, [r4, #20]
 8004fae:	4252      	negs	r2, r2
 8004fb0:	61a2      	str	r2, [r4, #24]
 8004fb2:	6922      	ldr	r2, [r4, #16]
 8004fb4:	b942      	cbnz	r2, 8004fc8 <__swsetup_r+0xa4>
 8004fb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004fba:	d1c5      	bne.n	8004f48 <__swsetup_r+0x24>
 8004fbc:	bd38      	pop	{r3, r4, r5, pc}
 8004fbe:	0799      	lsls	r1, r3, #30
 8004fc0:	bf58      	it	pl
 8004fc2:	6962      	ldrpl	r2, [r4, #20]
 8004fc4:	60a2      	str	r2, [r4, #8]
 8004fc6:	e7f4      	b.n	8004fb2 <__swsetup_r+0x8e>
 8004fc8:	2000      	movs	r0, #0
 8004fca:	e7f7      	b.n	8004fbc <__swsetup_r+0x98>
 8004fcc:	20000040 	.word	0x20000040

08004fd0 <memset>:
 8004fd0:	4402      	add	r2, r0
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d100      	bne.n	8004fda <memset+0xa>
 8004fd8:	4770      	bx	lr
 8004fda:	f803 1b01 	strb.w	r1, [r3], #1
 8004fde:	e7f9      	b.n	8004fd4 <memset+0x4>

08004fe0 <_close_r>:
 8004fe0:	b538      	push	{r3, r4, r5, lr}
 8004fe2:	4d06      	ldr	r5, [pc, #24]	@ (8004ffc <_close_r+0x1c>)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	4608      	mov	r0, r1
 8004fea:	602b      	str	r3, [r5, #0]
 8004fec:	f7fc f8c1 	bl	8001172 <_close>
 8004ff0:	1c43      	adds	r3, r0, #1
 8004ff2:	d102      	bne.n	8004ffa <_close_r+0x1a>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b103      	cbz	r3, 8004ffa <_close_r+0x1a>
 8004ff8:	6023      	str	r3, [r4, #0]
 8004ffa:	bd38      	pop	{r3, r4, r5, pc}
 8004ffc:	20000480 	.word	0x20000480

08005000 <_lseek_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	4d07      	ldr	r5, [pc, #28]	@ (8005020 <_lseek_r+0x20>)
 8005004:	4604      	mov	r4, r0
 8005006:	4608      	mov	r0, r1
 8005008:	4611      	mov	r1, r2
 800500a:	2200      	movs	r2, #0
 800500c:	602a      	str	r2, [r5, #0]
 800500e:	461a      	mov	r2, r3
 8005010:	f7fc f8d6 	bl	80011c0 <_lseek>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d102      	bne.n	800501e <_lseek_r+0x1e>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	b103      	cbz	r3, 800501e <_lseek_r+0x1e>
 800501c:	6023      	str	r3, [r4, #0]
 800501e:	bd38      	pop	{r3, r4, r5, pc}
 8005020:	20000480 	.word	0x20000480

08005024 <_read_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	4d07      	ldr	r5, [pc, #28]	@ (8005044 <_read_r+0x20>)
 8005028:	4604      	mov	r4, r0
 800502a:	4608      	mov	r0, r1
 800502c:	4611      	mov	r1, r2
 800502e:	2200      	movs	r2, #0
 8005030:	602a      	str	r2, [r5, #0]
 8005032:	461a      	mov	r2, r3
 8005034:	f7fc f880 	bl	8001138 <_read>
 8005038:	1c43      	adds	r3, r0, #1
 800503a:	d102      	bne.n	8005042 <_read_r+0x1e>
 800503c:	682b      	ldr	r3, [r5, #0]
 800503e:	b103      	cbz	r3, 8005042 <_read_r+0x1e>
 8005040:	6023      	str	r3, [r4, #0]
 8005042:	bd38      	pop	{r3, r4, r5, pc}
 8005044:	20000480 	.word	0x20000480

08005048 <_write_r>:
 8005048:	b538      	push	{r3, r4, r5, lr}
 800504a:	4d07      	ldr	r5, [pc, #28]	@ (8005068 <_write_r+0x20>)
 800504c:	4604      	mov	r4, r0
 800504e:	4608      	mov	r0, r1
 8005050:	4611      	mov	r1, r2
 8005052:	2200      	movs	r2, #0
 8005054:	602a      	str	r2, [r5, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	f7fb fd40 	bl	8000adc <_write>
 800505c:	1c43      	adds	r3, r0, #1
 800505e:	d102      	bne.n	8005066 <_write_r+0x1e>
 8005060:	682b      	ldr	r3, [r5, #0]
 8005062:	b103      	cbz	r3, 8005066 <_write_r+0x1e>
 8005064:	6023      	str	r3, [r4, #0]
 8005066:	bd38      	pop	{r3, r4, r5, pc}
 8005068:	20000480 	.word	0x20000480

0800506c <__errno>:
 800506c:	4b01      	ldr	r3, [pc, #4]	@ (8005074 <__errno+0x8>)
 800506e:	6818      	ldr	r0, [r3, #0]
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000040 	.word	0x20000040

08005078 <__libc_init_array>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	4d0d      	ldr	r5, [pc, #52]	@ (80050b0 <__libc_init_array+0x38>)
 800507c:	4c0d      	ldr	r4, [pc, #52]	@ (80050b4 <__libc_init_array+0x3c>)
 800507e:	1b64      	subs	r4, r4, r5
 8005080:	10a4      	asrs	r4, r4, #2
 8005082:	2600      	movs	r6, #0
 8005084:	42a6      	cmp	r6, r4
 8005086:	d109      	bne.n	800509c <__libc_init_array+0x24>
 8005088:	4d0b      	ldr	r5, [pc, #44]	@ (80050b8 <__libc_init_array+0x40>)
 800508a:	4c0c      	ldr	r4, [pc, #48]	@ (80050bc <__libc_init_array+0x44>)
 800508c:	f000 fa54 	bl	8005538 <_init>
 8005090:	1b64      	subs	r4, r4, r5
 8005092:	10a4      	asrs	r4, r4, #2
 8005094:	2600      	movs	r6, #0
 8005096:	42a6      	cmp	r6, r4
 8005098:	d105      	bne.n	80050a6 <__libc_init_array+0x2e>
 800509a:	bd70      	pop	{r4, r5, r6, pc}
 800509c:	f855 3b04 	ldr.w	r3, [r5], #4
 80050a0:	4798      	blx	r3
 80050a2:	3601      	adds	r6, #1
 80050a4:	e7ee      	b.n	8005084 <__libc_init_array+0xc>
 80050a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80050aa:	4798      	blx	r3
 80050ac:	3601      	adds	r6, #1
 80050ae:	e7f2      	b.n	8005096 <__libc_init_array+0x1e>
 80050b0:	080055dc 	.word	0x080055dc
 80050b4:	080055dc 	.word	0x080055dc
 80050b8:	080055dc 	.word	0x080055dc
 80050bc:	080055e0 	.word	0x080055e0

080050c0 <__retarget_lock_init_recursive>:
 80050c0:	4770      	bx	lr

080050c2 <__retarget_lock_acquire_recursive>:
 80050c2:	4770      	bx	lr

080050c4 <__retarget_lock_release_recursive>:
 80050c4:	4770      	bx	lr
	...

080050c8 <_free_r>:
 80050c8:	b538      	push	{r3, r4, r5, lr}
 80050ca:	4605      	mov	r5, r0
 80050cc:	2900      	cmp	r1, #0
 80050ce:	d041      	beq.n	8005154 <_free_r+0x8c>
 80050d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050d4:	1f0c      	subs	r4, r1, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bfb8      	it	lt
 80050da:	18e4      	addlt	r4, r4, r3
 80050dc:	f000 f8e0 	bl	80052a0 <__malloc_lock>
 80050e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005158 <_free_r+0x90>)
 80050e2:	6813      	ldr	r3, [r2, #0]
 80050e4:	b933      	cbnz	r3, 80050f4 <_free_r+0x2c>
 80050e6:	6063      	str	r3, [r4, #4]
 80050e8:	6014      	str	r4, [r2, #0]
 80050ea:	4628      	mov	r0, r5
 80050ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050f0:	f000 b8dc 	b.w	80052ac <__malloc_unlock>
 80050f4:	42a3      	cmp	r3, r4
 80050f6:	d908      	bls.n	800510a <_free_r+0x42>
 80050f8:	6820      	ldr	r0, [r4, #0]
 80050fa:	1821      	adds	r1, r4, r0
 80050fc:	428b      	cmp	r3, r1
 80050fe:	bf01      	itttt	eq
 8005100:	6819      	ldreq	r1, [r3, #0]
 8005102:	685b      	ldreq	r3, [r3, #4]
 8005104:	1809      	addeq	r1, r1, r0
 8005106:	6021      	streq	r1, [r4, #0]
 8005108:	e7ed      	b.n	80050e6 <_free_r+0x1e>
 800510a:	461a      	mov	r2, r3
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	b10b      	cbz	r3, 8005114 <_free_r+0x4c>
 8005110:	42a3      	cmp	r3, r4
 8005112:	d9fa      	bls.n	800510a <_free_r+0x42>
 8005114:	6811      	ldr	r1, [r2, #0]
 8005116:	1850      	adds	r0, r2, r1
 8005118:	42a0      	cmp	r0, r4
 800511a:	d10b      	bne.n	8005134 <_free_r+0x6c>
 800511c:	6820      	ldr	r0, [r4, #0]
 800511e:	4401      	add	r1, r0
 8005120:	1850      	adds	r0, r2, r1
 8005122:	4283      	cmp	r3, r0
 8005124:	6011      	str	r1, [r2, #0]
 8005126:	d1e0      	bne.n	80050ea <_free_r+0x22>
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	6053      	str	r3, [r2, #4]
 800512e:	4408      	add	r0, r1
 8005130:	6010      	str	r0, [r2, #0]
 8005132:	e7da      	b.n	80050ea <_free_r+0x22>
 8005134:	d902      	bls.n	800513c <_free_r+0x74>
 8005136:	230c      	movs	r3, #12
 8005138:	602b      	str	r3, [r5, #0]
 800513a:	e7d6      	b.n	80050ea <_free_r+0x22>
 800513c:	6820      	ldr	r0, [r4, #0]
 800513e:	1821      	adds	r1, r4, r0
 8005140:	428b      	cmp	r3, r1
 8005142:	bf04      	itt	eq
 8005144:	6819      	ldreq	r1, [r3, #0]
 8005146:	685b      	ldreq	r3, [r3, #4]
 8005148:	6063      	str	r3, [r4, #4]
 800514a:	bf04      	itt	eq
 800514c:	1809      	addeq	r1, r1, r0
 800514e:	6021      	streq	r1, [r4, #0]
 8005150:	6054      	str	r4, [r2, #4]
 8005152:	e7ca      	b.n	80050ea <_free_r+0x22>
 8005154:	bd38      	pop	{r3, r4, r5, pc}
 8005156:	bf00      	nop
 8005158:	2000048c 	.word	0x2000048c

0800515c <sbrk_aligned>:
 800515c:	b570      	push	{r4, r5, r6, lr}
 800515e:	4e0f      	ldr	r6, [pc, #60]	@ (800519c <sbrk_aligned+0x40>)
 8005160:	460c      	mov	r4, r1
 8005162:	6831      	ldr	r1, [r6, #0]
 8005164:	4605      	mov	r5, r0
 8005166:	b911      	cbnz	r1, 800516e <sbrk_aligned+0x12>
 8005168:	f000 f9d6 	bl	8005518 <_sbrk_r>
 800516c:	6030      	str	r0, [r6, #0]
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f000 f9d1 	bl	8005518 <_sbrk_r>
 8005176:	1c43      	adds	r3, r0, #1
 8005178:	d103      	bne.n	8005182 <sbrk_aligned+0x26>
 800517a:	f04f 34ff 	mov.w	r4, #4294967295
 800517e:	4620      	mov	r0, r4
 8005180:	bd70      	pop	{r4, r5, r6, pc}
 8005182:	1cc4      	adds	r4, r0, #3
 8005184:	f024 0403 	bic.w	r4, r4, #3
 8005188:	42a0      	cmp	r0, r4
 800518a:	d0f8      	beq.n	800517e <sbrk_aligned+0x22>
 800518c:	1a21      	subs	r1, r4, r0
 800518e:	4628      	mov	r0, r5
 8005190:	f000 f9c2 	bl	8005518 <_sbrk_r>
 8005194:	3001      	adds	r0, #1
 8005196:	d1f2      	bne.n	800517e <sbrk_aligned+0x22>
 8005198:	e7ef      	b.n	800517a <sbrk_aligned+0x1e>
 800519a:	bf00      	nop
 800519c:	20000488 	.word	0x20000488

080051a0 <_malloc_r>:
 80051a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051a4:	1ccd      	adds	r5, r1, #3
 80051a6:	f025 0503 	bic.w	r5, r5, #3
 80051aa:	3508      	adds	r5, #8
 80051ac:	2d0c      	cmp	r5, #12
 80051ae:	bf38      	it	cc
 80051b0:	250c      	movcc	r5, #12
 80051b2:	2d00      	cmp	r5, #0
 80051b4:	4606      	mov	r6, r0
 80051b6:	db01      	blt.n	80051bc <_malloc_r+0x1c>
 80051b8:	42a9      	cmp	r1, r5
 80051ba:	d904      	bls.n	80051c6 <_malloc_r+0x26>
 80051bc:	230c      	movs	r3, #12
 80051be:	6033      	str	r3, [r6, #0]
 80051c0:	2000      	movs	r0, #0
 80051c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800529c <_malloc_r+0xfc>
 80051ca:	f000 f869 	bl	80052a0 <__malloc_lock>
 80051ce:	f8d8 3000 	ldr.w	r3, [r8]
 80051d2:	461c      	mov	r4, r3
 80051d4:	bb44      	cbnz	r4, 8005228 <_malloc_r+0x88>
 80051d6:	4629      	mov	r1, r5
 80051d8:	4630      	mov	r0, r6
 80051da:	f7ff ffbf 	bl	800515c <sbrk_aligned>
 80051de:	1c43      	adds	r3, r0, #1
 80051e0:	4604      	mov	r4, r0
 80051e2:	d158      	bne.n	8005296 <_malloc_r+0xf6>
 80051e4:	f8d8 4000 	ldr.w	r4, [r8]
 80051e8:	4627      	mov	r7, r4
 80051ea:	2f00      	cmp	r7, #0
 80051ec:	d143      	bne.n	8005276 <_malloc_r+0xd6>
 80051ee:	2c00      	cmp	r4, #0
 80051f0:	d04b      	beq.n	800528a <_malloc_r+0xea>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	4639      	mov	r1, r7
 80051f6:	4630      	mov	r0, r6
 80051f8:	eb04 0903 	add.w	r9, r4, r3
 80051fc:	f000 f98c 	bl	8005518 <_sbrk_r>
 8005200:	4581      	cmp	r9, r0
 8005202:	d142      	bne.n	800528a <_malloc_r+0xea>
 8005204:	6821      	ldr	r1, [r4, #0]
 8005206:	1a6d      	subs	r5, r5, r1
 8005208:	4629      	mov	r1, r5
 800520a:	4630      	mov	r0, r6
 800520c:	f7ff ffa6 	bl	800515c <sbrk_aligned>
 8005210:	3001      	adds	r0, #1
 8005212:	d03a      	beq.n	800528a <_malloc_r+0xea>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	442b      	add	r3, r5
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	f8d8 3000 	ldr.w	r3, [r8]
 800521e:	685a      	ldr	r2, [r3, #4]
 8005220:	bb62      	cbnz	r2, 800527c <_malloc_r+0xdc>
 8005222:	f8c8 7000 	str.w	r7, [r8]
 8005226:	e00f      	b.n	8005248 <_malloc_r+0xa8>
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	1b52      	subs	r2, r2, r5
 800522c:	d420      	bmi.n	8005270 <_malloc_r+0xd0>
 800522e:	2a0b      	cmp	r2, #11
 8005230:	d917      	bls.n	8005262 <_malloc_r+0xc2>
 8005232:	1961      	adds	r1, r4, r5
 8005234:	42a3      	cmp	r3, r4
 8005236:	6025      	str	r5, [r4, #0]
 8005238:	bf18      	it	ne
 800523a:	6059      	strne	r1, [r3, #4]
 800523c:	6863      	ldr	r3, [r4, #4]
 800523e:	bf08      	it	eq
 8005240:	f8c8 1000 	streq.w	r1, [r8]
 8005244:	5162      	str	r2, [r4, r5]
 8005246:	604b      	str	r3, [r1, #4]
 8005248:	4630      	mov	r0, r6
 800524a:	f000 f82f 	bl	80052ac <__malloc_unlock>
 800524e:	f104 000b 	add.w	r0, r4, #11
 8005252:	1d23      	adds	r3, r4, #4
 8005254:	f020 0007 	bic.w	r0, r0, #7
 8005258:	1ac2      	subs	r2, r0, r3
 800525a:	bf1c      	itt	ne
 800525c:	1a1b      	subne	r3, r3, r0
 800525e:	50a3      	strne	r3, [r4, r2]
 8005260:	e7af      	b.n	80051c2 <_malloc_r+0x22>
 8005262:	6862      	ldr	r2, [r4, #4]
 8005264:	42a3      	cmp	r3, r4
 8005266:	bf0c      	ite	eq
 8005268:	f8c8 2000 	streq.w	r2, [r8]
 800526c:	605a      	strne	r2, [r3, #4]
 800526e:	e7eb      	b.n	8005248 <_malloc_r+0xa8>
 8005270:	4623      	mov	r3, r4
 8005272:	6864      	ldr	r4, [r4, #4]
 8005274:	e7ae      	b.n	80051d4 <_malloc_r+0x34>
 8005276:	463c      	mov	r4, r7
 8005278:	687f      	ldr	r7, [r7, #4]
 800527a:	e7b6      	b.n	80051ea <_malloc_r+0x4a>
 800527c:	461a      	mov	r2, r3
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	42a3      	cmp	r3, r4
 8005282:	d1fb      	bne.n	800527c <_malloc_r+0xdc>
 8005284:	2300      	movs	r3, #0
 8005286:	6053      	str	r3, [r2, #4]
 8005288:	e7de      	b.n	8005248 <_malloc_r+0xa8>
 800528a:	230c      	movs	r3, #12
 800528c:	6033      	str	r3, [r6, #0]
 800528e:	4630      	mov	r0, r6
 8005290:	f000 f80c 	bl	80052ac <__malloc_unlock>
 8005294:	e794      	b.n	80051c0 <_malloc_r+0x20>
 8005296:	6005      	str	r5, [r0, #0]
 8005298:	e7d6      	b.n	8005248 <_malloc_r+0xa8>
 800529a:	bf00      	nop
 800529c:	2000048c 	.word	0x2000048c

080052a0 <__malloc_lock>:
 80052a0:	4801      	ldr	r0, [pc, #4]	@ (80052a8 <__malloc_lock+0x8>)
 80052a2:	f7ff bf0e 	b.w	80050c2 <__retarget_lock_acquire_recursive>
 80052a6:	bf00      	nop
 80052a8:	20000484 	.word	0x20000484

080052ac <__malloc_unlock>:
 80052ac:	4801      	ldr	r0, [pc, #4]	@ (80052b4 <__malloc_unlock+0x8>)
 80052ae:	f7ff bf09 	b.w	80050c4 <__retarget_lock_release_recursive>
 80052b2:	bf00      	nop
 80052b4:	20000484 	.word	0x20000484

080052b8 <__sflush_r>:
 80052b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052c0:	0716      	lsls	r6, r2, #28
 80052c2:	4605      	mov	r5, r0
 80052c4:	460c      	mov	r4, r1
 80052c6:	d454      	bmi.n	8005372 <__sflush_r+0xba>
 80052c8:	684b      	ldr	r3, [r1, #4]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	dc02      	bgt.n	80052d4 <__sflush_r+0x1c>
 80052ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	dd48      	ble.n	8005366 <__sflush_r+0xae>
 80052d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052d6:	2e00      	cmp	r6, #0
 80052d8:	d045      	beq.n	8005366 <__sflush_r+0xae>
 80052da:	2300      	movs	r3, #0
 80052dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80052e0:	682f      	ldr	r7, [r5, #0]
 80052e2:	6a21      	ldr	r1, [r4, #32]
 80052e4:	602b      	str	r3, [r5, #0]
 80052e6:	d030      	beq.n	800534a <__sflush_r+0x92>
 80052e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80052ea:	89a3      	ldrh	r3, [r4, #12]
 80052ec:	0759      	lsls	r1, r3, #29
 80052ee:	d505      	bpl.n	80052fc <__sflush_r+0x44>
 80052f0:	6863      	ldr	r3, [r4, #4]
 80052f2:	1ad2      	subs	r2, r2, r3
 80052f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80052f6:	b10b      	cbz	r3, 80052fc <__sflush_r+0x44>
 80052f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80052fa:	1ad2      	subs	r2, r2, r3
 80052fc:	2300      	movs	r3, #0
 80052fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005300:	6a21      	ldr	r1, [r4, #32]
 8005302:	4628      	mov	r0, r5
 8005304:	47b0      	blx	r6
 8005306:	1c43      	adds	r3, r0, #1
 8005308:	89a3      	ldrh	r3, [r4, #12]
 800530a:	d106      	bne.n	800531a <__sflush_r+0x62>
 800530c:	6829      	ldr	r1, [r5, #0]
 800530e:	291d      	cmp	r1, #29
 8005310:	d82b      	bhi.n	800536a <__sflush_r+0xb2>
 8005312:	4a2a      	ldr	r2, [pc, #168]	@ (80053bc <__sflush_r+0x104>)
 8005314:	410a      	asrs	r2, r1
 8005316:	07d6      	lsls	r6, r2, #31
 8005318:	d427      	bmi.n	800536a <__sflush_r+0xb2>
 800531a:	2200      	movs	r2, #0
 800531c:	6062      	str	r2, [r4, #4]
 800531e:	04d9      	lsls	r1, r3, #19
 8005320:	6922      	ldr	r2, [r4, #16]
 8005322:	6022      	str	r2, [r4, #0]
 8005324:	d504      	bpl.n	8005330 <__sflush_r+0x78>
 8005326:	1c42      	adds	r2, r0, #1
 8005328:	d101      	bne.n	800532e <__sflush_r+0x76>
 800532a:	682b      	ldr	r3, [r5, #0]
 800532c:	b903      	cbnz	r3, 8005330 <__sflush_r+0x78>
 800532e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005332:	602f      	str	r7, [r5, #0]
 8005334:	b1b9      	cbz	r1, 8005366 <__sflush_r+0xae>
 8005336:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800533a:	4299      	cmp	r1, r3
 800533c:	d002      	beq.n	8005344 <__sflush_r+0x8c>
 800533e:	4628      	mov	r0, r5
 8005340:	f7ff fec2 	bl	80050c8 <_free_r>
 8005344:	2300      	movs	r3, #0
 8005346:	6363      	str	r3, [r4, #52]	@ 0x34
 8005348:	e00d      	b.n	8005366 <__sflush_r+0xae>
 800534a:	2301      	movs	r3, #1
 800534c:	4628      	mov	r0, r5
 800534e:	47b0      	blx	r6
 8005350:	4602      	mov	r2, r0
 8005352:	1c50      	adds	r0, r2, #1
 8005354:	d1c9      	bne.n	80052ea <__sflush_r+0x32>
 8005356:	682b      	ldr	r3, [r5, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0c6      	beq.n	80052ea <__sflush_r+0x32>
 800535c:	2b1d      	cmp	r3, #29
 800535e:	d001      	beq.n	8005364 <__sflush_r+0xac>
 8005360:	2b16      	cmp	r3, #22
 8005362:	d11e      	bne.n	80053a2 <__sflush_r+0xea>
 8005364:	602f      	str	r7, [r5, #0]
 8005366:	2000      	movs	r0, #0
 8005368:	e022      	b.n	80053b0 <__sflush_r+0xf8>
 800536a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800536e:	b21b      	sxth	r3, r3
 8005370:	e01b      	b.n	80053aa <__sflush_r+0xf2>
 8005372:	690f      	ldr	r7, [r1, #16]
 8005374:	2f00      	cmp	r7, #0
 8005376:	d0f6      	beq.n	8005366 <__sflush_r+0xae>
 8005378:	0793      	lsls	r3, r2, #30
 800537a:	680e      	ldr	r6, [r1, #0]
 800537c:	bf08      	it	eq
 800537e:	694b      	ldreq	r3, [r1, #20]
 8005380:	600f      	str	r7, [r1, #0]
 8005382:	bf18      	it	ne
 8005384:	2300      	movne	r3, #0
 8005386:	eba6 0807 	sub.w	r8, r6, r7
 800538a:	608b      	str	r3, [r1, #8]
 800538c:	f1b8 0f00 	cmp.w	r8, #0
 8005390:	dde9      	ble.n	8005366 <__sflush_r+0xae>
 8005392:	6a21      	ldr	r1, [r4, #32]
 8005394:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005396:	4643      	mov	r3, r8
 8005398:	463a      	mov	r2, r7
 800539a:	4628      	mov	r0, r5
 800539c:	47b0      	blx	r6
 800539e:	2800      	cmp	r0, #0
 80053a0:	dc08      	bgt.n	80053b4 <__sflush_r+0xfc>
 80053a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053aa:	81a3      	strh	r3, [r4, #12]
 80053ac:	f04f 30ff 	mov.w	r0, #4294967295
 80053b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b4:	4407      	add	r7, r0
 80053b6:	eba8 0800 	sub.w	r8, r8, r0
 80053ba:	e7e7      	b.n	800538c <__sflush_r+0xd4>
 80053bc:	dfbffffe 	.word	0xdfbffffe

080053c0 <_fflush_r>:
 80053c0:	b538      	push	{r3, r4, r5, lr}
 80053c2:	690b      	ldr	r3, [r1, #16]
 80053c4:	4605      	mov	r5, r0
 80053c6:	460c      	mov	r4, r1
 80053c8:	b913      	cbnz	r3, 80053d0 <_fflush_r+0x10>
 80053ca:	2500      	movs	r5, #0
 80053cc:	4628      	mov	r0, r5
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	b118      	cbz	r0, 80053da <_fflush_r+0x1a>
 80053d2:	6a03      	ldr	r3, [r0, #32]
 80053d4:	b90b      	cbnz	r3, 80053da <_fflush_r+0x1a>
 80053d6:	f7ff fc8f 	bl	8004cf8 <__sinit>
 80053da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0f3      	beq.n	80053ca <_fflush_r+0xa>
 80053e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80053e4:	07d0      	lsls	r0, r2, #31
 80053e6:	d404      	bmi.n	80053f2 <_fflush_r+0x32>
 80053e8:	0599      	lsls	r1, r3, #22
 80053ea:	d402      	bmi.n	80053f2 <_fflush_r+0x32>
 80053ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80053ee:	f7ff fe68 	bl	80050c2 <__retarget_lock_acquire_recursive>
 80053f2:	4628      	mov	r0, r5
 80053f4:	4621      	mov	r1, r4
 80053f6:	f7ff ff5f 	bl	80052b8 <__sflush_r>
 80053fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80053fc:	07da      	lsls	r2, r3, #31
 80053fe:	4605      	mov	r5, r0
 8005400:	d4e4      	bmi.n	80053cc <_fflush_r+0xc>
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	059b      	lsls	r3, r3, #22
 8005406:	d4e1      	bmi.n	80053cc <_fflush_r+0xc>
 8005408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800540a:	f7ff fe5b 	bl	80050c4 <__retarget_lock_release_recursive>
 800540e:	e7dd      	b.n	80053cc <_fflush_r+0xc>

08005410 <__swhatbuf_r>:
 8005410:	b570      	push	{r4, r5, r6, lr}
 8005412:	460c      	mov	r4, r1
 8005414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005418:	2900      	cmp	r1, #0
 800541a:	b096      	sub	sp, #88	@ 0x58
 800541c:	4615      	mov	r5, r2
 800541e:	461e      	mov	r6, r3
 8005420:	da0d      	bge.n	800543e <__swhatbuf_r+0x2e>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005428:	f04f 0100 	mov.w	r1, #0
 800542c:	bf14      	ite	ne
 800542e:	2340      	movne	r3, #64	@ 0x40
 8005430:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005434:	2000      	movs	r0, #0
 8005436:	6031      	str	r1, [r6, #0]
 8005438:	602b      	str	r3, [r5, #0]
 800543a:	b016      	add	sp, #88	@ 0x58
 800543c:	bd70      	pop	{r4, r5, r6, pc}
 800543e:	466a      	mov	r2, sp
 8005440:	f000 f848 	bl	80054d4 <_fstat_r>
 8005444:	2800      	cmp	r0, #0
 8005446:	dbec      	blt.n	8005422 <__swhatbuf_r+0x12>
 8005448:	9901      	ldr	r1, [sp, #4]
 800544a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800544e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005452:	4259      	negs	r1, r3
 8005454:	4159      	adcs	r1, r3
 8005456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800545a:	e7eb      	b.n	8005434 <__swhatbuf_r+0x24>

0800545c <__smakebuf_r>:
 800545c:	898b      	ldrh	r3, [r1, #12]
 800545e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005460:	079d      	lsls	r5, r3, #30
 8005462:	4606      	mov	r6, r0
 8005464:	460c      	mov	r4, r1
 8005466:	d507      	bpl.n	8005478 <__smakebuf_r+0x1c>
 8005468:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800546c:	6023      	str	r3, [r4, #0]
 800546e:	6123      	str	r3, [r4, #16]
 8005470:	2301      	movs	r3, #1
 8005472:	6163      	str	r3, [r4, #20]
 8005474:	b003      	add	sp, #12
 8005476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005478:	ab01      	add	r3, sp, #4
 800547a:	466a      	mov	r2, sp
 800547c:	f7ff ffc8 	bl	8005410 <__swhatbuf_r>
 8005480:	9f00      	ldr	r7, [sp, #0]
 8005482:	4605      	mov	r5, r0
 8005484:	4639      	mov	r1, r7
 8005486:	4630      	mov	r0, r6
 8005488:	f7ff fe8a 	bl	80051a0 <_malloc_r>
 800548c:	b948      	cbnz	r0, 80054a2 <__smakebuf_r+0x46>
 800548e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005492:	059a      	lsls	r2, r3, #22
 8005494:	d4ee      	bmi.n	8005474 <__smakebuf_r+0x18>
 8005496:	f023 0303 	bic.w	r3, r3, #3
 800549a:	f043 0302 	orr.w	r3, r3, #2
 800549e:	81a3      	strh	r3, [r4, #12]
 80054a0:	e7e2      	b.n	8005468 <__smakebuf_r+0xc>
 80054a2:	89a3      	ldrh	r3, [r4, #12]
 80054a4:	6020      	str	r0, [r4, #0]
 80054a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054aa:	81a3      	strh	r3, [r4, #12]
 80054ac:	9b01      	ldr	r3, [sp, #4]
 80054ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80054b2:	b15b      	cbz	r3, 80054cc <__smakebuf_r+0x70>
 80054b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054b8:	4630      	mov	r0, r6
 80054ba:	f000 f81d 	bl	80054f8 <_isatty_r>
 80054be:	b128      	cbz	r0, 80054cc <__smakebuf_r+0x70>
 80054c0:	89a3      	ldrh	r3, [r4, #12]
 80054c2:	f023 0303 	bic.w	r3, r3, #3
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	81a3      	strh	r3, [r4, #12]
 80054cc:	89a3      	ldrh	r3, [r4, #12]
 80054ce:	431d      	orrs	r5, r3
 80054d0:	81a5      	strh	r5, [r4, #12]
 80054d2:	e7cf      	b.n	8005474 <__smakebuf_r+0x18>

080054d4 <_fstat_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d07      	ldr	r5, [pc, #28]	@ (80054f4 <_fstat_r+0x20>)
 80054d8:	2300      	movs	r3, #0
 80054da:	4604      	mov	r4, r0
 80054dc:	4608      	mov	r0, r1
 80054de:	4611      	mov	r1, r2
 80054e0:	602b      	str	r3, [r5, #0]
 80054e2:	f7fb fe52 	bl	800118a <_fstat>
 80054e6:	1c43      	adds	r3, r0, #1
 80054e8:	d102      	bne.n	80054f0 <_fstat_r+0x1c>
 80054ea:	682b      	ldr	r3, [r5, #0]
 80054ec:	b103      	cbz	r3, 80054f0 <_fstat_r+0x1c>
 80054ee:	6023      	str	r3, [r4, #0]
 80054f0:	bd38      	pop	{r3, r4, r5, pc}
 80054f2:	bf00      	nop
 80054f4:	20000480 	.word	0x20000480

080054f8 <_isatty_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d06      	ldr	r5, [pc, #24]	@ (8005514 <_isatty_r+0x1c>)
 80054fc:	2300      	movs	r3, #0
 80054fe:	4604      	mov	r4, r0
 8005500:	4608      	mov	r0, r1
 8005502:	602b      	str	r3, [r5, #0]
 8005504:	f7fb fe51 	bl	80011aa <_isatty>
 8005508:	1c43      	adds	r3, r0, #1
 800550a:	d102      	bne.n	8005512 <_isatty_r+0x1a>
 800550c:	682b      	ldr	r3, [r5, #0]
 800550e:	b103      	cbz	r3, 8005512 <_isatty_r+0x1a>
 8005510:	6023      	str	r3, [r4, #0]
 8005512:	bd38      	pop	{r3, r4, r5, pc}
 8005514:	20000480 	.word	0x20000480

08005518 <_sbrk_r>:
 8005518:	b538      	push	{r3, r4, r5, lr}
 800551a:	4d06      	ldr	r5, [pc, #24]	@ (8005534 <_sbrk_r+0x1c>)
 800551c:	2300      	movs	r3, #0
 800551e:	4604      	mov	r4, r0
 8005520:	4608      	mov	r0, r1
 8005522:	602b      	str	r3, [r5, #0]
 8005524:	f7fb fe5a 	bl	80011dc <_sbrk>
 8005528:	1c43      	adds	r3, r0, #1
 800552a:	d102      	bne.n	8005532 <_sbrk_r+0x1a>
 800552c:	682b      	ldr	r3, [r5, #0]
 800552e:	b103      	cbz	r3, 8005532 <_sbrk_r+0x1a>
 8005530:	6023      	str	r3, [r4, #0]
 8005532:	bd38      	pop	{r3, r4, r5, pc}
 8005534:	20000480 	.word	0x20000480

08005538 <_init>:
 8005538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800553a:	bf00      	nop
 800553c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800553e:	bc08      	pop	{r3}
 8005540:	469e      	mov	lr, r3
 8005542:	4770      	bx	lr

08005544 <_fini>:
 8005544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005546:	bf00      	nop
 8005548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554a:	bc08      	pop	{r3}
 800554c:	469e      	mov	lr, r3
 800554e:	4770      	bx	lr
