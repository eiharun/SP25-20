
RFM95W_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001928  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001ab4  08001ab4  00002ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001af4  08001af4  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001af4  08001af4  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001af4  08001af4  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001af4  08001af4  00002af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001af8  08001af8  00002af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001afc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  08001b08  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  08001b08  00003090  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000677d  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001434  00000000  00000000  000097b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000758  00000000  00000000  0000abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000579  00000000  00000000  0000b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018200  00000000  00000000  0000b8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ee7  00000000  00000000  00023ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097f37  00000000  00000000  0002b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c38df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c84  00000000  00000000  000c3924  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000c55a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08001a9c 	.word	0x08001a9c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	08001a9c 	.word	0x08001a9c

080001cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b0ae      	sub	sp, #184	@ 0xb8
 80001d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	rfm95_handle_t rfm95_handle = {
 80001d2:	463b      	mov	r3, r7
 80001d4:	22b8      	movs	r2, #184	@ 0xb8
 80001d6:	2100      	movs	r1, #0
 80001d8:	4618      	mov	r0, r3
 80001da:	f001 fc32 	bl	8001a42 <memset>
 80001de:	4b0b      	ldr	r3, [pc, #44]	@ (800020c <main+0x40>)
 80001e0:	603b      	str	r3, [r7, #0]
 80001e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001e6:	607b      	str	r3, [r7, #4]
 80001e8:	2308      	movs	r3, #8
 80001ea:	813b      	strh	r3, [r7, #8]
 80001ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001f0:	60fb      	str	r3, [r7, #12]
 80001f2:	2310      	movs	r3, #16
 80001f4:	823b      	strh	r3, [r7, #16]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f6:	f000 f9ea 	bl	80005ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001fa:	f000 f809 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fe:	f000 f88b 	bl	8000318 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000202:	f000 f84b 	bl	800029c <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000206:	bf00      	nop
 8000208:	e7fd      	b.n	8000206 <main+0x3a>
 800020a:	bf00      	nop
 800020c:	20000028 	.word	0x20000028

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b096      	sub	sp, #88	@ 0x58
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2244      	movs	r2, #68	@ 0x44
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f001 fc0f 	bl	8001a42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000232:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000236:	f000 fcbd 	bl	8000bb4 <HAL_PWREx_ControlVoltageScaling>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000240:	f000 f8ec 	bl	800041c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000244:	2310      	movs	r3, #16
 8000246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000250:	23a0      	movs	r3, #160	@ 0xa0
 8000252:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000254:	2300      	movs	r3, #0
 8000256:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fcff 	bl	8000c60 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000268:	f000 f8d8 	bl	800041c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000270:	2300      	movs	r3, #0
 8000272:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	2101      	movs	r1, #1
 8000284:	4618      	mov	r0, r3
 8000286:	f001 f94d 	bl	8001524 <HAL_RCC_ClockConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000290:	f000 f8c4 	bl	800041c <Error_Handler>
  }
}
 8000294:	bf00      	nop
 8000296:	3758      	adds	r7, #88	@ 0x58
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80002a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000314 <MX_SPI1_Init+0x78>)
 80002a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80002a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80002ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80002ae:	4b18      	ldr	r3, [pc, #96]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80002b4:	4b16      	ldr	r3, [pc, #88]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002b6:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80002ba:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80002bc:	4b14      	ldr	r3, [pc, #80]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002be:	2200      	movs	r2, #0
 80002c0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80002c2:	4b13      	ldr	r3, [pc, #76]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80002c8:	4b11      	ldr	r3, [pc, #68]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80002ce:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80002d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80002d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002d8:	2200      	movs	r2, #0
 80002da:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80002dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002de:	2200      	movs	r2, #0
 80002e0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80002e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80002e8:	4b09      	ldr	r3, [pc, #36]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002ea:	2207      	movs	r2, #7
 80002ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80002ee:	4b08      	ldr	r3, [pc, #32]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80002f4:	4b06      	ldr	r3, [pc, #24]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002f6:	2208      	movs	r2, #8
 80002f8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80002fa:	4805      	ldr	r0, [pc, #20]	@ (8000310 <MX_SPI1_Init+0x74>)
 80002fc:	f001 fafe 	bl	80018fc <HAL_SPI_Init>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000306:	f000 f889 	bl	800041c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800030a:	bf00      	nop
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	20000028 	.word	0x20000028
 8000314:	40013000 	.word	0x40013000

08000318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b088      	sub	sp, #32
 800031c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800031e:	f107 030c 	add.w	r3, r7, #12
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
 800032c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800032e:	4b39      	ldr	r3, [pc, #228]	@ (8000414 <MX_GPIO_Init+0xfc>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000332:	4a38      	ldr	r2, [pc, #224]	@ (8000414 <MX_GPIO_Init+0xfc>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800033a:	4b36      	ldr	r3, [pc, #216]	@ (8000414 <MX_GPIO_Init+0xfc>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000346:	4b33      	ldr	r3, [pc, #204]	@ (8000414 <MX_GPIO_Init+0xfc>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800034a:	4a32      	ldr	r2, [pc, #200]	@ (8000414 <MX_GPIO_Init+0xfc>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000352:	4b30      	ldr	r3, [pc, #192]	@ (8000414 <MX_GPIO_Init+0xfc>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035e:	4b2d      	ldr	r3, [pc, #180]	@ (8000414 <MX_GPIO_Init+0xfc>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000362:	4a2c      	ldr	r2, [pc, #176]	@ (8000414 <MX_GPIO_Init+0xfc>)
 8000364:	f043 0302 	orr.w	r3, r3, #2
 8000368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800036a:	4b2a      	ldr	r3, [pc, #168]	@ (8000414 <MX_GPIO_Init+0xfc>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800036e:	f003 0302 	and.w	r3, r3, #2
 8000372:	603b      	str	r3, [r7, #0]
 8000374:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFM_CS_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	2118      	movs	r1, #24
 800037a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800037e:	f000 fbf3 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|RFM_INT_Pin, GPIO_PIN_RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	2128      	movs	r1, #40	@ 0x28
 8000386:	4824      	ldr	r0, [pc, #144]	@ (8000418 <MX_GPIO_Init+0x100>)
 8000388:	f000 fbee 	bl	8000b68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 800038c:	2304      	movs	r3, #4
 800038e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000390:	2302      	movs	r3, #2
 8000392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000398:	2303      	movs	r3, #3
 800039a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800039c:	2307      	movs	r3, #7
 800039e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80003a0:	f107 030c 	add.w	r3, r7, #12
 80003a4:	4619      	mov	r1, r3
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003aa:	f000 fa6b 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM_CS_Pin RFM_RST_Pin */
  GPIO_InitStruct.Pin = RFM_CS_Pin|RFM_RST_Pin;
 80003ae:	2318      	movs	r3, #24
 80003b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b2:	2301      	movs	r3, #1
 80003b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b6:	2300      	movs	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ba:	2300      	movs	r3, #0
 80003bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003be:	f107 030c 	add.w	r3, r7, #12
 80003c2:	4619      	mov	r1, r3
 80003c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003c8:	f000 fa5c 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 80003cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80003d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80003d2:	2302      	movs	r3, #2
 80003d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003da:	2303      	movs	r3, #3
 80003dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80003de:	2303      	movs	r3, #3
 80003e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80003e2:	f107 030c 	add.w	r3, r7, #12
 80003e6:	4619      	mov	r1, r3
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80003ec:	f000 fa4a 	bl	8000884 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin RFM_INT_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|RFM_INT_Pin;
 80003f0:	2328      	movs	r3, #40	@ 0x28
 80003f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003f4:	2301      	movs	r3, #1
 80003f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003fc:	2300      	movs	r3, #0
 80003fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	f107 030c 	add.w	r3, r7, #12
 8000404:	4619      	mov	r1, r3
 8000406:	4804      	ldr	r0, [pc, #16]	@ (8000418 <MX_GPIO_Init+0x100>)
 8000408:	f000 fa3c 	bl	8000884 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800040c:	bf00      	nop
 800040e:	3720      	adds	r7, #32
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	40021000 	.word	0x40021000
 8000418:	48000400 	.word	0x48000400

0800041c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000420:	b672      	cpsid	i
}
 8000422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <Error_Handler+0x8>

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042e:	4b0f      	ldr	r3, [pc, #60]	@ (800046c <HAL_MspInit+0x44>)
 8000430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000432:	4a0e      	ldr	r2, [pc, #56]	@ (800046c <HAL_MspInit+0x44>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6613      	str	r3, [r2, #96]	@ 0x60
 800043a:	4b0c      	ldr	r3, [pc, #48]	@ (800046c <HAL_MspInit+0x44>)
 800043c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b09      	ldr	r3, [pc, #36]	@ (800046c <HAL_MspInit+0x44>)
 8000448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800044a:	4a08      	ldr	r2, [pc, #32]	@ (800046c <HAL_MspInit+0x44>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000450:	6593      	str	r3, [r2, #88]	@ 0x58
 8000452:	4b06      	ldr	r3, [pc, #24]	@ (800046c <HAL_MspInit+0x44>)
 8000454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08a      	sub	sp, #40	@ 0x28
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 0314 	add.w	r3, r7, #20
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a18      	ldr	r2, [pc, #96]	@ (80004f0 <HAL_SPI_MspInit+0x80>)
 800048e:	4293      	cmp	r3, r2
 8000490:	d129      	bne.n	80004e6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000492:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <HAL_SPI_MspInit+0x84>)
 8000494:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000496:	4a17      	ldr	r2, [pc, #92]	@ (80004f4 <HAL_SPI_MspInit+0x84>)
 8000498:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800049c:	6613      	str	r3, [r2, #96]	@ 0x60
 800049e:	4b15      	ldr	r3, [pc, #84]	@ (80004f4 <HAL_SPI_MspInit+0x84>)
 80004a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b12      	ldr	r3, [pc, #72]	@ (80004f4 <HAL_SPI_MspInit+0x84>)
 80004ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ae:	4a11      	ldr	r2, [pc, #68]	@ (80004f4 <HAL_SPI_MspInit+0x84>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80004b6:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <HAL_SPI_MspInit+0x84>)
 80004b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80004c2:	f641 0302 	movw	r3, #6146	@ 0x1802
 80004c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004c8:	2302      	movs	r3, #2
 80004ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004d0:	2303      	movs	r3, #3
 80004d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80004d4:	2305      	movs	r3, #5
 80004d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4619      	mov	r1, r3
 80004de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e2:	f000 f9cf 	bl	8000884 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80004e6:	bf00      	nop
 80004e8:	3728      	adds	r7, #40	@ 0x28
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	bf00      	nop
 80004f0:	40013000 	.word	0x40013000
 80004f4:	40021000 	.word	0x40021000

080004f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80004fc:	bf00      	nop
 80004fe:	e7fd      	b.n	80004fc <NMI_Handler+0x4>

08000500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000504:	bf00      	nop
 8000506:	e7fd      	b.n	8000504 <HardFault_Handler+0x4>

08000508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800050c:	bf00      	nop
 800050e:	e7fd      	b.n	800050c <MemManage_Handler+0x4>

08000510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000514:	bf00      	nop
 8000516:	e7fd      	b.n	8000514 <BusFault_Handler+0x4>

08000518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800051c:	bf00      	nop
 800051e:	e7fd      	b.n	800051c <UsageFault_Handler+0x4>

08000520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000520:	b480      	push	{r7}
 8000522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800052e:	b480      	push	{r7}
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000532:	bf00      	nop
 8000534:	46bd      	mov	sp, r7
 8000536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053a:	4770      	bx	lr

0800053c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr

0800054a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054e:	f000 f893 	bl	8000678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800055c:	4b06      	ldr	r3, [pc, #24]	@ (8000578 <SystemInit+0x20>)
 800055e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <SystemInit+0x20>)
 8000564:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000568:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800056c:	bf00      	nop
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop
 8000578:	e000ed00 	.word	0xe000ed00

0800057c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800057c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80005b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000580:	f7ff ffea 	bl	8000558 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480c      	ldr	r0, [pc, #48]	@ (80005b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000586:	490d      	ldr	r1, [pc, #52]	@ (80005bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000588:	4a0d      	ldr	r2, [pc, #52]	@ (80005c0 <LoopForever+0xe>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a0a      	ldr	r2, [pc, #40]	@ (80005c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800059c:	4c0a      	ldr	r4, [pc, #40]	@ (80005c8 <LoopForever+0x16>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005aa:	f001 fa53 	bl	8001a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005ae:	f7ff fe0d 	bl	80001cc <main>

080005b2 <LoopForever>:

LoopForever:
    b LoopForever
 80005b2:	e7fe      	b.n	80005b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005b4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005c0:	08001afc 	.word	0x08001afc
  ldr r2, =_sbss
 80005c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005c8:	20000090 	.word	0x20000090

080005cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005cc:	e7fe      	b.n	80005cc <ADC1_2_IRQHandler>

080005ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005d4:	2300      	movs	r3, #0
 80005d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005d8:	2003      	movs	r0, #3
 80005da:	f000 f91f 	bl	800081c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005de:	2000      	movs	r0, #0
 80005e0:	f000 f80e 	bl	8000600 <HAL_InitTick>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d002      	beq.n	80005f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	e001      	b.n	80005f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005f0:	f7ff ff1a 	bl	8000428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005f4:	79fb      	ldrb	r3, [r7, #7]
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b084      	sub	sp, #16
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000608:	2300      	movs	r3, #0
 800060a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800060c:	4b17      	ldr	r3, [pc, #92]	@ (800066c <HAL_InitTick+0x6c>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d023      	beq.n	800065c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000614:	4b16      	ldr	r3, [pc, #88]	@ (8000670 <HAL_InitTick+0x70>)
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	4b14      	ldr	r3, [pc, #80]	@ (800066c <HAL_InitTick+0x6c>)
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	4619      	mov	r1, r3
 800061e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000622:	fbb3 f3f1 	udiv	r3, r3, r1
 8000626:	fbb2 f3f3 	udiv	r3, r2, r3
 800062a:	4618      	mov	r0, r3
 800062c:	f000 f91d 	bl	800086a <HAL_SYSTICK_Config>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d10f      	bne.n	8000656 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	d809      	bhi.n	8000650 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800063c:	2200      	movs	r2, #0
 800063e:	6879      	ldr	r1, [r7, #4]
 8000640:	f04f 30ff 	mov.w	r0, #4294967295
 8000644:	f000 f8f5 	bl	8000832 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000648:	4a0a      	ldr	r2, [pc, #40]	@ (8000674 <HAL_InitTick+0x74>)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	6013      	str	r3, [r2, #0]
 800064e:	e007      	b.n	8000660 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000650:	2301      	movs	r3, #1
 8000652:	73fb      	strb	r3, [r7, #15]
 8000654:	e004      	b.n	8000660 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000656:	2301      	movs	r3, #1
 8000658:	73fb      	strb	r3, [r7, #15]
 800065a:	e001      	b.n	8000660 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800065c:	2301      	movs	r3, #1
 800065e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000660:	7bfb      	ldrb	r3, [r7, #15]
}
 8000662:	4618      	mov	r0, r3
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000008 	.word	0x20000008
 8000670:	20000000 	.word	0x20000000
 8000674:	20000004 	.word	0x20000004

08000678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <HAL_IncTick+0x20>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	461a      	mov	r2, r3
 8000682:	4b06      	ldr	r3, [pc, #24]	@ (800069c <HAL_IncTick+0x24>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4413      	add	r3, r2
 8000688:	4a04      	ldr	r2, [pc, #16]	@ (800069c <HAL_IncTick+0x24>)
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000008 	.word	0x20000008
 800069c:	2000008c 	.word	0x2000008c

080006a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b03      	ldr	r3, [pc, #12]	@ (80006b4 <HAL_GetTick+0x14>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	2000008c 	.word	0x2000008c

080006b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b085      	sub	sp, #20
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	f003 0307 	and.w	r3, r3, #7
 80006c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ce:	68ba      	ldr	r2, [r7, #8]
 80006d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006d4:	4013      	ands	r3, r2
 80006d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006dc:	68bb      	ldr	r3, [r7, #8]
 80006de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ea:	4a04      	ldr	r2, [pc, #16]	@ (80006fc <__NVIC_SetPriorityGrouping+0x44>)
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	60d3      	str	r3, [r2, #12]
}
 80006f0:	bf00      	nop
 80006f2:	3714      	adds	r7, #20
 80006f4:	46bd      	mov	sp, r7
 80006f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fa:	4770      	bx	lr
 80006fc:	e000ed00 	.word	0xe000ed00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	6039      	str	r1, [r7, #0]
 8000726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	db0a      	blt.n	8000746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000730:	683b      	ldr	r3, [r7, #0]
 8000732:	b2da      	uxtb	r2, r3
 8000734:	490c      	ldr	r1, [pc, #48]	@ (8000768 <__NVIC_SetPriority+0x4c>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	0112      	lsls	r2, r2, #4
 800073c:	b2d2      	uxtb	r2, r2
 800073e:	440b      	add	r3, r1
 8000740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000744:	e00a      	b.n	800075c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	b2da      	uxtb	r2, r3
 800074a:	4908      	ldr	r1, [pc, #32]	@ (800076c <__NVIC_SetPriority+0x50>)
 800074c:	79fb      	ldrb	r3, [r7, #7]
 800074e:	f003 030f 	and.w	r3, r3, #15
 8000752:	3b04      	subs	r3, #4
 8000754:	0112      	lsls	r2, r2, #4
 8000756:	b2d2      	uxtb	r2, r2
 8000758:	440b      	add	r3, r1
 800075a:	761a      	strb	r2, [r3, #24]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr
 8000768:	e000e100 	.word	0xe000e100
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000770:	b480      	push	{r7}
 8000772:	b089      	sub	sp, #36	@ 0x24
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	f1c3 0307 	rsb	r3, r3, #7
 800078a:	2b04      	cmp	r3, #4
 800078c:	bf28      	it	cs
 800078e:	2304      	movcs	r3, #4
 8000790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3304      	adds	r3, #4
 8000796:	2b06      	cmp	r3, #6
 8000798:	d902      	bls.n	80007a0 <NVIC_EncodePriority+0x30>
 800079a:	69fb      	ldr	r3, [r7, #28]
 800079c:	3b03      	subs	r3, #3
 800079e:	e000      	b.n	80007a2 <NVIC_EncodePriority+0x32>
 80007a0:	2300      	movs	r3, #0
 80007a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007a4:	f04f 32ff 	mov.w	r2, #4294967295
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	fa02 f303 	lsl.w	r3, r2, r3
 80007ae:	43da      	mvns	r2, r3
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	401a      	ands	r2, r3
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b8:	f04f 31ff 	mov.w	r1, #4294967295
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	fa01 f303 	lsl.w	r3, r1, r3
 80007c2:	43d9      	mvns	r1, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c8:	4313      	orrs	r3, r2
         );
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3724      	adds	r7, #36	@ 0x24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
	...

080007d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3b01      	subs	r3, #1
 80007e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80007e8:	d301      	bcc.n	80007ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ea:	2301      	movs	r3, #1
 80007ec:	e00f      	b.n	800080e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000818 <SysTick_Config+0x40>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3b01      	subs	r3, #1
 80007f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007f6:	210f      	movs	r1, #15
 80007f8:	f04f 30ff 	mov.w	r0, #4294967295
 80007fc:	f7ff ff8e 	bl	800071c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000800:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <SysTick_Config+0x40>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000806:	4b04      	ldr	r3, [pc, #16]	@ (8000818 <SysTick_Config+0x40>)
 8000808:	2207      	movs	r2, #7
 800080a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	e000e010 	.word	0xe000e010

0800081c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	f7ff ff47 	bl	80006b8 <__NVIC_SetPriorityGrouping>
}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b086      	sub	sp, #24
 8000836:	af00      	add	r7, sp, #0
 8000838:	4603      	mov	r3, r0
 800083a:	60b9      	str	r1, [r7, #8]
 800083c:	607a      	str	r2, [r7, #4]
 800083e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000844:	f7ff ff5c 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000848:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	68b9      	ldr	r1, [r7, #8]
 800084e:	6978      	ldr	r0, [r7, #20]
 8000850:	f7ff ff8e 	bl	8000770 <NVIC_EncodePriority>
 8000854:	4602      	mov	r2, r0
 8000856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff ff5d 	bl	800071c <__NVIC_SetPriority>
}
 8000862:	bf00      	nop
 8000864:	3718      	adds	r7, #24
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}

0800086a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800086a:	b580      	push	{r7, lr}
 800086c:	b082      	sub	sp, #8
 800086e:	af00      	add	r7, sp, #0
 8000870:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000872:	6878      	ldr	r0, [r7, #4]
 8000874:	f7ff ffb0 	bl	80007d8 <SysTick_Config>
 8000878:	4603      	mov	r3, r0
}
 800087a:	4618      	mov	r0, r3
 800087c:	3708      	adds	r7, #8
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
	...

08000884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000884:	b480      	push	{r7}
 8000886:	b087      	sub	sp, #28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
 800088c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000892:	e14e      	b.n	8000b32 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	2101      	movs	r1, #1
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	fa01 f303 	lsl.w	r3, r1, r3
 80008a0:	4013      	ands	r3, r2
 80008a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	f000 8140 	beq.w	8000b2c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f003 0303 	and.w	r3, r3, #3
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d005      	beq.n	80008c4 <HAL_GPIO_Init+0x40>
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	f003 0303 	and.w	r3, r3, #3
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d130      	bne.n	8000926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	005b      	lsls	r3, r3, #1
 80008ce:	2203      	movs	r2, #3
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	43db      	mvns	r3, r3
 80008d6:	693a      	ldr	r2, [r7, #16]
 80008d8:	4013      	ands	r3, r2
 80008da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	68da      	ldr	r2, [r3, #12]
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	fa02 f303 	lsl.w	r3, r2, r3
 80008e8:	693a      	ldr	r2, [r7, #16]
 80008ea:	4313      	orrs	r3, r2
 80008ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008fa:	2201      	movs	r2, #1
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa02 f303 	lsl.w	r3, r2, r3
 8000902:	43db      	mvns	r3, r3
 8000904:	693a      	ldr	r2, [r7, #16]
 8000906:	4013      	ands	r3, r2
 8000908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	091b      	lsrs	r3, r3, #4
 8000910:	f003 0201 	and.w	r2, r3, #1
 8000914:	697b      	ldr	r3, [r7, #20]
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	693a      	ldr	r2, [r7, #16]
 800091c:	4313      	orrs	r3, r2
 800091e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f003 0303 	and.w	r3, r3, #3
 800092e:	2b03      	cmp	r3, #3
 8000930:	d017      	beq.n	8000962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	68db      	ldr	r3, [r3, #12]
 8000936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	2203      	movs	r2, #3
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	689a      	ldr	r2, [r3, #8]
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	005b      	lsls	r3, r3, #1
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	693a      	ldr	r2, [r7, #16]
 8000958:	4313      	orrs	r3, r2
 800095a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	685b      	ldr	r3, [r3, #4]
 8000966:	f003 0303 	and.w	r3, r3, #3
 800096a:	2b02      	cmp	r3, #2
 800096c:	d123      	bne.n	80009b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	08da      	lsrs	r2, r3, #3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3208      	adds	r2, #8
 8000976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	220f      	movs	r2, #15
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	43db      	mvns	r3, r3
 800098c:	693a      	ldr	r2, [r7, #16]
 800098e:	4013      	ands	r3, r2
 8000990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	691a      	ldr	r2, [r3, #16]
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	f003 0307 	and.w	r3, r3, #7
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	693a      	ldr	r2, [r7, #16]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	08da      	lsrs	r2, r3, #3
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3208      	adds	r2, #8
 80009b0:	6939      	ldr	r1, [r7, #16]
 80009b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	2203      	movs	r2, #3
 80009c2:	fa02 f303 	lsl.w	r3, r2, r3
 80009c6:	43db      	mvns	r3, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4013      	ands	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	f003 0203 	and.w	r2, r3, #3
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	005b      	lsls	r3, r3, #1
 80009da:	fa02 f303 	lsl.w	r3, r2, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4313      	orrs	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	f000 809a 	beq.w	8000b2c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009f8:	4b55      	ldr	r3, [pc, #340]	@ (8000b50 <HAL_GPIO_Init+0x2cc>)
 80009fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009fc:	4a54      	ldr	r2, [pc, #336]	@ (8000b50 <HAL_GPIO_Init+0x2cc>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	6613      	str	r3, [r2, #96]	@ 0x60
 8000a04:	4b52      	ldr	r3, [pc, #328]	@ (8000b50 <HAL_GPIO_Init+0x2cc>)
 8000a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000a10:	4a50      	ldr	r2, [pc, #320]	@ (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	089b      	lsrs	r3, r3, #2
 8000a16:	3302      	adds	r3, #2
 8000a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	220f      	movs	r2, #15
 8000a28:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2c:	43db      	mvns	r3, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4013      	ands	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000a3a:	d013      	beq.n	8000a64 <HAL_GPIO_Init+0x1e0>
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	4a46      	ldr	r2, [pc, #280]	@ (8000b58 <HAL_GPIO_Init+0x2d4>)
 8000a40:	4293      	cmp	r3, r2
 8000a42:	d00d      	beq.n	8000a60 <HAL_GPIO_Init+0x1dc>
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a45      	ldr	r2, [pc, #276]	@ (8000b5c <HAL_GPIO_Init+0x2d8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d007      	beq.n	8000a5c <HAL_GPIO_Init+0x1d8>
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a44      	ldr	r2, [pc, #272]	@ (8000b60 <HAL_GPIO_Init+0x2dc>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d101      	bne.n	8000a58 <HAL_GPIO_Init+0x1d4>
 8000a54:	2303      	movs	r3, #3
 8000a56:	e006      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a58:	2307      	movs	r3, #7
 8000a5a:	e004      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	e002      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a60:	2301      	movs	r3, #1
 8000a62:	e000      	b.n	8000a66 <HAL_GPIO_Init+0x1e2>
 8000a64:	2300      	movs	r3, #0
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	f002 0203 	and.w	r2, r2, #3
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	4093      	lsls	r3, r2
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a76:	4937      	ldr	r1, [pc, #220]	@ (8000b54 <HAL_GPIO_Init+0x2d0>)
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	089b      	lsrs	r3, r3, #2
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	693a      	ldr	r2, [r7, #16]
 8000a80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a84:	4b37      	ldr	r3, [pc, #220]	@ (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000a86:	689b      	ldr	r3, [r3, #8]
 8000a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d003      	beq.n	8000aa8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000aa8:	4a2e      	ldr	r2, [pc, #184]	@ (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000aaa:	693b      	ldr	r3, [r7, #16]
 8000aac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000aae:	4b2d      	ldr	r3, [pc, #180]	@ (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000ab0:	68db      	ldr	r3, [r3, #12]
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	43db      	mvns	r3, r3
 8000ab8:	693a      	ldr	r2, [r7, #16]
 8000aba:	4013      	ands	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d003      	beq.n	8000ad2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ad2:	4a24      	ldr	r2, [pc, #144]	@ (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	43db      	mvns	r3, r3
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	4013      	ands	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000afc:	4a19      	ldr	r2, [pc, #100]	@ (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000b02:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	43db      	mvns	r3, r3
 8000b0c:	693a      	ldr	r2, [r7, #16]
 8000b0e:	4013      	ands	r3, r2
 8000b10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d003      	beq.n	8000b26 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	4313      	orrs	r3, r2
 8000b24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b26:	4a0f      	ldr	r2, [pc, #60]	@ (8000b64 <HAL_GPIO_Init+0x2e0>)
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b32:	683b      	ldr	r3, [r7, #0]
 8000b34:	681a      	ldr	r2, [r3, #0]
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	f47f aea9 	bne.w	8000894 <HAL_GPIO_Init+0x10>
  }
}
 8000b42:	bf00      	nop
 8000b44:	bf00      	nop
 8000b46:	371c      	adds	r7, #28
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	40021000 	.word	0x40021000
 8000b54:	40010000 	.word	0x40010000
 8000b58:	48000400 	.word	0x48000400
 8000b5c:	48000800 	.word	0x48000800
 8000b60:	48000c00 	.word	0x48000c00
 8000b64:	40010400 	.word	0x40010400

08000b68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	460b      	mov	r3, r1
 8000b72:	807b      	strh	r3, [r7, #2]
 8000b74:	4613      	mov	r3, r2
 8000b76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b78:	787b      	ldrb	r3, [r7, #1]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d003      	beq.n	8000b86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b7e:	887a      	ldrh	r2, [r7, #2]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b84:	e002      	b.n	8000b8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b86:	887a      	ldrh	r2, [r7, #2]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000b9c:	4b04      	ldr	r3, [pc, #16]	@ (8000bb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	40007000 	.word	0x40007000

08000bb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b085      	sub	sp, #20
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bc2:	d130      	bne.n	8000c26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bc4:	4b23      	ldr	r3, [pc, #140]	@ (8000c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000bcc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bd0:	d038      	beq.n	8000c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd2:	4b20      	ldr	r3, [pc, #128]	@ (8000c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000bda:	4a1e      	ldr	r2, [pc, #120]	@ (8000c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000bdc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000be0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000be2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2232      	movs	r2, #50	@ 0x32
 8000be8:	fb02 f303 	mul.w	r3, r2, r3
 8000bec:	4a1b      	ldr	r2, [pc, #108]	@ (8000c5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000bee:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf2:	0c9b      	lsrs	r3, r3, #18
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bf8:	e002      	b.n	8000c00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c00:	4b14      	ldr	r3, [pc, #80]	@ (8000c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c02:	695b      	ldr	r3, [r3, #20]
 8000c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c08:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c0c:	d102      	bne.n	8000c14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d1f2      	bne.n	8000bfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c20:	d110      	bne.n	8000c44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e00f      	b.n	8000c46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c26:	4b0b      	ldr	r3, [pc, #44]	@ (8000c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000c32:	d007      	beq.n	8000c44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000c3c:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000c3e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	40007000 	.word	0x40007000
 8000c58:	20000000 	.word	0x20000000
 8000c5c:	431bde83 	.word	0x431bde83

08000c60 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b08a      	sub	sp, #40	@ 0x28
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d102      	bne.n	8000c74 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000c6e:	2301      	movs	r3, #1
 8000c70:	f000 bc4f 	b.w	8001512 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000c74:	4b97      	ldr	r3, [pc, #604]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000c76:	689b      	ldr	r3, [r3, #8]
 8000c78:	f003 030c 	and.w	r3, r3, #12
 8000c7c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000c7e:	4b95      	ldr	r3, [pc, #596]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	f003 0303 	and.w	r3, r3, #3
 8000c86:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f003 0310 	and.w	r3, r3, #16
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f000 80e6 	beq.w	8000e62 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000c96:	6a3b      	ldr	r3, [r7, #32]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d007      	beq.n	8000cac <HAL_RCC_OscConfig+0x4c>
 8000c9c:	6a3b      	ldr	r3, [r7, #32]
 8000c9e:	2b0c      	cmp	r3, #12
 8000ca0:	f040 808d 	bne.w	8000dbe <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ca4:	69fb      	ldr	r3, [r7, #28]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	f040 8089 	bne.w	8000dbe <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cac:	4b89      	ldr	r3, [pc, #548]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	f003 0302 	and.w	r3, r3, #2
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d006      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x66>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	69db      	ldr	r3, [r3, #28]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d102      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	f000 bc26 	b.w	8001512 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000cca:	4b82      	ldr	r3, [pc, #520]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f003 0308 	and.w	r3, r3, #8
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <HAL_RCC_OscConfig+0x80>
 8000cd6:	4b7f      	ldr	r3, [pc, #508]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cde:	e005      	b.n	8000cec <HAL_RCC_OscConfig+0x8c>
 8000ce0:	4b7c      	ldr	r3, [pc, #496]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d224      	bcs.n	8000d3a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 fda1 	bl	800183c <RCC_SetFlashLatencyFromMSIRange>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d002      	beq.n	8000d06 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8000d00:	2301      	movs	r3, #1
 8000d02:	f000 bc06 	b.w	8001512 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d06:	4b73      	ldr	r3, [pc, #460]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	4a72      	ldr	r2, [pc, #456]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	6013      	str	r3, [r2, #0]
 8000d12:	4b70      	ldr	r3, [pc, #448]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1e:	496d      	ldr	r1, [pc, #436]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d20:	4313      	orrs	r3, r2
 8000d22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d24:	4b6b      	ldr	r3, [pc, #428]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6a1b      	ldr	r3, [r3, #32]
 8000d30:	021b      	lsls	r3, r3, #8
 8000d32:	4968      	ldr	r1, [pc, #416]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d34:	4313      	orrs	r3, r2
 8000d36:	604b      	str	r3, [r1, #4]
 8000d38:	e025      	b.n	8000d86 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d3a:	4b66      	ldr	r3, [pc, #408]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4a65      	ldr	r2, [pc, #404]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d40:	f043 0308 	orr.w	r3, r3, #8
 8000d44:	6013      	str	r3, [r2, #0]
 8000d46:	4b63      	ldr	r3, [pc, #396]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d52:	4960      	ldr	r1, [pc, #384]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d54:	4313      	orrs	r3, r2
 8000d56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d58:	4b5e      	ldr	r3, [pc, #376]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	6a1b      	ldr	r3, [r3, #32]
 8000d64:	021b      	lsls	r3, r3, #8
 8000d66:	495b      	ldr	r1, [pc, #364]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000d6c:	6a3b      	ldr	r3, [r7, #32]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d109      	bne.n	8000d86 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 fd60 	bl	800183c <RCC_SetFlashLatencyFromMSIRange>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e3c5      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000d86:	f000 fccd 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	4b51      	ldr	r3, [pc, #324]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	091b      	lsrs	r3, r3, #4
 8000d92:	f003 030f 	and.w	r3, r3, #15
 8000d96:	4950      	ldr	r1, [pc, #320]	@ (8000ed8 <HAL_RCC_OscConfig+0x278>)
 8000d98:	5ccb      	ldrb	r3, [r1, r3]
 8000d9a:	f003 031f 	and.w	r3, r3, #31
 8000d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000da2:	4a4e      	ldr	r2, [pc, #312]	@ (8000edc <HAL_RCC_OscConfig+0x27c>)
 8000da4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000da6:	4b4e      	ldr	r3, [pc, #312]	@ (8000ee0 <HAL_RCC_OscConfig+0x280>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4618      	mov	r0, r3
 8000dac:	f7ff fc28 	bl	8000600 <HAL_InitTick>
 8000db0:	4603      	mov	r3, r0
 8000db2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8000db4:	7dfb      	ldrb	r3, [r7, #23]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d052      	beq.n	8000e60 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	e3a9      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d032      	beq.n	8000e2c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000dc6:	4b43      	ldr	r3, [pc, #268]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4a42      	ldr	r2, [pc, #264]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000dd2:	f7ff fc65 	bl	80006a0 <HAL_GetTick>
 8000dd6:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dd8:	e008      	b.n	8000dec <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000dda:	f7ff fc61 	bl	80006a0 <HAL_GetTick>
 8000dde:	4602      	mov	r2, r0
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	1ad3      	subs	r3, r2, r3
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d901      	bls.n	8000dec <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8000de8:	2303      	movs	r3, #3
 8000dea:	e392      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000dec:	4b39      	ldr	r3, [pc, #228]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d0f0      	beq.n	8000dda <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000df8:	4b36      	ldr	r3, [pc, #216]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a35      	ldr	r2, [pc, #212]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000dfe:	f043 0308 	orr.w	r3, r3, #8
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b33      	ldr	r3, [pc, #204]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e10:	4930      	ldr	r1, [pc, #192]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000e12:	4313      	orrs	r3, r2
 8000e14:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e16:	4b2f      	ldr	r3, [pc, #188]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a1b      	ldr	r3, [r3, #32]
 8000e22:	021b      	lsls	r3, r3, #8
 8000e24:	492b      	ldr	r1, [pc, #172]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000e26:	4313      	orrs	r3, r2
 8000e28:	604b      	str	r3, [r1, #4]
 8000e2a:	e01a      	b.n	8000e62 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e2c:	4b29      	ldr	r3, [pc, #164]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a28      	ldr	r2, [pc, #160]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000e32:	f023 0301 	bic.w	r3, r3, #1
 8000e36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000e38:	f7ff fc32 	bl	80006a0 <HAL_GetTick>
 8000e3c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e40:	f7ff fc2e 	bl	80006a0 <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e35f      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000e52:	4b20      	ldr	r3, [pc, #128]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f0      	bne.n	8000e40 <HAL_RCC_OscConfig+0x1e0>
 8000e5e:	e000      	b.n	8000e62 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e60:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d073      	beq.n	8000f56 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000e6e:	6a3b      	ldr	r3, [r7, #32]
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d005      	beq.n	8000e80 <HAL_RCC_OscConfig+0x220>
 8000e74:	6a3b      	ldr	r3, [r7, #32]
 8000e76:	2b0c      	cmp	r3, #12
 8000e78:	d10e      	bne.n	8000e98 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d10b      	bne.n	8000e98 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e80:	4b14      	ldr	r3, [pc, #80]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d063      	beq.n	8000f54 <HAL_RCC_OscConfig+0x2f4>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d15f      	bne.n	8000f54 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e33c      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ea0:	d106      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x250>
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000ea8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eac:	6013      	str	r3, [r2, #0]
 8000eae:	e025      	b.n	8000efc <HAL_RCC_OscConfig+0x29c>
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000eb8:	d114      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x284>
 8000eba:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a05      	ldr	r2, [pc, #20]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000ec0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b03      	ldr	r3, [pc, #12]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a02      	ldr	r2, [pc, #8]	@ (8000ed4 <HAL_RCC_OscConfig+0x274>)
 8000ecc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e013      	b.n	8000efc <HAL_RCC_OscConfig+0x29c>
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	08001ab4 	.word	0x08001ab4
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000004 	.word	0x20000004
 8000ee4:	4b8f      	ldr	r3, [pc, #572]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a8e      	ldr	r2, [pc, #568]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000eea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000eee:	6013      	str	r3, [r2, #0]
 8000ef0:	4b8c      	ldr	r3, [pc, #560]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a8b      	ldr	r2, [pc, #556]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000ef6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000efa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d013      	beq.n	8000f2c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f04:	f7ff fbcc 	bl	80006a0 <HAL_GetTick>
 8000f08:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f0a:	e008      	b.n	8000f1e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f0c:	f7ff fbc8 	bl	80006a0 <HAL_GetTick>
 8000f10:	4602      	mov	r2, r0
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2b64      	cmp	r3, #100	@ 0x64
 8000f18:	d901      	bls.n	8000f1e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e2f9      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000f1e:	4b81      	ldr	r3, [pc, #516]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d0f0      	beq.n	8000f0c <HAL_RCC_OscConfig+0x2ac>
 8000f2a:	e014      	b.n	8000f56 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fbb8 	bl	80006a0 <HAL_GetTick>
 8000f30:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f34:	f7ff fbb4 	bl	80006a0 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	69bb      	ldr	r3, [r7, #24]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	@ 0x64
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e2e5      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000f46:	4b77      	ldr	r3, [pc, #476]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x2d4>
 8000f52:	e000      	b.n	8000f56 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d060      	beq.n	8001024 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000f62:	6a3b      	ldr	r3, [r7, #32]
 8000f64:	2b04      	cmp	r3, #4
 8000f66:	d005      	beq.n	8000f74 <HAL_RCC_OscConfig+0x314>
 8000f68:	6a3b      	ldr	r3, [r7, #32]
 8000f6a:	2b0c      	cmp	r3, #12
 8000f6c:	d119      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d116      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000f74:	4b6b      	ldr	r3, [pc, #428]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_OscConfig+0x32c>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e2c2      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f8c:	4b65      	ldr	r3, [pc, #404]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	061b      	lsls	r3, r3, #24
 8000f9a:	4962      	ldr	r1, [pc, #392]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000fa0:	e040      	b.n	8001024 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d023      	beq.n	8000ff2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000faa:	4b5e      	ldr	r3, [pc, #376]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5d      	ldr	r2, [pc, #372]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fb73 	bl	80006a0 <HAL_GetTick>
 8000fba:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fbc:	e008      	b.n	8000fd0 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fbe:	f7ff fb6f 	bl	80006a0 <HAL_GetTick>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	1ad3      	subs	r3, r2, r3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d901      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	e2a0      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000fd0:	4b54      	ldr	r3, [pc, #336]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f0      	beq.n	8000fbe <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fdc:	4b51      	ldr	r3, [pc, #324]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	061b      	lsls	r3, r3, #24
 8000fea:	494e      	ldr	r1, [pc, #312]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	4313      	orrs	r3, r2
 8000fee:	604b      	str	r3, [r1, #4]
 8000ff0:	e018      	b.n	8001024 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ff2:	4b4c      	ldr	r3, [pc, #304]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a4b      	ldr	r2, [pc, #300]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ffe:	f7ff fb4f 	bl	80006a0 <HAL_GetTick>
 8001002:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001004:	e008      	b.n	8001018 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001006:	f7ff fb4b 	bl	80006a0 <HAL_GetTick>
 800100a:	4602      	mov	r2, r0
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e27c      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001018:	4b42      	ldr	r3, [pc, #264]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001020:	2b00      	cmp	r3, #0
 8001022:	d1f0      	bne.n	8001006 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f003 0308 	and.w	r3, r3, #8
 800102c:	2b00      	cmp	r3, #0
 800102e:	f000 8082 	beq.w	8001136 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d05f      	beq.n	80010fa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800103a:	4b3a      	ldr	r3, [pc, #232]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001040:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	f003 0310 	and.w	r3, r3, #16
 800104c:	429a      	cmp	r2, r3
 800104e:	d037      	beq.n	80010c0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	2b00      	cmp	r3, #0
 8001058:	d006      	beq.n	8001068 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e254      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	2b00      	cmp	r3, #0
 8001070:	d01b      	beq.n	80010aa <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001072:	4b2c      	ldr	r3, [pc, #176]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001078:	4a2a      	ldr	r2, [pc, #168]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	f023 0301 	bic.w	r3, r3, #1
 800107e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001082:	f7ff fb0d 	bl	80006a0 <HAL_GetTick>
 8001086:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001088:	e008      	b.n	800109c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800108a:	f7ff fb09 	bl	80006a0 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b11      	cmp	r3, #17
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e23a      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800109c:	4b21      	ldr	r3, [pc, #132]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 800109e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1ef      	bne.n	800108a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80010aa:	4b1e      	ldr	r3, [pc, #120]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010b0:	f023 0210 	bic.w	r2, r3, #16
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	491a      	ldr	r1, [pc, #104]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	4313      	orrs	r3, r2
 80010bc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 80010c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d0:	f7ff fae6 	bl	80006a0 <HAL_GetTick>
 80010d4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010d8:	f7ff fae2 	bl	80006a0 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b11      	cmp	r3, #17
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e213      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d0ef      	beq.n	80010d8 <HAL_RCC_OscConfig+0x478>
 80010f8:	e01d      	b.n	8001136 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001100:	4a08      	ldr	r2, [pc, #32]	@ (8001124 <HAL_RCC_OscConfig+0x4c4>)
 8001102:	f023 0301 	bic.w	r3, r3, #1
 8001106:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110a:	f7ff fac9 	bl	80006a0 <HAL_GetTick>
 800110e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001110:	e00a      	b.n	8001128 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001112:	f7ff fac5 	bl	80006a0 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	1ad3      	subs	r3, r2, r3
 800111c:	2b11      	cmp	r3, #17
 800111e:	d903      	bls.n	8001128 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001120:	2303      	movs	r3, #3
 8001122:	e1f6      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
 8001124:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001128:	4ba9      	ldr	r3, [pc, #676]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 800112a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800112e:	f003 0302 	and.w	r3, r3, #2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d1ed      	bne.n	8001112 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0304 	and.w	r3, r3, #4
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 80bd 	beq.w	80012be <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001144:	2300      	movs	r3, #0
 8001146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800114a:	4ba1      	ldr	r3, [pc, #644]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10e      	bne.n	8001174 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001156:	4b9e      	ldr	r3, [pc, #632]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800115a:	4a9d      	ldr	r2, [pc, #628]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 800115c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001160:	6593      	str	r3, [r2, #88]	@ 0x58
 8001162:	4b9b      	ldr	r3, [pc, #620]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 8001164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800116e:	2301      	movs	r3, #1
 8001170:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001174:	4b97      	ldr	r3, [pc, #604]	@ (80013d4 <HAL_RCC_OscConfig+0x774>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d118      	bne.n	80011b2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001180:	4b94      	ldr	r3, [pc, #592]	@ (80013d4 <HAL_RCC_OscConfig+0x774>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a93      	ldr	r2, [pc, #588]	@ (80013d4 <HAL_RCC_OscConfig+0x774>)
 8001186:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800118a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800118c:	f7ff fa88 	bl	80006a0 <HAL_GetTick>
 8001190:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001194:	f7ff fa84 	bl	80006a0 <HAL_GetTick>
 8001198:	4602      	mov	r2, r0
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e1b5      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80011a6:	4b8b      	ldr	r3, [pc, #556]	@ (80013d4 <HAL_RCC_OscConfig+0x774>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d0f0      	beq.n	8001194 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d02c      	beq.n	8001218 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80011be:	4b84      	ldr	r3, [pc, #528]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80011c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011c4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d0:	497f      	ldr	r1, [pc, #508]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d010      	beq.n	8001206 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80011e4:	4b7a      	ldr	r3, [pc, #488]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80011e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011ea:	4a79      	ldr	r2, [pc, #484]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80011ec:	f043 0304 	orr.w	r3, r3, #4
 80011f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80011f4:	4b76      	ldr	r3, [pc, #472]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80011f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80011fa:	4a75      	ldr	r2, [pc, #468]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001204:	e018      	b.n	8001238 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001206:	4b72      	ldr	r3, [pc, #456]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 8001208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800120c:	4a70      	ldr	r2, [pc, #448]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001216:	e00f      	b.n	8001238 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001218:	4b6d      	ldr	r3, [pc, #436]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 800121a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800121e:	4a6c      	ldr	r2, [pc, #432]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 8001220:	f023 0301 	bic.w	r3, r3, #1
 8001224:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001228:	4b69      	ldr	r3, [pc, #420]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 800122a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800122e:	4a68      	ldr	r2, [pc, #416]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 8001230:	f023 0304 	bic.w	r3, r3, #4
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d016      	beq.n	800126e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001240:	f7ff fa2e 	bl	80006a0 <HAL_GetTick>
 8001244:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001246:	e00a      	b.n	800125e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001248:	f7ff fa2a 	bl	80006a0 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001256:	4293      	cmp	r3, r2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e159      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800125e:	4b5c      	ldr	r3, [pc, #368]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 8001260:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001264:	f003 0302 	and.w	r3, r3, #2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d0ed      	beq.n	8001248 <HAL_RCC_OscConfig+0x5e8>
 800126c:	e01d      	b.n	80012aa <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800126e:	f7ff fa17 	bl	80006a0 <HAL_GetTick>
 8001272:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001274:	e00a      	b.n	800128c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001276:	f7ff fa13 	bl	80006a0 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	69bb      	ldr	r3, [r7, #24]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001284:	4293      	cmp	r3, r2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e142      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800128c:	4b50      	ldr	r3, [pc, #320]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 800128e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	2b00      	cmp	r3, #0
 8001298:	d1ed      	bne.n	8001276 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800129a:	4b4d      	ldr	r3, [pc, #308]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 800129c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80012a0:	4a4b      	ldr	r2, [pc, #300]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80012a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80012a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d105      	bne.n	80012be <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b2:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b6:	4a46      	ldr	r2, [pc, #280]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80012b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80012bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0320 	and.w	r3, r3, #32
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d03c      	beq.n	8001344 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d01c      	beq.n	800130c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80012d2:	4b3f      	ldr	r3, [pc, #252]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80012d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80012d8:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80012da:	f043 0301 	orr.w	r3, r3, #1
 80012de:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e2:	f7ff f9dd 	bl	80006a0 <HAL_GetTick>
 80012e6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012e8:	e008      	b.n	80012fc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80012ea:	f7ff f9d9 	bl	80006a0 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d901      	bls.n	80012fc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80012f8:	2303      	movs	r3, #3
 80012fa:	e10a      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80012fc:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80012fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0ef      	beq.n	80012ea <HAL_RCC_OscConfig+0x68a>
 800130a:	e01b      	b.n	8001344 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800130c:	4b30      	ldr	r3, [pc, #192]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 800130e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001312:	4a2f      	ldr	r2, [pc, #188]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800131c:	f7ff f9c0 	bl	80006a0 <HAL_GetTick>
 8001320:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001324:	f7ff f9bc 	bl	80006a0 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e0ed      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001336:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 8001338:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1ef      	bne.n	8001324 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80e1 	beq.w	8001510 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001352:	2b02      	cmp	r3, #2
 8001354:	f040 80b5 	bne.w	80014c2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001358:	4b1d      	ldr	r3, [pc, #116]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	f003 0203 	and.w	r2, r3, #3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001368:	429a      	cmp	r2, r3
 800136a:	d124      	bne.n	80013b6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001376:	3b01      	subs	r3, #1
 8001378:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800137a:	429a      	cmp	r2, r3
 800137c:	d11b      	bne.n	80013b6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001388:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800138a:	429a      	cmp	r2, r3
 800138c:	d113      	bne.n	80013b6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	3b01      	subs	r3, #1
 800139c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800139e:	429a      	cmp	r2, r3
 80013a0:	d109      	bne.n	80013b6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ac:	085b      	lsrs	r3, r3, #1
 80013ae:	3b01      	subs	r3, #1
 80013b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d05f      	beq.n	8001476 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013b6:	6a3b      	ldr	r3, [r7, #32]
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	d05a      	beq.n	8001472 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80013bc:	4b04      	ldr	r3, [pc, #16]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a03      	ldr	r2, [pc, #12]	@ (80013d0 <HAL_RCC_OscConfig+0x770>)
 80013c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80013c6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80013c8:	f7ff f96a 	bl	80006a0 <HAL_GetTick>
 80013cc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ce:	e00c      	b.n	80013ea <HAL_RCC_OscConfig+0x78a>
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d8:	f7ff f962 	bl	80006a0 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e093      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013ea:	4b4c      	ldr	r3, [pc, #304]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013f6:	4b49      	ldr	r3, [pc, #292]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 80013f8:	68da      	ldr	r2, [r3, #12]
 80013fa:	4b49      	ldr	r3, [pc, #292]	@ (8001520 <HAL_RCC_OscConfig+0x8c0>)
 80013fc:	4013      	ands	r3, r2
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001406:	3a01      	subs	r2, #1
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	4311      	orrs	r1, r2
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001410:	0212      	lsls	r2, r2, #8
 8001412:	4311      	orrs	r1, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001418:	0852      	lsrs	r2, r2, #1
 800141a:	3a01      	subs	r2, #1
 800141c:	0552      	lsls	r2, r2, #21
 800141e:	4311      	orrs	r1, r2
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001424:	0852      	lsrs	r2, r2, #1
 8001426:	3a01      	subs	r2, #1
 8001428:	0652      	lsls	r2, r2, #25
 800142a:	430a      	orrs	r2, r1
 800142c:	493b      	ldr	r1, [pc, #236]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 800142e:	4313      	orrs	r3, r2
 8001430:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001432:	4b3a      	ldr	r3, [pc, #232]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a39      	ldr	r2, [pc, #228]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001438:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800143c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800143e:	4b37      	ldr	r3, [pc, #220]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	4a36      	ldr	r2, [pc, #216]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001444:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001448:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800144a:	f7ff f929 	bl	80006a0 <HAL_GetTick>
 800144e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001452:	f7ff f925 	bl	80006a0 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e056      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001464:	4b2d      	ldr	r3, [pc, #180]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d0f0      	beq.n	8001452 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001470:	e04e      	b.n	8001510 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e04d      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001476:	4b29      	ldr	r3, [pc, #164]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d146      	bne.n	8001510 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001482:	4b26      	ldr	r3, [pc, #152]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a25      	ldr	r2, [pc, #148]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001488:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800148c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800148e:	4b23      	ldr	r3, [pc, #140]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	4a22      	ldr	r2, [pc, #136]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001494:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001498:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800149a:	f7ff f901 	bl	80006a0 <HAL_GetTick>
 800149e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a2:	f7ff f8fd 	bl	80006a0 <HAL_GetTick>
 80014a6:	4602      	mov	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e02e      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80014b4:	4b19      	ldr	r3, [pc, #100]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d0f0      	beq.n	80014a2 <HAL_RCC_OscConfig+0x842>
 80014c0:	e026      	b.n	8001510 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	2b0c      	cmp	r3, #12
 80014c6:	d021      	beq.n	800150c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	4b14      	ldr	r3, [pc, #80]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a13      	ldr	r2, [pc, #76]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 80014ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80014d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff f8e4 	bl	80006a0 <HAL_GetTick>
 80014d8:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014dc:	f7ff f8e0 	bl	80006a0 <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e011      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1f0      	bne.n	80014dc <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 80014fa:	4b08      	ldr	r3, [pc, #32]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	4a07      	ldr	r2, [pc, #28]	@ (800151c <HAL_RCC_OscConfig+0x8bc>)
 8001500:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8001504:	f023 0303 	bic.w	r3, r3, #3
 8001508:	60d3      	str	r3, [r2, #12]
 800150a:	e001      	b.n	8001510 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e000      	b.n	8001512 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001510:	2300      	movs	r3, #0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3728      	adds	r7, #40	@ 0x28
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	f99f808c 	.word	0xf99f808c

08001524 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0e7      	b.n	8001708 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001538:	4b75      	ldr	r3, [pc, #468]	@ (8001710 <HAL_RCC_ClockConfig+0x1ec>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0307 	and.w	r3, r3, #7
 8001540:	683a      	ldr	r2, [r7, #0]
 8001542:	429a      	cmp	r2, r3
 8001544:	d910      	bls.n	8001568 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001546:	4b72      	ldr	r3, [pc, #456]	@ (8001710 <HAL_RCC_ClockConfig+0x1ec>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f023 0207 	bic.w	r2, r3, #7
 800154e:	4970      	ldr	r1, [pc, #448]	@ (8001710 <HAL_RCC_ClockConfig+0x1ec>)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	4313      	orrs	r3, r2
 8001554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001556:	4b6e      	ldr	r3, [pc, #440]	@ (8001710 <HAL_RCC_ClockConfig+0x1ec>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d001      	beq.n	8001568 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0cf      	b.n	8001708 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d010      	beq.n	8001596 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	4b66      	ldr	r3, [pc, #408]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001580:	429a      	cmp	r2, r3
 8001582:	d908      	bls.n	8001596 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001584:	4b63      	ldr	r3, [pc, #396]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4960      	ldr	r1, [pc, #384]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 8001592:	4313      	orrs	r3, r2
 8001594:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d04c      	beq.n	800163c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015aa:	4b5a      	ldr	r3, [pc, #360]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d121      	bne.n	80015fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0a6      	b.n	8001708 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015c2:	4b54      	ldr	r3, [pc, #336]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d115      	bne.n	80015fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e09a      	b.n	8001708 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015da:	4b4e      	ldr	r3, [pc, #312]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e08e      	b.n	8001708 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ea:	4b4a      	ldr	r3, [pc, #296]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e086      	b.n	8001708 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4b46      	ldr	r3, [pc, #280]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f023 0203 	bic.w	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	4943      	ldr	r1, [pc, #268]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800160c:	f7ff f848 	bl	80006a0 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001612:	e00a      	b.n	800162a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001614:	f7ff f844 	bl	80006a0 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001622:	4293      	cmp	r3, r2
 8001624:	d901      	bls.n	800162a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e06e      	b.n	8001708 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800162a:	4b3a      	ldr	r3, [pc, #232]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 020c 	and.w	r2, r3, #12
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	429a      	cmp	r2, r3
 800163a:	d1eb      	bne.n	8001614 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0302 	and.w	r3, r3, #2
 8001644:	2b00      	cmp	r3, #0
 8001646:	d010      	beq.n	800166a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689a      	ldr	r2, [r3, #8]
 800164c:	4b31      	ldr	r3, [pc, #196]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001654:	429a      	cmp	r2, r3
 8001656:	d208      	bcs.n	800166a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b2e      	ldr	r3, [pc, #184]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	492b      	ldr	r1, [pc, #172]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800166a:	4b29      	ldr	r3, [pc, #164]	@ (8001710 <HAL_RCC_ClockConfig+0x1ec>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d210      	bcs.n	800169a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001678:	4b25      	ldr	r3, [pc, #148]	@ (8001710 <HAL_RCC_ClockConfig+0x1ec>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f023 0207 	bic.w	r2, r3, #7
 8001680:	4923      	ldr	r1, [pc, #140]	@ (8001710 <HAL_RCC_ClockConfig+0x1ec>)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	4313      	orrs	r3, r2
 8001686:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001688:	4b21      	ldr	r3, [pc, #132]	@ (8001710 <HAL_RCC_ClockConfig+0x1ec>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d001      	beq.n	800169a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e036      	b.n	8001708 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d008      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	68db      	ldr	r3, [r3, #12]
 80016b2:	4918      	ldr	r1, [pc, #96]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c4:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4910      	ldr	r1, [pc, #64]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d8:	f000 f824 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <HAL_RCC_ClockConfig+0x1f0>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	490b      	ldr	r1, [pc, #44]	@ (8001718 <HAL_RCC_ClockConfig+0x1f4>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	4a09      	ldr	r2, [pc, #36]	@ (800171c <HAL_RCC_ClockConfig+0x1f8>)
 80016f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016f8:	4b09      	ldr	r3, [pc, #36]	@ (8001720 <HAL_RCC_ClockConfig+0x1fc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff7f 	bl	8000600 <HAL_InitTick>
 8001702:	4603      	mov	r3, r0
 8001704:	72fb      	strb	r3, [r7, #11]

  return status;
 8001706:	7afb      	ldrb	r3, [r7, #11]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40022000 	.word	0x40022000
 8001714:	40021000 	.word	0x40021000
 8001718:	08001ab4 	.word	0x08001ab4
 800171c:	20000000 	.word	0x20000000
 8001720:	20000004 	.word	0x20000004

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001732:	4b3e      	ldr	r3, [pc, #248]	@ (800182c <HAL_RCC_GetSysClockFreq+0x108>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800173c:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <HAL_RCC_GetSysClockFreq+0x108>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x34>
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	2b0c      	cmp	r3, #12
 8001750:	d121      	bne.n	8001796 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d11e      	bne.n	8001796 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001758:	4b34      	ldr	r3, [pc, #208]	@ (800182c <HAL_RCC_GetSysClockFreq+0x108>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001764:	4b31      	ldr	r3, [pc, #196]	@ (800182c <HAL_RCC_GetSysClockFreq+0x108>)
 8001766:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	e005      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001774:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <HAL_RCC_GetSysClockFreq+0x108>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001780:	4a2b      	ldr	r2, [pc, #172]	@ (8001830 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10d      	bne.n	80017ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b04      	cmp	r3, #4
 800179a:	d102      	bne.n	80017a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800179c:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x110>)
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	e004      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017a8:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x114>)
 80017aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d134      	bne.n	800181c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <HAL_RCC_GetSysClockFreq+0x108>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d003      	beq.n	80017ca <HAL_RCC_GetSysClockFreq+0xa6>
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d003      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0xac>
 80017c8:	e005      	b.n	80017d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001834 <HAL_RCC_GetSysClockFreq+0x110>)
 80017cc:	617b      	str	r3, [r7, #20]
      break;
 80017ce:	e005      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_RCC_GetSysClockFreq+0x114>)
 80017d2:	617b      	str	r3, [r7, #20]
      break;
 80017d4:	e002      	b.n	80017dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	617b      	str	r3, [r7, #20]
      break;
 80017da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017dc:	4b13      	ldr	r3, [pc, #76]	@ (800182c <HAL_RCC_GetSysClockFreq+0x108>)
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	091b      	lsrs	r3, r3, #4
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	3301      	adds	r3, #1
 80017e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017ea:	4b10      	ldr	r3, [pc, #64]	@ (800182c <HAL_RCC_GetSysClockFreq+0x108>)
 80017ec:	68db      	ldr	r3, [r3, #12]
 80017ee:	0a1b      	lsrs	r3, r3, #8
 80017f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017f4:	697a      	ldr	r2, [r7, #20]
 80017f6:	fb03 f202 	mul.w	r2, r3, r2
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001802:	4b0a      	ldr	r3, [pc, #40]	@ (800182c <HAL_RCC_GetSysClockFreq+0x108>)
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	0e5b      	lsrs	r3, r3, #25
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	3301      	adds	r3, #1
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001812:	697a      	ldr	r2, [r7, #20]
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	fbb2 f3f3 	udiv	r3, r2, r3
 800181a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800181c:	69bb      	ldr	r3, [r7, #24]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	@ 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40021000 	.word	0x40021000
 8001830:	08001ac4 	.word	0x08001ac4
 8001834:	00f42400 	.word	0x00f42400
 8001838:	007a1200 	.word	0x007a1200

0800183c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001844:	2300      	movs	r3, #0
 8001846:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001848:	4b2a      	ldr	r3, [pc, #168]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800184a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800184c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d003      	beq.n	800185c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001854:	f7ff f9a0 	bl	8000b98 <HAL_PWREx_GetVoltageRange>
 8001858:	6178      	str	r0, [r7, #20]
 800185a:	e014      	b.n	8001886 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800185c:	4b25      	ldr	r3, [pc, #148]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	4a24      	ldr	r2, [pc, #144]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001866:	6593      	str	r3, [r2, #88]	@ 0x58
 8001868:	4b22      	ldr	r3, [pc, #136]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001874:	f7ff f990 	bl	8000b98 <HAL_PWREx_GetVoltageRange>
 8001878:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800187a:	4b1e      	ldr	r3, [pc, #120]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800187e:	4a1d      	ldr	r2, [pc, #116]	@ (80018f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001884:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800188c:	d10b      	bne.n	80018a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b80      	cmp	r3, #128	@ 0x80
 8001892:	d919      	bls.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2ba0      	cmp	r3, #160	@ 0xa0
 8001898:	d902      	bls.n	80018a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800189a:	2302      	movs	r3, #2
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	e013      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018a0:	2301      	movs	r3, #1
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	e010      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b80      	cmp	r3, #128	@ 0x80
 80018aa:	d902      	bls.n	80018b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80018ac:	2303      	movs	r3, #3
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	e00a      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b80      	cmp	r3, #128	@ 0x80
 80018b6:	d102      	bne.n	80018be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80018b8:	2302      	movs	r3, #2
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	e004      	b.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b70      	cmp	r3, #112	@ 0x70
 80018c2:	d101      	bne.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80018c4:	2301      	movs	r3, #1
 80018c6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f023 0207 	bic.w	r2, r3, #7
 80018d0:	4909      	ldr	r1, [pc, #36]	@ (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018d8:	4b07      	ldr	r3, [pc, #28]	@ (80018f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d001      	beq.n	80018ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40021000 	.word	0x40021000
 80018f8:	40022000 	.word	0x40022000

080018fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d101      	bne.n	800190e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e095      	b.n	8001a3a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001912:	2b00      	cmp	r3, #0
 8001914:	d108      	bne.n	8001928 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800191e:	d009      	beq.n	8001934 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	61da      	str	r2, [r3, #28]
 8001926:	e005      	b.n	8001934 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2200      	movs	r2, #0
 8001938:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe fd8e 	bl	8000470 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2202      	movs	r2, #2
 8001958:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800196a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001974:	d902      	bls.n	800197c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	e002      	b.n	8001982 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800197c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001980:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800198a:	d007      	beq.n	800199c <HAL_SPI_Init+0xa0>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001994:	d002      	beq.n	800199c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80019ac:	431a      	orrs	r2, r3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	431a      	orrs	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	695b      	ldr	r3, [r3, #20]
 80019bc:	f003 0301 	and.w	r3, r3, #1
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	699b      	ldr	r3, [r3, #24]
 80019c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ca:	431a      	orrs	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80019d4:	431a      	orrs	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019de:	ea42 0103 	orr.w	r1, r2, r3
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	0c1b      	lsrs	r3, r3, #16
 80019f8:	f003 0204 	and.w	r2, r3, #4
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a00:	f003 0310 	and.w	r3, r3, #16
 8001a04:	431a      	orrs	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8001a18:	ea42 0103 	orr.w	r1, r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <memset>:
 8001a42:	4402      	add	r2, r0
 8001a44:	4603      	mov	r3, r0
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d100      	bne.n	8001a4c <memset+0xa>
 8001a4a:	4770      	bx	lr
 8001a4c:	f803 1b01 	strb.w	r1, [r3], #1
 8001a50:	e7f9      	b.n	8001a46 <memset+0x4>
	...

08001a54 <__libc_init_array>:
 8001a54:	b570      	push	{r4, r5, r6, lr}
 8001a56:	4d0d      	ldr	r5, [pc, #52]	@ (8001a8c <__libc_init_array+0x38>)
 8001a58:	4c0d      	ldr	r4, [pc, #52]	@ (8001a90 <__libc_init_array+0x3c>)
 8001a5a:	1b64      	subs	r4, r4, r5
 8001a5c:	10a4      	asrs	r4, r4, #2
 8001a5e:	2600      	movs	r6, #0
 8001a60:	42a6      	cmp	r6, r4
 8001a62:	d109      	bne.n	8001a78 <__libc_init_array+0x24>
 8001a64:	4d0b      	ldr	r5, [pc, #44]	@ (8001a94 <__libc_init_array+0x40>)
 8001a66:	4c0c      	ldr	r4, [pc, #48]	@ (8001a98 <__libc_init_array+0x44>)
 8001a68:	f000 f818 	bl	8001a9c <_init>
 8001a6c:	1b64      	subs	r4, r4, r5
 8001a6e:	10a4      	asrs	r4, r4, #2
 8001a70:	2600      	movs	r6, #0
 8001a72:	42a6      	cmp	r6, r4
 8001a74:	d105      	bne.n	8001a82 <__libc_init_array+0x2e>
 8001a76:	bd70      	pop	{r4, r5, r6, pc}
 8001a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a7c:	4798      	blx	r3
 8001a7e:	3601      	adds	r6, #1
 8001a80:	e7ee      	b.n	8001a60 <__libc_init_array+0xc>
 8001a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a86:	4798      	blx	r3
 8001a88:	3601      	adds	r6, #1
 8001a8a:	e7f2      	b.n	8001a72 <__libc_init_array+0x1e>
 8001a8c:	08001af4 	.word	0x08001af4
 8001a90:	08001af4 	.word	0x08001af4
 8001a94:	08001af4 	.word	0x08001af4
 8001a98:	08001af8 	.word	0x08001af8

08001a9c <_init>:
 8001a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a9e:	bf00      	nop
 8001aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aa2:	bc08      	pop	{r3}
 8001aa4:	469e      	mov	lr, r3
 8001aa6:	4770      	bx	lr

08001aa8 <_fini>:
 8001aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aaa:	bf00      	nop
 8001aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001aae:	bc08      	pop	{r3}
 8001ab0:	469e      	mov	lr, r3
 8001ab2:	4770      	bx	lr
