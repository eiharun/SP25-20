
RFM95W_Tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  08006084  08006084  00007084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006478  08006478  00008220  2**0
                  CONTENTS
  4 .ARM          00000008  08006478  08006478  00007478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006480  08006480  00008220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006480  08006480  00007480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006484  08006484  00007484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000220  20000000  08006488  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000220  080066a8  00008220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000404  080066a8  00008404  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f69  00000000  00000000  00008250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d69  00000000  00000000  000111b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  00012f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000711  00000000  00000000  000138a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019fba  00000000  00000000  00013fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aea6  00000000  00000000  0002df73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009e4b1  00000000  00000000  00038e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d72ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f10  00000000  00000000  000d7310  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000da220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800606c 	.word	0x0800606c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800606c 	.word	0x0800606c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9b5 	b.w	80005fc <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f84d 	bl	8000340 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f840 	bl	8000340 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f82f 	bl	8000340 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f821 	bl	8000340 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b96a 	b.w	80005fc <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	460c      	mov	r4, r1
 8000348:	2b00      	cmp	r3, #0
 800034a:	d14e      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034c:	4694      	mov	ip, r2
 800034e:	458c      	cmp	ip, r1
 8000350:	4686      	mov	lr, r0
 8000352:	fab2 f282 	clz	r2, r2
 8000356:	d962      	bls.n	800041e <__udivmoddi4+0xde>
 8000358:	b14a      	cbz	r2, 800036e <__udivmoddi4+0x2e>
 800035a:	f1c2 0320 	rsb	r3, r2, #32
 800035e:	4091      	lsls	r1, r2
 8000360:	fa20 f303 	lsr.w	r3, r0, r3
 8000364:	fa0c fc02 	lsl.w	ip, ip, r2
 8000368:	4319      	orrs	r1, r3
 800036a:	fa00 fe02 	lsl.w	lr, r0, r2
 800036e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000372:	fa1f f68c 	uxth.w	r6, ip
 8000376:	fbb1 f4f7 	udiv	r4, r1, r7
 800037a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037e:	fb07 1114 	mls	r1, r7, r4, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb04 f106 	mul.w	r1, r4, r6
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f104 30ff 	add.w	r0, r4, #4294967295
 8000396:	f080 8112 	bcs.w	80005be <__udivmoddi4+0x27e>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 810f 	bls.w	80005be <__udivmoddi4+0x27e>
 80003a0:	3c02      	subs	r4, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a59      	subs	r1, r3, r1
 80003a6:	fa1f f38e 	uxth.w	r3, lr
 80003aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ae:	fb07 1110 	mls	r1, r7, r0, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb00 f606 	mul.w	r6, r0, r6
 80003ba:	429e      	cmp	r6, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x94>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c6:	f080 80fc 	bcs.w	80005c2 <__udivmoddi4+0x282>
 80003ca:	429e      	cmp	r6, r3
 80003cc:	f240 80f9 	bls.w	80005c2 <__udivmoddi4+0x282>
 80003d0:	4463      	add	r3, ip
 80003d2:	3802      	subs	r0, #2
 80003d4:	1b9b      	subs	r3, r3, r6
 80003d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003da:	2100      	movs	r1, #0
 80003dc:	b11d      	cbz	r5, 80003e6 <__udivmoddi4+0xa6>
 80003de:	40d3      	lsrs	r3, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	e9c5 3200 	strd	r3, r2, [r5]
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d905      	bls.n	80003fa <__udivmoddi4+0xba>
 80003ee:	b10d      	cbz	r5, 80003f4 <__udivmoddi4+0xb4>
 80003f0:	e9c5 0100 	strd	r0, r1, [r5]
 80003f4:	2100      	movs	r1, #0
 80003f6:	4608      	mov	r0, r1
 80003f8:	e7f5      	b.n	80003e6 <__udivmoddi4+0xa6>
 80003fa:	fab3 f183 	clz	r1, r3
 80003fe:	2900      	cmp	r1, #0
 8000400:	d146      	bne.n	8000490 <__udivmoddi4+0x150>
 8000402:	42a3      	cmp	r3, r4
 8000404:	d302      	bcc.n	800040c <__udivmoddi4+0xcc>
 8000406:	4290      	cmp	r0, r2
 8000408:	f0c0 80f0 	bcc.w	80005ec <__udivmoddi4+0x2ac>
 800040c:	1a86      	subs	r6, r0, r2
 800040e:	eb64 0303 	sbc.w	r3, r4, r3
 8000412:	2001      	movs	r0, #1
 8000414:	2d00      	cmp	r5, #0
 8000416:	d0e6      	beq.n	80003e6 <__udivmoddi4+0xa6>
 8000418:	e9c5 6300 	strd	r6, r3, [r5]
 800041c:	e7e3      	b.n	80003e6 <__udivmoddi4+0xa6>
 800041e:	2a00      	cmp	r2, #0
 8000420:	f040 8090 	bne.w	8000544 <__udivmoddi4+0x204>
 8000424:	eba1 040c 	sub.w	r4, r1, ip
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa1f f78c 	uxth.w	r7, ip
 8000430:	2101      	movs	r1, #1
 8000432:	fbb4 f6f8 	udiv	r6, r4, r8
 8000436:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800043a:	fb08 4416 	mls	r4, r8, r6, r4
 800043e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000442:	fb07 f006 	mul.w	r0, r7, r6
 8000446:	4298      	cmp	r0, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x11c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x11a>
 8000454:	4298      	cmp	r0, r3
 8000456:	f200 80cd 	bhi.w	80005f4 <__udivmoddi4+0x2b4>
 800045a:	4626      	mov	r6, r4
 800045c:	1a1c      	subs	r4, r3, r0
 800045e:	fa1f f38e 	uxth.w	r3, lr
 8000462:	fbb4 f0f8 	udiv	r0, r4, r8
 8000466:	fb08 4410 	mls	r4, r8, r0, r4
 800046a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046e:	fb00 f707 	mul.w	r7, r0, r7
 8000472:	429f      	cmp	r7, r3
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x148>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 34ff 	add.w	r4, r0, #4294967295
 800047e:	d202      	bcs.n	8000486 <__udivmoddi4+0x146>
 8000480:	429f      	cmp	r7, r3
 8000482:	f200 80b0 	bhi.w	80005e6 <__udivmoddi4+0x2a6>
 8000486:	4620      	mov	r0, r4
 8000488:	1bdb      	subs	r3, r3, r7
 800048a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048e:	e7a5      	b.n	80003dc <__udivmoddi4+0x9c>
 8000490:	f1c1 0620 	rsb	r6, r1, #32
 8000494:	408b      	lsls	r3, r1
 8000496:	fa22 f706 	lsr.w	r7, r2, r6
 800049a:	431f      	orrs	r7, r3
 800049c:	fa20 fc06 	lsr.w	ip, r0, r6
 80004a0:	fa04 f301 	lsl.w	r3, r4, r1
 80004a4:	ea43 030c 	orr.w	r3, r3, ip
 80004a8:	40f4      	lsrs	r4, r6
 80004aa:	fa00 f801 	lsl.w	r8, r0, r1
 80004ae:	0c38      	lsrs	r0, r7, #16
 80004b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b4:	fbb4 fef0 	udiv	lr, r4, r0
 80004b8:	fa1f fc87 	uxth.w	ip, r7
 80004bc:	fb00 441e 	mls	r4, r0, lr, r4
 80004c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c4:	fb0e f90c 	mul.w	r9, lr, ip
 80004c8:	45a1      	cmp	r9, r4
 80004ca:	fa02 f201 	lsl.w	r2, r2, r1
 80004ce:	d90a      	bls.n	80004e6 <__udivmoddi4+0x1a6>
 80004d0:	193c      	adds	r4, r7, r4
 80004d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d6:	f080 8084 	bcs.w	80005e2 <__udivmoddi4+0x2a2>
 80004da:	45a1      	cmp	r9, r4
 80004dc:	f240 8081 	bls.w	80005e2 <__udivmoddi4+0x2a2>
 80004e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	eba4 0409 	sub.w	r4, r4, r9
 80004ea:	fa1f f983 	uxth.w	r9, r3
 80004ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80004f2:	fb00 4413 	mls	r4, r0, r3, r4
 80004f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fe:	45a4      	cmp	ip, r4
 8000500:	d907      	bls.n	8000512 <__udivmoddi4+0x1d2>
 8000502:	193c      	adds	r4, r7, r4
 8000504:	f103 30ff 	add.w	r0, r3, #4294967295
 8000508:	d267      	bcs.n	80005da <__udivmoddi4+0x29a>
 800050a:	45a4      	cmp	ip, r4
 800050c:	d965      	bls.n	80005da <__udivmoddi4+0x29a>
 800050e:	3b02      	subs	r3, #2
 8000510:	443c      	add	r4, r7
 8000512:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000516:	fba0 9302 	umull	r9, r3, r0, r2
 800051a:	eba4 040c 	sub.w	r4, r4, ip
 800051e:	429c      	cmp	r4, r3
 8000520:	46ce      	mov	lr, r9
 8000522:	469c      	mov	ip, r3
 8000524:	d351      	bcc.n	80005ca <__udivmoddi4+0x28a>
 8000526:	d04e      	beq.n	80005c6 <__udivmoddi4+0x286>
 8000528:	b155      	cbz	r5, 8000540 <__udivmoddi4+0x200>
 800052a:	ebb8 030e 	subs.w	r3, r8, lr
 800052e:	eb64 040c 	sbc.w	r4, r4, ip
 8000532:	fa04 f606 	lsl.w	r6, r4, r6
 8000536:	40cb      	lsrs	r3, r1
 8000538:	431e      	orrs	r6, r3
 800053a:	40cc      	lsrs	r4, r1
 800053c:	e9c5 6400 	strd	r6, r4, [r5]
 8000540:	2100      	movs	r1, #0
 8000542:	e750      	b.n	80003e6 <__udivmoddi4+0xa6>
 8000544:	f1c2 0320 	rsb	r3, r2, #32
 8000548:	fa20 f103 	lsr.w	r1, r0, r3
 800054c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000550:	fa24 f303 	lsr.w	r3, r4, r3
 8000554:	4094      	lsls	r4, r2
 8000556:	430c      	orrs	r4, r1
 8000558:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800055c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000560:	fa1f f78c 	uxth.w	r7, ip
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3110 	mls	r1, r8, r0, r3
 800056c:	0c23      	lsrs	r3, r4, #16
 800056e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000572:	fb00 f107 	mul.w	r1, r0, r7
 8000576:	4299      	cmp	r1, r3
 8000578:	d908      	bls.n	800058c <__udivmoddi4+0x24c>
 800057a:	eb1c 0303 	adds.w	r3, ip, r3
 800057e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000582:	d22c      	bcs.n	80005de <__udivmoddi4+0x29e>
 8000584:	4299      	cmp	r1, r3
 8000586:	d92a      	bls.n	80005de <__udivmoddi4+0x29e>
 8000588:	3802      	subs	r0, #2
 800058a:	4463      	add	r3, ip
 800058c:	1a5b      	subs	r3, r3, r1
 800058e:	b2a4      	uxth	r4, r4
 8000590:	fbb3 f1f8 	udiv	r1, r3, r8
 8000594:	fb08 3311 	mls	r3, r8, r1, r3
 8000598:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800059c:	fb01 f307 	mul.w	r3, r1, r7
 80005a0:	42a3      	cmp	r3, r4
 80005a2:	d908      	bls.n	80005b6 <__udivmoddi4+0x276>
 80005a4:	eb1c 0404 	adds.w	r4, ip, r4
 80005a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005ac:	d213      	bcs.n	80005d6 <__udivmoddi4+0x296>
 80005ae:	42a3      	cmp	r3, r4
 80005b0:	d911      	bls.n	80005d6 <__udivmoddi4+0x296>
 80005b2:	3902      	subs	r1, #2
 80005b4:	4464      	add	r4, ip
 80005b6:	1ae4      	subs	r4, r4, r3
 80005b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005bc:	e739      	b.n	8000432 <__udivmoddi4+0xf2>
 80005be:	4604      	mov	r4, r0
 80005c0:	e6f0      	b.n	80003a4 <__udivmoddi4+0x64>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e706      	b.n	80003d4 <__udivmoddi4+0x94>
 80005c6:	45c8      	cmp	r8, r9
 80005c8:	d2ae      	bcs.n	8000528 <__udivmoddi4+0x1e8>
 80005ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80005d2:	3801      	subs	r0, #1
 80005d4:	e7a8      	b.n	8000528 <__udivmoddi4+0x1e8>
 80005d6:	4631      	mov	r1, r6
 80005d8:	e7ed      	b.n	80005b6 <__udivmoddi4+0x276>
 80005da:	4603      	mov	r3, r0
 80005dc:	e799      	b.n	8000512 <__udivmoddi4+0x1d2>
 80005de:	4630      	mov	r0, r6
 80005e0:	e7d4      	b.n	800058c <__udivmoddi4+0x24c>
 80005e2:	46d6      	mov	lr, sl
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1a6>
 80005e6:	4463      	add	r3, ip
 80005e8:	3802      	subs	r0, #2
 80005ea:	e74d      	b.n	8000488 <__udivmoddi4+0x148>
 80005ec:	4606      	mov	r6, r0
 80005ee:	4623      	mov	r3, r4
 80005f0:	4608      	mov	r0, r1
 80005f2:	e70f      	b.n	8000414 <__udivmoddi4+0xd4>
 80005f4:	3e02      	subs	r6, #2
 80005f6:	4463      	add	r3, ip
 80005f8:	e730      	b.n	800045c <__udivmoddi4+0x11c>
 80005fa:	bf00      	nop

080005fc <__aeabi_idiv0>:
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	if (!rfm95_init(&rfm95_handle)) {
 8000606:	4815      	ldr	r0, [pc, #84]	@ (800065c <main+0x5c>)
 8000608:	f001 fb06 	bl	8001c18 <rfm95_init>
 800060c:	4603      	mov	r3, r0
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <main+0x1e>
		printf("RFM95 init failed\n\r");
 8000618:	4811      	ldr	r0, [pc, #68]	@ (8000660 <main+0x60>)
 800061a:	f004 fe51 	bl	80052c0 <iprintf>
	}

	uint8_t data_packet[] = {
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <main+0x64>)
 8000620:	607b      	str	r3, [r7, #4]
		0x01, 0x02, 0x03, 0x4
	};

	if (!rfm95_send_receive_cycle(&rfm95_handle, data_packet, sizeof(data_packet))) {
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2204      	movs	r2, #4
 8000626:	4619      	mov	r1, r3
 8000628:	480c      	ldr	r0, [pc, #48]	@ (800065c <main+0x5c>)
 800062a:	f002 fb2b 	bl	8002c84 <rfm95_send_receive_cycle>
 800062e:	4603      	mov	r3, r0
 8000630:	f083 0301 	eor.w	r3, r3, #1
 8000634:	b2db      	uxtb	r3, r3
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <main+0x42>
		printf("RFM95 send failed\n\r");
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <main+0x68>)
 800063c:	f004 fe40 	bl	80052c0 <iprintf>
 8000640:	e002      	b.n	8000648 <main+0x48>
	} else {
		printf("RFM95 send success\n\r");
 8000642:	480a      	ldr	r0, [pc, #40]	@ (800066c <main+0x6c>)
 8000644:	f004 fe3c 	bl	80052c0 <iprintf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f002 fc1e 	bl	8002e88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f810 	bl	8000670 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 f892 	bl	8000778 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000654:	f000 f852 	bl	80006fc <MX_SPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000658:	bf00      	nop
 800065a:	e7fd      	b.n	8000658 <main+0x58>
 800065c:	20000000 	.word	0x20000000
 8000660:	08006084 	.word	0x08006084
 8000664:	04030201 	.word	0x04030201
 8000668:	08006098 	.word	0x08006098
 800066c:	080060ac 	.word	0x080060ac

08000670 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b096      	sub	sp, #88	@ 0x58
 8000674:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	2244      	movs	r2, #68	@ 0x44
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fe83 	bl	800538a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000684:	463b      	mov	r3, r7
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000692:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000696:	f002 ff51 	bl	800353c <HAL_PWREx_ControlVoltageScaling>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006a0:	f000 f93c 	bl	800091c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006a4:	2310      	movs	r3, #16
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a8:	2301      	movs	r3, #1
 80006aa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ac:	2300      	movs	r3, #0
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 80006b0:	23a0      	movs	r3, #160	@ 0xa0
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 ff93 	bl	80035e8 <HAL_RCC_OscConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80006c8:	f000 f928 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006cc:	230f      	movs	r3, #15
 80006ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e0:	463b      	mov	r3, r7
 80006e2:	2101      	movs	r1, #1
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 fbe1 	bl	8003eac <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80006f0:	f000 f914 	bl	800091c <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3758      	adds	r7, #88	@ 0x58
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <MX_SPI1_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	@ (8000774 <MX_SPI1_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_SPI1_Init+0x74>)
 8000708:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <MX_SPI1_Init+0x74>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000714:	4b16      	ldr	r3, [pc, #88]	@ (8000770 <MX_SPI1_Init+0x74>)
 8000716:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800071a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071c:	4b14      	ldr	r3, [pc, #80]	@ (8000770 <MX_SPI1_Init+0x74>)
 800071e:	2200      	movs	r2, #0
 8000720:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <MX_SPI1_Init+0x74>)
 8000724:	2200      	movs	r2, #0
 8000726:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_SPI1_Init+0x74>)
 800072a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	@ (8000770 <MX_SPI1_Init+0x74>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_SPI1_Init+0x74>)
 8000738:	2200      	movs	r2, #0
 800073a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_SPI1_Init+0x74>)
 800073e:	2200      	movs	r2, #0
 8000740:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_SPI1_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_SPI1_Init+0x74>)
 800074a:	2207      	movs	r2, #7
 800074c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_SPI1_Init+0x74>)
 8000750:	2200      	movs	r2, #0
 8000752:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_SPI1_Init+0x74>)
 8000756:	2208      	movs	r2, #8
 8000758:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_SPI1_Init+0x74>)
 800075c:	f003 fd92 	bl	8004284 <HAL_SPI_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000766:	f000 f8d9 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	2000023c 	.word	0x2000023c
 8000774:	40013000 	.word	0x40013000

08000778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078e:	4b4f      	ldr	r3, [pc, #316]	@ (80008cc <MX_GPIO_Init+0x154>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	4a4e      	ldr	r2, [pc, #312]	@ (80008cc <MX_GPIO_Init+0x154>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800079a:	4b4c      	ldr	r3, [pc, #304]	@ (80008cc <MX_GPIO_Init+0x154>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	4b49      	ldr	r3, [pc, #292]	@ (80008cc <MX_GPIO_Init+0x154>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007aa:	4a48      	ldr	r2, [pc, #288]	@ (80008cc <MX_GPIO_Init+0x154>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007b2:	4b46      	ldr	r3, [pc, #280]	@ (80008cc <MX_GPIO_Init+0x154>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	4b43      	ldr	r3, [pc, #268]	@ (80008cc <MX_GPIO_Init+0x154>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a42      	ldr	r2, [pc, #264]	@ (80008cc <MX_GPIO_Init+0x154>)
 80007c4:	f043 0302 	orr.w	r3, r3, #2
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b40      	ldr	r3, [pc, #256]	@ (80008cc <MX_GPIO_Init+0x154>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0302 	and.w	r3, r3, #2
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RFM_CS_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 80007d6:	2200      	movs	r2, #0
 80007d8:	2118      	movs	r1, #24
 80007da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007de:	f002 fe6f 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	483a      	ldr	r0, [pc, #232]	@ (80008d0 <MX_GPIO_Init+0x158>)
 80007e8:	f002 fe6a 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : VCP_TX_Pin */
  GPIO_InitStruct.Pin = VCP_TX_Pin;
 80007ec:	2304      	movs	r3, #4
 80007ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f8:	2303      	movs	r3, #3
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007fc:	2307      	movs	r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800080a:	f002 fce7 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM_CS_Pin RFM_RST_Pin */
  GPIO_InitStruct.Pin = RFM_CS_Pin|RFM_RST_Pin;
 800080e:	2318      	movs	r3, #24
 8000810:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	4619      	mov	r1, r3
 8000824:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000828:	f002 fcd8 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM_INT1_Pin RFM_INT0_Pin */
  GPIO_InitStruct.Pin = RFM_INT1_Pin|RFM_INT0_Pin;
 800082c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000830:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000832:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000846:	f002 fcc9 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : VCP_RX_Pin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 800084a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000850:	2302      	movs	r3, #2
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000858:	2303      	movs	r3, #3
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 800085c:	2303      	movs	r3, #3
 800085e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4619      	mov	r1, r3
 8000866:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800086a:	f002 fcb7 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800086e:	2308      	movs	r3, #8
 8000870:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000872:	2301      	movs	r3, #1
 8000874:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000876:	2300      	movs	r3, #0
 8000878:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4619      	mov	r1, r3
 8000884:	4812      	ldr	r0, [pc, #72]	@ (80008d0 <MX_GPIO_Init+0x158>)
 8000886:	f002 fca9 	bl	80031dc <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM_INT5_Pin */
  GPIO_InitStruct.Pin = RFM_INT5_Pin;
 800088a:	2340      	movs	r3, #64	@ 0x40
 800088c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000892:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RFM_INT5_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	480c      	ldr	r0, [pc, #48]	@ (80008d0 <MX_GPIO_Init+0x158>)
 80008a0:	f002 fc9c 	bl	80031dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2017      	movs	r0, #23
 80008aa:	f002 fc60 	bl	800316e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008ae:	2017      	movs	r0, #23
 80008b0:	f002 fc79 	bl	80031a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2028      	movs	r0, #40	@ 0x28
 80008ba:	f002 fc58 	bl	800316e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008be:	2028      	movs	r0, #40	@ 0x28
 80008c0:	f002 fc71 	bl	80031a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000400 	.word	0x48000400

080008d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == RFM_INT0_Pin) {
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80008e4:	d104      	bne.n	80008f0 <HAL_GPIO_EXTI_Callback+0x1c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO0);
 80008e6:	2100      	movs	r1, #0
 80008e8:	480b      	ldr	r0, [pc, #44]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x44>)
 80008ea:	f002 fab8 	bl	8002e5e <rfm95_on_interrupt>
    } else if (GPIO_Pin == RFM_INT1_Pin) {
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
    } else if (GPIO_Pin == RFM_INT5_Pin) {
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
    }
}
 80008ee:	e00f      	b.n	8000910 <HAL_GPIO_EXTI_Callback+0x3c>
    } else if (GPIO_Pin == RFM_INT1_Pin) {
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008f6:	d104      	bne.n	8000902 <HAL_GPIO_EXTI_Callback+0x2e>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO1);
 80008f8:	2101      	movs	r1, #1
 80008fa:	4807      	ldr	r0, [pc, #28]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x44>)
 80008fc:	f002 faaf 	bl	8002e5e <rfm95_on_interrupt>
}
 8000900:	e006      	b.n	8000910 <HAL_GPIO_EXTI_Callback+0x3c>
    } else if (GPIO_Pin == RFM_INT5_Pin) {
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	2b40      	cmp	r3, #64	@ 0x40
 8000906:	d103      	bne.n	8000910 <HAL_GPIO_EXTI_Callback+0x3c>
        rfm95_on_interrupt(&rfm95_handle, RFM95_INTERRUPT_DIO5);
 8000908:	2102      	movs	r1, #2
 800090a:	4803      	ldr	r0, [pc, #12]	@ (8000918 <HAL_GPIO_EXTI_Callback+0x44>)
 800090c:	f002 faa7 	bl	8002e5e <rfm95_on_interrupt>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	20000000 	.word	0x20000000

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <Error_Handler+0x8>

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	4b0f      	ldr	r3, [pc, #60]	@ (800096c <HAL_MspInit+0x44>)
 8000930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000932:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <HAL_MspInit+0x44>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6613      	str	r3, [r2, #96]	@ 0x60
 800093a:	4b0c      	ldr	r3, [pc, #48]	@ (800096c <HAL_MspInit+0x44>)
 800093c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <HAL_MspInit+0x44>)
 8000948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <HAL_MspInit+0x44>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000950:	6593      	str	r3, [r2, #88]	@ 0x58
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_MspInit+0x44>)
 8000954:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800095e:	bf00      	nop
 8000960:	370c      	adds	r7, #12
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr
 800096a:	bf00      	nop
 800096c:	40021000 	.word	0x40021000

08000970 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	@ 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <HAL_SPI_MspInit+0x80>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d129      	bne.n	80009e6 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000992:	4b18      	ldr	r3, [pc, #96]	@ (80009f4 <HAL_SPI_MspInit+0x84>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000996:	4a17      	ldr	r2, [pc, #92]	@ (80009f4 <HAL_SPI_MspInit+0x84>)
 8000998:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800099c:	6613      	str	r3, [r2, #96]	@ 0x60
 800099e:	4b15      	ldr	r3, [pc, #84]	@ (80009f4 <HAL_SPI_MspInit+0x84>)
 80009a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009a2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b12      	ldr	r3, [pc, #72]	@ (80009f4 <HAL_SPI_MspInit+0x84>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ae:	4a11      	ldr	r2, [pc, #68]	@ (80009f4 <HAL_SPI_MspInit+0x84>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009b6:	4b0f      	ldr	r3, [pc, #60]	@ (80009f4 <HAL_SPI_MspInit+0x84>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80009c2:	f641 0302 	movw	r3, #6146	@ 0x1802
 80009c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d4:	2305      	movs	r3, #5
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009e2:	f002 fbfb 	bl	80031dc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3728      	adds	r7, #40	@ 0x28
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40013000 	.word	0x40013000
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009fc:	bf00      	nop
 80009fe:	e7fd      	b.n	80009fc <NMI_Handler+0x4>

08000a00 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a04:	bf00      	nop
 8000a06:	e7fd      	b.n	8000a04 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <MemManage_Handler+0x4>

08000a10 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <BusFault_Handler+0x4>

08000a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <UsageFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr

08000a2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr

08000a3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a40:	bf00      	nop
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a4e:	f002 fa6f 	bl	8002f30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}

08000a56 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM_INT5_Pin);
 8000a5a:	2040      	movs	r0, #64	@ 0x40
 8000a5c:	f002 fd48 	bl	80034f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(RFM_INT1_Pin);
 8000a60:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a64:	f002 fd44 	bl	80034f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM_INT0_Pin);
 8000a70:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000a74:	f002 fd3c 	bl	80034f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  return 1;
 8000a80:	2301      	movs	r3, #1
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr

08000a8c <_kill>:

int _kill(int pid, int sig)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000a96:	f004 fcc7 	bl	8005428 <__errno>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2216      	movs	r2, #22
 8000a9e:	601a      	str	r2, [r3, #0]
  return -1;
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3708      	adds	r7, #8
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_exit>:

void _exit (int status)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ab4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f7ff ffe7 	bl	8000a8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000abe:	bf00      	nop
 8000ac0:	e7fd      	b.n	8000abe <_exit+0x12>

08000ac2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b086      	sub	sp, #24
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	617b      	str	r3, [r7, #20]
 8000ad2:	e00a      	b.n	8000aea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ad4:	f3af 8000 	nop.w
 8000ad8:	4601      	mov	r1, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1c5a      	adds	r2, r3, #1
 8000ade:	60ba      	str	r2, [r7, #8]
 8000ae0:	b2ca      	uxtb	r2, r1
 8000ae2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	617b      	str	r3, [r7, #20]
 8000aea:	697a      	ldr	r2, [r7, #20]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	429a      	cmp	r2, r3
 8000af0:	dbf0      	blt.n	8000ad4 <_read+0x12>
  }

  return len;
 8000af2:	687b      	ldr	r3, [r7, #4]
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e009      	b.n	8000b22 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b0e:	68bb      	ldr	r3, [r7, #8]
 8000b10:	1c5a      	adds	r2, r3, #1
 8000b12:	60ba      	str	r2, [r7, #8]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	4618      	mov	r0, r3
 8000b18:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	617b      	str	r3, [r7, #20]
 8000b22:	697a      	ldr	r2, [r7, #20]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	429a      	cmp	r2, r3
 8000b28:	dbf1      	blt.n	8000b0e <_write+0x12>
  }
  return len;
 8000b2a:	687b      	ldr	r3, [r7, #4]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3718      	adds	r7, #24
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <_close>:

int _close(int file)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <_isatty>:

int _isatty(int file)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b74:	2301      	movs	r3, #1
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b085      	sub	sp, #20
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	60f8      	str	r0, [r7, #12]
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b8e:	2300      	movs	r3, #0
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba4:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <_sbrk+0x5c>)
 8000ba6:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <_sbrk+0x60>)
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bb0:	4b13      	ldr	r3, [pc, #76]	@ (8000c00 <_sbrk+0x64>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d102      	bne.n	8000bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <_sbrk+0x64>)
 8000bba:	4a12      	ldr	r2, [pc, #72]	@ (8000c04 <_sbrk+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bbe:	4b10      	ldr	r3, [pc, #64]	@ (8000c00 <_sbrk+0x64>)
 8000bc0:	681a      	ldr	r2, [r3, #0]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d207      	bcs.n	8000bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bcc:	f004 fc2c 	bl	8005428 <__errno>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bda:	e009      	b.n	8000bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bdc:	4b08      	ldr	r3, [pc, #32]	@ (8000c00 <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000be2:	4b07      	ldr	r3, [pc, #28]	@ (8000c00 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <_sbrk+0x64>)
 8000bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bee:	68fb      	ldr	r3, [r7, #12]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	2000a000 	.word	0x2000a000
 8000bfc:	00000400 	.word	0x00000400
 8000c00:	200002a0 	.word	0x200002a0
 8000c04:	20000408 	.word	0x20000408

08000c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <SystemInit+0x20>)
 8000c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c12:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <SystemInit+0x20>)
 8000c14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c30:	f7ff ffea 	bl	8000c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	@ (8000c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	@ (8000c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <LoopForever+0xe>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c78 <LoopForever+0x16>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f004 fbeb 	bl	8005434 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c5e:	f7ff fccf 	bl	8000600 <main>

08000c62 <LoopForever>:

LoopForever:
    b LoopForever
 8000c62:	e7fe      	b.n	8000c62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c64:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c6c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8000c70:	08006488 	.word	0x08006488
  ldr r2, =_sbss
 8000c74:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8000c78:	20000404 	.word	0x20000404

08000c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC1_2_IRQHandler>
	...

08000c80 <AES_Encrypt>:
* Arguments   : *Data   Data to encrypt is a 16 byte long arry
*               *Key    Key to encrypt data with is a 16 byte long arry
*****************************************************************************************
*/
void AES_Encrypt(unsigned char *Data, unsigned char *Key)
{
 8000c80:	b5b0      	push	{r4, r5, r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	6039      	str	r1, [r7, #0]
	unsigned char i;
	unsigned char Row,Collum;
	unsigned char Round = 0x00;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	773b      	strb	r3, [r7, #28]
	unsigned char Round_Key[16];

	//Copy input to State arry
	for(Collum = 0; Collum < 4; Collum++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	777b      	strb	r3, [r7, #29]
 8000c92:	e01b      	b.n	8000ccc <AES_Encrypt+0x4c>
	{
		for(Row = 0; Row < 4; Row++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	77bb      	strb	r3, [r7, #30]
 8000c98:	e012      	b.n	8000cc0 <AES_Encrypt+0x40>
		{
			State[Row][Collum] = Data[Row + (4*Collum)];
 8000c9a:	7fba      	ldrb	r2, [r7, #30]
 8000c9c:	7f7b      	ldrb	r3, [r7, #29]
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	4413      	add	r3, r2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	1899      	adds	r1, r3, r2
 8000ca8:	7fba      	ldrb	r2, [r7, #30]
 8000caa:	7f7b      	ldrb	r3, [r7, #29]
 8000cac:	7808      	ldrb	r0, [r1, #0]
 8000cae:	4961      	ldr	r1, [pc, #388]	@ (8000e34 <AES_Encrypt+0x1b4>)
 8000cb0:	0092      	lsls	r2, r2, #2
 8000cb2:	440a      	add	r2, r1
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000cba:	7fbb      	ldrb	r3, [r7, #30]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	77bb      	strb	r3, [r7, #30]
 8000cc0:	7fbb      	ldrb	r3, [r7, #30]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d9e9      	bls.n	8000c9a <AES_Encrypt+0x1a>
	for(Collum = 0; Collum < 4; Collum++)
 8000cc6:	7f7b      	ldrb	r3, [r7, #29]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	777b      	strb	r3, [r7, #29]
 8000ccc:	7f7b      	ldrb	r3, [r7, #29]
 8000cce:	2b03      	cmp	r3, #3
 8000cd0:	d9e0      	bls.n	8000c94 <AES_Encrypt+0x14>
		}
	}

	//Copy key to round key
	for(i = 0; i < 16; i++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	77fb      	strb	r3, [r7, #31]
 8000cd6:	e00b      	b.n	8000cf0 <AES_Encrypt+0x70>
	{
		Round_Key[i] = Key[i];
 8000cd8:	7ffb      	ldrb	r3, [r7, #31]
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	441a      	add	r2, r3
 8000cde:	7ffb      	ldrb	r3, [r7, #31]
 8000ce0:	7812      	ldrb	r2, [r2, #0]
 8000ce2:	3320      	adds	r3, #32
 8000ce4:	443b      	add	r3, r7
 8000ce6:	f803 2c14 	strb.w	r2, [r3, #-20]
	for(i = 0; i < 16; i++)
 8000cea:	7ffb      	ldrb	r3, [r7, #31]
 8000cec:	3301      	adds	r3, #1
 8000cee:	77fb      	strb	r3, [r7, #31]
 8000cf0:	7ffb      	ldrb	r3, [r7, #31]
 8000cf2:	2b0f      	cmp	r3, #15
 8000cf4:	d9f0      	bls.n	8000cd8 <AES_Encrypt+0x58>
	}

	//Add round key
	AES_Add_Round_Key(Round_Key);
 8000cf6:	f107 030c 	add.w	r3, r7, #12
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f000 f89c 	bl	8000e38 <AES_Add_Round_Key>

	//Preform 9 full rounds
	for(Round = 1; Round < 10; Round++)
 8000d00:	2301      	movs	r3, #1
 8000d02:	773b      	strb	r3, [r7, #28]
 8000d04:	e038      	b.n	8000d78 <AES_Encrypt+0xf8>
	{
		//Preform Byte substitution with S table
		for(Collum = 0; Collum < 4; Collum++)
 8000d06:	2300      	movs	r3, #0
 8000d08:	777b      	strb	r3, [r7, #29]
 8000d0a:	e01f      	b.n	8000d4c <AES_Encrypt+0xcc>
		{
			for(Row = 0; Row < 4; Row++)
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	77bb      	strb	r3, [r7, #30]
 8000d10:	e016      	b.n	8000d40 <AES_Encrypt+0xc0>
			{
				State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000d12:	7fba      	ldrb	r2, [r7, #30]
 8000d14:	7f7b      	ldrb	r3, [r7, #29]
 8000d16:	4947      	ldr	r1, [pc, #284]	@ (8000e34 <AES_Encrypt+0x1b4>)
 8000d18:	0092      	lsls	r2, r2, #2
 8000d1a:	440a      	add	r2, r1
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	7fbd      	ldrb	r5, [r7, #30]
 8000d22:	7f7c      	ldrb	r4, [r7, #29]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 f8bf 	bl	8000ea8 <AES_Sub_Byte>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4a41      	ldr	r2, [pc, #260]	@ (8000e34 <AES_Encrypt+0x1b4>)
 8000d30:	00ab      	lsls	r3, r5, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	4423      	add	r3, r4
 8000d36:	460a      	mov	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
			for(Row = 0; Row < 4; Row++)
 8000d3a:	7fbb      	ldrb	r3, [r7, #30]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	77bb      	strb	r3, [r7, #30]
 8000d40:	7fbb      	ldrb	r3, [r7, #30]
 8000d42:	2b03      	cmp	r3, #3
 8000d44:	d9e5      	bls.n	8000d12 <AES_Encrypt+0x92>
		for(Collum = 0; Collum < 4; Collum++)
 8000d46:	7f7b      	ldrb	r3, [r7, #29]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	777b      	strb	r3, [r7, #29]
 8000d4c:	7f7b      	ldrb	r3, [r7, #29]
 8000d4e:	2b03      	cmp	r3, #3
 8000d50:	d9dc      	bls.n	8000d0c <AES_Encrypt+0x8c>
			}
		}

		//Preform Row Shift
		AES_Shift_Rows();
 8000d52:	f000 f8c7 	bl	8000ee4 <AES_Shift_Rows>

		//Mix Collums
		AES_Mix_Collums();
 8000d56:	f000 f909 	bl	8000f6c <AES_Mix_Collums>

		//Calculate new round key
		AES_Calculate_Round_Key(Round,Round_Key);
 8000d5a:	f107 020c 	add.w	r2, r7, #12
 8000d5e:	7f3b      	ldrb	r3, [r7, #28]
 8000d60:	4611      	mov	r1, r2
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 f998 	bl	8001098 <AES_Calculate_Round_Key>

		//Add round key
		AES_Add_Round_Key(Round_Key);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f000 f863 	bl	8000e38 <AES_Add_Round_Key>
	for(Round = 1; Round < 10; Round++)
 8000d72:	7f3b      	ldrb	r3, [r7, #28]
 8000d74:	3301      	adds	r3, #1
 8000d76:	773b      	strb	r3, [r7, #28]
 8000d78:	7f3b      	ldrb	r3, [r7, #28]
 8000d7a:	2b09      	cmp	r3, #9
 8000d7c:	d9c3      	bls.n	8000d06 <AES_Encrypt+0x86>
	}

	//Last round whitout mix collums
	//Preform Byte substitution with S table
	for(Collum = 0; Collum < 4; Collum++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	777b      	strb	r3, [r7, #29]
 8000d82:	e01f      	b.n	8000dc4 <AES_Encrypt+0x144>
	{
		for(Row = 0; Row < 4; Row++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	77bb      	strb	r3, [r7, #30]
 8000d88:	e016      	b.n	8000db8 <AES_Encrypt+0x138>
		{
			State[Row][Collum] = AES_Sub_Byte(State[Row][Collum]);
 8000d8a:	7fba      	ldrb	r2, [r7, #30]
 8000d8c:	7f7b      	ldrb	r3, [r7, #29]
 8000d8e:	4929      	ldr	r1, [pc, #164]	@ (8000e34 <AES_Encrypt+0x1b4>)
 8000d90:	0092      	lsls	r2, r2, #2
 8000d92:	440a      	add	r2, r1
 8000d94:	4413      	add	r3, r2
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	7fbd      	ldrb	r5, [r7, #30]
 8000d9a:	7f7c      	ldrb	r4, [r7, #29]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f000 f883 	bl	8000ea8 <AES_Sub_Byte>
 8000da2:	4603      	mov	r3, r0
 8000da4:	4619      	mov	r1, r3
 8000da6:	4a23      	ldr	r2, [pc, #140]	@ (8000e34 <AES_Encrypt+0x1b4>)
 8000da8:	00ab      	lsls	r3, r5, #2
 8000daa:	4413      	add	r3, r2
 8000dac:	4423      	add	r3, r4
 8000dae:	460a      	mov	r2, r1
 8000db0:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000db2:	7fbb      	ldrb	r3, [r7, #30]
 8000db4:	3301      	adds	r3, #1
 8000db6:	77bb      	strb	r3, [r7, #30]
 8000db8:	7fbb      	ldrb	r3, [r7, #30]
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d9e5      	bls.n	8000d8a <AES_Encrypt+0x10a>
	for(Collum = 0; Collum < 4; Collum++)
 8000dbe:	7f7b      	ldrb	r3, [r7, #29]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	777b      	strb	r3, [r7, #29]
 8000dc4:	7f7b      	ldrb	r3, [r7, #29]
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d9dc      	bls.n	8000d84 <AES_Encrypt+0x104>
		}
	}

	//Shift rows
	AES_Shift_Rows();
 8000dca:	f000 f88b 	bl	8000ee4 <AES_Shift_Rows>

	//Calculate new round key
	AES_Calculate_Round_Key(Round,Round_Key);
 8000dce:	f107 020c 	add.w	r2, r7, #12
 8000dd2:	7f3b      	ldrb	r3, [r7, #28]
 8000dd4:	4611      	mov	r1, r2
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 f95e 	bl	8001098 <AES_Calculate_Round_Key>

	//Add round Key
	AES_Add_Round_Key(Round_Key);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 f829 	bl	8000e38 <AES_Add_Round_Key>

	//Copy the State into the data array
	for(Collum = 0; Collum < 4; Collum++)
 8000de6:	2300      	movs	r3, #0
 8000de8:	777b      	strb	r3, [r7, #29]
 8000dea:	e01a      	b.n	8000e22 <AES_Encrypt+0x1a2>
	{
		for(Row = 0; Row < 4; Row++)
 8000dec:	2300      	movs	r3, #0
 8000dee:	77bb      	strb	r3, [r7, #30]
 8000df0:	e011      	b.n	8000e16 <AES_Encrypt+0x196>
		{
			Data[Row + (4*Collum)] = State[Row][Collum];
 8000df2:	7fb9      	ldrb	r1, [r7, #30]
 8000df4:	7f7a      	ldrb	r2, [r7, #29]
 8000df6:	7fb8      	ldrb	r0, [r7, #30]
 8000df8:	7f7b      	ldrb	r3, [r7, #29]
 8000dfa:	009b      	lsls	r3, r3, #2
 8000dfc:	4403      	add	r3, r0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4403      	add	r3, r0
 8000e04:	480b      	ldr	r0, [pc, #44]	@ (8000e34 <AES_Encrypt+0x1b4>)
 8000e06:	0089      	lsls	r1, r1, #2
 8000e08:	4401      	add	r1, r0
 8000e0a:	440a      	add	r2, r1
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000e10:	7fbb      	ldrb	r3, [r7, #30]
 8000e12:	3301      	adds	r3, #1
 8000e14:	77bb      	strb	r3, [r7, #30]
 8000e16:	7fbb      	ldrb	r3, [r7, #30]
 8000e18:	2b03      	cmp	r3, #3
 8000e1a:	d9ea      	bls.n	8000df2 <AES_Encrypt+0x172>
	for(Collum = 0; Collum < 4; Collum++)
 8000e1c:	7f7b      	ldrb	r3, [r7, #29]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	777b      	strb	r3, [r7, #29]
 8000e22:	7f7b      	ldrb	r3, [r7, #29]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d9e1      	bls.n	8000dec <AES_Encrypt+0x16c>
		}
	}

}
 8000e28:	bf00      	nop
 8000e2a:	bf00      	nop
 8000e2c:	3720      	adds	r7, #32
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bdb0      	pop	{r4, r5, r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200002a4 	.word	0x200002a4

08000e38 <AES_Add_Round_Key>:
*
* Arguments   : *Round_Key    16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Add_Round_Key(unsigned char *Round_Key)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	unsigned char Row,Collum;

	for(Collum = 0; Collum < 4; Collum++)
 8000e40:	2300      	movs	r3, #0
 8000e42:	73bb      	strb	r3, [r7, #14]
 8000e44:	e024      	b.n	8000e90 <AES_Add_Round_Key+0x58>
	{
		for(Row = 0; Row < 4; Row++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	73fb      	strb	r3, [r7, #15]
 8000e4a:	e01b      	b.n	8000e84 <AES_Add_Round_Key+0x4c>
		{
			State[Row][Collum] = State[Row][Collum] ^ Round_Key[Row + (4*Collum)];
 8000e4c:	7bfa      	ldrb	r2, [r7, #15]
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	4914      	ldr	r1, [pc, #80]	@ (8000ea4 <AES_Add_Round_Key+0x6c>)
 8000e52:	0092      	lsls	r2, r2, #2
 8000e54:	440a      	add	r2, r1
 8000e56:	4413      	add	r3, r2
 8000e58:	7818      	ldrb	r0, [r3, #0]
 8000e5a:	7bfa      	ldrb	r2, [r7, #15]
 8000e5c:	7bbb      	ldrb	r3, [r7, #14]
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	4413      	add	r3, r2
 8000e62:	461a      	mov	r2, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4413      	add	r3, r2
 8000e68:	7819      	ldrb	r1, [r3, #0]
 8000e6a:	7bfa      	ldrb	r2, [r7, #15]
 8000e6c:	7bbb      	ldrb	r3, [r7, #14]
 8000e6e:	4041      	eors	r1, r0
 8000e70:	b2c8      	uxtb	r0, r1
 8000e72:	490c      	ldr	r1, [pc, #48]	@ (8000ea4 <AES_Add_Round_Key+0x6c>)
 8000e74:	0092      	lsls	r2, r2, #2
 8000e76:	440a      	add	r2, r1
 8000e78:	4413      	add	r3, r2
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	701a      	strb	r2, [r3, #0]
		for(Row = 0; Row < 4; Row++)
 8000e7e:	7bfb      	ldrb	r3, [r7, #15]
 8000e80:	3301      	adds	r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	d9e0      	bls.n	8000e4c <AES_Add_Round_Key+0x14>
	for(Collum = 0; Collum < 4; Collum++)
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	73bb      	strb	r3, [r7, #14]
 8000e90:	7bbb      	ldrb	r3, [r7, #14]
 8000e92:	2b03      	cmp	r3, #3
 8000e94:	d9d7      	bls.n	8000e46 <AES_Add_Round_Key+0xe>
		}
	}
}
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr
 8000ea4:	200002a4 	.word	0x200002a4

08000ea8 <AES_Sub_Byte>:
*
* Return      : The return is the found byte in the S_Table
*****************************************************************************************
*/
unsigned char AES_Sub_Byte(unsigned char Byte)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
	unsigned char S_Row,S_Collum;
	unsigned char S_Byte;

	//Split byte up in Row and Collum
	S_Row = ((Byte >> 4) & 0x0F);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	091b      	lsrs	r3, r3, #4
 8000eb6:	73fb      	strb	r3, [r7, #15]
	S_Collum = (Byte & 0x0F);
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	f003 030f 	and.w	r3, r3, #15
 8000ebe:	73bb      	strb	r3, [r7, #14]

	//Find the correct byte in the S_Table
	S_Byte = S_Table[S_Row][S_Collum];
 8000ec0:	7bfa      	ldrb	r2, [r7, #15]
 8000ec2:	7bbb      	ldrb	r3, [r7, #14]
 8000ec4:	4906      	ldr	r1, [pc, #24]	@ (8000ee0 <AES_Sub_Byte+0x38>)
 8000ec6:	0112      	lsls	r2, r2, #4
 8000ec8:	440a      	add	r2, r1
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	737b      	strb	r3, [r7, #13]

	return S_Byte;
 8000ed0:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	200000bc 	.word	0x200000bc

08000ee4 <AES_Shift_Rows>:
*****************************************************************************************
* Description : Function that preforms the shift row operation described in the AES standard
*****************************************************************************************
*/
void AES_Shift_Rows()
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0

	//Row 0 doesn't change

	//Shift Row 1 one left
	//Store firt byte in buffer
	Buffer = State[1][0];
 8000eea:	4b1f      	ldr	r3, [pc, #124]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000eec:	791b      	ldrb	r3, [r3, #4]
 8000eee:	71fb      	strb	r3, [r7, #7]
	//Shift all bytes
	State[1][0] = State[1][1];
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000ef2:	795a      	ldrb	r2, [r3, #5]
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000ef6:	711a      	strb	r2, [r3, #4]
	State[1][1] = State[1][2];
 8000ef8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000efa:	799a      	ldrb	r2, [r3, #6]
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000efe:	715a      	strb	r2, [r3, #5]
	State[1][2] = State[1][3];
 8000f00:	4b19      	ldr	r3, [pc, #100]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f02:	79da      	ldrb	r2, [r3, #7]
 8000f04:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f06:	719a      	strb	r2, [r3, #6]
	State[1][3] = Buffer;
 8000f08:	4a17      	ldr	r2, [pc, #92]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	71d3      	strb	r3, [r2, #7]

	//Shift row 2 two left
	Buffer = State[2][0];
 8000f0e:	4b16      	ldr	r3, [pc, #88]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f10:	7a1b      	ldrb	r3, [r3, #8]
 8000f12:	71fb      	strb	r3, [r7, #7]
	State[2][0] = State[2][2];
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f16:	7a9a      	ldrb	r2, [r3, #10]
 8000f18:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f1a:	721a      	strb	r2, [r3, #8]
	State[2][2] = Buffer;
 8000f1c:	4a12      	ldr	r2, [pc, #72]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	7293      	strb	r3, [r2, #10]
	Buffer = State[2][1];
 8000f22:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f24:	7a5b      	ldrb	r3, [r3, #9]
 8000f26:	71fb      	strb	r3, [r7, #7]
	State[2][1] = State[2][3];
 8000f28:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f2a:	7ada      	ldrb	r2, [r3, #11]
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f2e:	725a      	strb	r2, [r3, #9]
	State[2][3] = Buffer;
 8000f30:	4a0d      	ldr	r2, [pc, #52]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	72d3      	strb	r3, [r2, #11]

	//Shift row 3 three left
	Buffer = State[3][3];
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f38:	7bdb      	ldrb	r3, [r3, #15]
 8000f3a:	71fb      	strb	r3, [r7, #7]
	State[3][3] = State[3][2];
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f3e:	7b9a      	ldrb	r2, [r3, #14]
 8000f40:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f42:	73da      	strb	r2, [r3, #15]
	State[3][2] = State[3][1];
 8000f44:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f46:	7b5a      	ldrb	r2, [r3, #13]
 8000f48:	4b07      	ldr	r3, [pc, #28]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f4a:	739a      	strb	r2, [r3, #14]
	State[3][1] = State[3][0];
 8000f4c:	4b06      	ldr	r3, [pc, #24]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f4e:	7b1a      	ldrb	r2, [r3, #12]
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f52:	735a      	strb	r2, [r3, #13]
	State[3][0] = Buffer;
 8000f54:	4a04      	ldr	r2, [pc, #16]	@ (8000f68 <AES_Shift_Rows+0x84>)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	7313      	strb	r3, [r2, #12]
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	200002a4 	.word	0x200002a4

08000f6c <AES_Mix_Collums>:
*****************************************************************************************
* Description : Function that preforms the Mix Collums operation described in the AES standard
*****************************************************************************************
*/
void AES_Mix_Collums()
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b085      	sub	sp, #20
 8000f70:	af00      	add	r7, sp, #0
	unsigned char Row,Collum;
	unsigned char a[4], b[4];
	for(Collum = 0; Collum < 4; Collum++)
 8000f72:	2300      	movs	r3, #0
 8000f74:	73bb      	strb	r3, [r7, #14]
 8000f76:	e082      	b.n	800107e <AES_Mix_Collums+0x112>
	{
		for(Row = 0; Row < 4; Row++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e033      	b.n	8000fe6 <AES_Mix_Collums+0x7a>
		{
			a[Row] = State[Row][Collum];
 8000f7e:	7bf9      	ldrb	r1, [r7, #15]
 8000f80:	7bba      	ldrb	r2, [r7, #14]
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	4843      	ldr	r0, [pc, #268]	@ (8001094 <AES_Mix_Collums+0x128>)
 8000f86:	0089      	lsls	r1, r1, #2
 8000f88:	4401      	add	r1, r0
 8000f8a:	440a      	add	r2, r1
 8000f8c:	7812      	ldrb	r2, [r2, #0]
 8000f8e:	3310      	adds	r3, #16
 8000f90:	443b      	add	r3, r7
 8000f92:	f803 2c08 	strb.w	r2, [r3, #-8]
			b[Row] = (State[Row][Collum] << 1);
 8000f96:	7bfa      	ldrb	r2, [r7, #15]
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	493e      	ldr	r1, [pc, #248]	@ (8001094 <AES_Mix_Collums+0x128>)
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	440a      	add	r2, r1
 8000fa0:	4413      	add	r3, r2
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	0052      	lsls	r2, r2, #1
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	3310      	adds	r3, #16
 8000fac:	443b      	add	r3, r7
 8000fae:	f803 2c0c 	strb.w	r2, [r3, #-12]

			if((State[Row][Collum] & 0x80) == 0x80)
 8000fb2:	7bfa      	ldrb	r2, [r7, #15]
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	4937      	ldr	r1, [pc, #220]	@ (8001094 <AES_Mix_Collums+0x128>)
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	440a      	add	r2, r1
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	da0c      	bge.n	8000fe0 <AES_Mix_Collums+0x74>
			{
				b[Row] = b[Row] ^ 0x1B;
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	3310      	adds	r3, #16
 8000fca:	443b      	add	r3, r7
 8000fcc:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	f082 021b 	eor.w	r2, r2, #27
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	3310      	adds	r3, #16
 8000fda:	443b      	add	r3, r7
 8000fdc:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(Row = 0; Row < 4; Row++)
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	73fb      	strb	r3, [r7, #15]
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d9c8      	bls.n	8000f7e <AES_Mix_Collums+0x12>
			}
		}
		State[0][Collum] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3];
 8000fec:	793a      	ldrb	r2, [r7, #4]
 8000fee:	7a7b      	ldrb	r3, [r7, #9]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	797b      	ldrb	r3, [r7, #5]
 8000ff6:	4053      	eors	r3, r2
 8000ff8:	b2da      	uxtb	r2, r3
 8000ffa:	7abb      	ldrb	r3, [r7, #10]
 8000ffc:	4053      	eors	r3, r2
 8000ffe:	b2d9      	uxtb	r1, r3
 8001000:	7afa      	ldrb	r2, [r7, #11]
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	404a      	eors	r2, r1
 8001006:	b2d1      	uxtb	r1, r2
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <AES_Mix_Collums+0x128>)
 800100a:	54d1      	strb	r1, [r2, r3]
		State[1][Collum] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3];
 800100c:	7a3a      	ldrb	r2, [r7, #8]
 800100e:	797b      	ldrb	r3, [r7, #5]
 8001010:	4053      	eors	r3, r2
 8001012:	b2da      	uxtb	r2, r3
 8001014:	7abb      	ldrb	r3, [r7, #10]
 8001016:	4053      	eors	r3, r2
 8001018:	b2da      	uxtb	r2, r3
 800101a:	79bb      	ldrb	r3, [r7, #6]
 800101c:	4053      	eors	r3, r2
 800101e:	b2d9      	uxtb	r1, r3
 8001020:	7afa      	ldrb	r2, [r7, #11]
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	404a      	eors	r2, r1
 8001026:	b2d1      	uxtb	r1, r2
 8001028:	4a1a      	ldr	r2, [pc, #104]	@ (8001094 <AES_Mix_Collums+0x128>)
 800102a:	4413      	add	r3, r2
 800102c:	460a      	mov	r2, r1
 800102e:	711a      	strb	r2, [r3, #4]
		State[2][Collum] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3];
 8001030:	7a3a      	ldrb	r2, [r7, #8]
 8001032:	7a7b      	ldrb	r3, [r7, #9]
 8001034:	4053      	eors	r3, r2
 8001036:	b2da      	uxtb	r2, r3
 8001038:	79bb      	ldrb	r3, [r7, #6]
 800103a:	4053      	eors	r3, r2
 800103c:	b2da      	uxtb	r2, r3
 800103e:	7afb      	ldrb	r3, [r7, #11]
 8001040:	4053      	eors	r3, r2
 8001042:	b2d9      	uxtb	r1, r3
 8001044:	79fa      	ldrb	r2, [r7, #7]
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	404a      	eors	r2, r1
 800104a:	b2d1      	uxtb	r1, r2
 800104c:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <AES_Mix_Collums+0x128>)
 800104e:	4413      	add	r3, r2
 8001050:	460a      	mov	r2, r1
 8001052:	721a      	strb	r2, [r3, #8]
		State[3][Collum] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3];
 8001054:	7a3a      	ldrb	r2, [r7, #8]
 8001056:	793b      	ldrb	r3, [r7, #4]
 8001058:	4053      	eors	r3, r2
 800105a:	b2da      	uxtb	r2, r3
 800105c:	7a7b      	ldrb	r3, [r7, #9]
 800105e:	4053      	eors	r3, r2
 8001060:	b2da      	uxtb	r2, r3
 8001062:	7abb      	ldrb	r3, [r7, #10]
 8001064:	4053      	eors	r3, r2
 8001066:	b2d9      	uxtb	r1, r3
 8001068:	79fa      	ldrb	r2, [r7, #7]
 800106a:	7bbb      	ldrb	r3, [r7, #14]
 800106c:	404a      	eors	r2, r1
 800106e:	b2d1      	uxtb	r1, r2
 8001070:	4a08      	ldr	r2, [pc, #32]	@ (8001094 <AES_Mix_Collums+0x128>)
 8001072:	4413      	add	r3, r2
 8001074:	460a      	mov	r2, r1
 8001076:	731a      	strb	r2, [r3, #12]
	for(Collum = 0; Collum < 4; Collum++)
 8001078:	7bbb      	ldrb	r3, [r7, #14]
 800107a:	3301      	adds	r3, #1
 800107c:	73bb      	strb	r3, [r7, #14]
 800107e:	7bbb      	ldrb	r3, [r7, #14]
 8001080:	2b03      	cmp	r3, #3
 8001082:	f67f af79 	bls.w	8000f78 <AES_Mix_Collums+0xc>
	}
}
 8001086:	bf00      	nop
 8001088:	bf00      	nop
 800108a:	3714      	adds	r7, #20
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	200002a4 	.word	0x200002a4

08001098 <AES_Calculate_Round_Key>:
* Arguments   :   Round         Number of current Round
*                *Round_Key     16 byte long array holding the Round Key
*****************************************************************************************
*/
void AES_Calculate_Round_Key(unsigned char Round, unsigned char *Round_Key)
{
 8001098:	b590      	push	{r4, r7, lr}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
	unsigned char Buffer;
	unsigned char Rcon;

	//Calculate first Temp
	//Copy laste byte from previous key
	for(i = 0; i < 4; i++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	75fb      	strb	r3, [r7, #23]
 80010a8:	e00c      	b.n	80010c4 <AES_Calculate_Round_Key+0x2c>
	{
		Temp[i] = Round_Key[i+12];
 80010aa:	7dfb      	ldrb	r3, [r7, #23]
 80010ac:	330c      	adds	r3, #12
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	441a      	add	r2, r3
 80010b2:	7dfb      	ldrb	r3, [r7, #23]
 80010b4:	7812      	ldrb	r2, [r2, #0]
 80010b6:	3318      	adds	r3, #24
 80010b8:	443b      	add	r3, r7
 80010ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 80010be:	7dfb      	ldrb	r3, [r7, #23]
 80010c0:	3301      	adds	r3, #1
 80010c2:	75fb      	strb	r3, [r7, #23]
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d9ef      	bls.n	80010aa <AES_Calculate_Round_Key+0x12>
	}

	//Rotate Temp
	Buffer = Temp[0];
 80010ca:	7b3b      	ldrb	r3, [r7, #12]
 80010cc:	753b      	strb	r3, [r7, #20]
	Temp[0] = Temp[1];
 80010ce:	7b7b      	ldrb	r3, [r7, #13]
 80010d0:	733b      	strb	r3, [r7, #12]
	Temp[1] = Temp[2];
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	737b      	strb	r3, [r7, #13]
	Temp[2] = Temp[3];
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	73bb      	strb	r3, [r7, #14]
	Temp[3] = Buffer;
 80010da:	7d3b      	ldrb	r3, [r7, #20]
 80010dc:	73fb      	strb	r3, [r7, #15]

	//Substitute Temp
	for(i = 0; i < 4; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	75fb      	strb	r3, [r7, #23]
 80010e2:	e012      	b.n	800110a <AES_Calculate_Round_Key+0x72>
	{
		Temp[i] = AES_Sub_Byte(Temp[i]);
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	3318      	adds	r3, #24
 80010e8:	443b      	add	r3, r7
 80010ea:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80010ee:	7dfc      	ldrb	r4, [r7, #23]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fed9 	bl	8000ea8 <AES_Sub_Byte>
 80010f6:	4603      	mov	r3, r0
 80010f8:	461a      	mov	r2, r3
 80010fa:	f104 0318 	add.w	r3, r4, #24
 80010fe:	443b      	add	r3, r7
 8001100:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(i = 0; i < 4; i++)
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	3301      	adds	r3, #1
 8001108:	75fb      	strb	r3, [r7, #23]
 800110a:	7dfb      	ldrb	r3, [r7, #23]
 800110c:	2b03      	cmp	r3, #3
 800110e:	d9e9      	bls.n	80010e4 <AES_Calculate_Round_Key+0x4c>
	}

	//Calculate Rcon
	Rcon = 0x01;
 8001110:	2301      	movs	r3, #1
 8001112:	757b      	strb	r3, [r7, #21]
	while(Round != 1)
 8001114:	e010      	b.n	8001138 <AES_Calculate_Round_Key+0xa0>
	{
		b = Rcon & 0x80;
 8001116:	7d7b      	ldrb	r3, [r7, #21]
 8001118:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800111c:	74fb      	strb	r3, [r7, #19]
		Rcon = Rcon << 1;
 800111e:	7d7b      	ldrb	r3, [r7, #21]
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	757b      	strb	r3, [r7, #21]
		if(b == 0x80)
 8001124:	7cfb      	ldrb	r3, [r7, #19]
 8001126:	2b80      	cmp	r3, #128	@ 0x80
 8001128:	d103      	bne.n	8001132 <AES_Calculate_Round_Key+0x9a>
		{
			Rcon = Rcon ^ 0x1b;
 800112a:	7d7b      	ldrb	r3, [r7, #21]
 800112c:	f083 031b 	eor.w	r3, r3, #27
 8001130:	757b      	strb	r3, [r7, #21]
		}
		Round--;
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	3b01      	subs	r3, #1
 8001136:	71fb      	strb	r3, [r7, #7]
	while(Round != 1)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d1eb      	bne.n	8001116 <AES_Calculate_Round_Key+0x7e>
	}

	//XOR Rcon
	Temp[0] = Temp[0] ^ Rcon;
 800113e:	7b3a      	ldrb	r2, [r7, #12]
 8001140:	7d7b      	ldrb	r3, [r7, #21]
 8001142:	4053      	eors	r3, r2
 8001144:	b2db      	uxtb	r3, r3
 8001146:	733b      	strb	r3, [r7, #12]

	//Calculate new key
	for(i = 0; i < 4; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	75fb      	strb	r3, [r7, #23]
 800114c:	e02f      	b.n	80011ae <AES_Calculate_Round_Key+0x116>
	{
		for(j = 0; j < 4; j++)
 800114e:	2300      	movs	r3, #0
 8001150:	75bb      	strb	r3, [r7, #22]
 8001152:	e026      	b.n	80011a2 <AES_Calculate_Round_Key+0x10a>
		{
			Round_Key[j + (4*i)] = Round_Key[j + (4*i)] ^ Temp[j];
 8001154:	7dba      	ldrb	r2, [r7, #22]
 8001156:	7dfb      	ldrb	r3, [r7, #23]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	4413      	add	r3, r2
 800115c:	461a      	mov	r2, r3
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	4413      	add	r3, r2
 8001162:	7819      	ldrb	r1, [r3, #0]
 8001164:	7dbb      	ldrb	r3, [r7, #22]
 8001166:	3318      	adds	r3, #24
 8001168:	443b      	add	r3, r7
 800116a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800116e:	7db8      	ldrb	r0, [r7, #22]
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	4403      	add	r3, r0
 8001176:	4618      	mov	r0, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	4403      	add	r3, r0
 800117c:	404a      	eors	r2, r1
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]
			Temp[j] = Round_Key[j + (4*i)];
 8001182:	7dba      	ldrb	r2, [r7, #22]
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	4413      	add	r3, r2
 800118a:	461a      	mov	r2, r3
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	441a      	add	r2, r3
 8001190:	7dbb      	ldrb	r3, [r7, #22]
 8001192:	7812      	ldrb	r2, [r2, #0]
 8001194:	3318      	adds	r3, #24
 8001196:	443b      	add	r3, r7
 8001198:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(j = 0; j < 4; j++)
 800119c:	7dbb      	ldrb	r3, [r7, #22]
 800119e:	3301      	adds	r3, #1
 80011a0:	75bb      	strb	r3, [r7, #22]
 80011a2:	7dbb      	ldrb	r3, [r7, #22]
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	d9d5      	bls.n	8001154 <AES_Calculate_Round_Key+0xbc>
	for(i = 0; i < 4; i++)
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	3301      	adds	r3, #1
 80011ac:	75fb      	strb	r3, [r7, #23]
 80011ae:	7dfb      	ldrb	r3, [r7, #23]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	d9cc      	bls.n	800114e <AES_Calculate_Round_Key+0xb6>
		}
	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}

080011be <Encrypt_Payload>:
#include "Encrypt_V31.h"
#include "AES-128_V10.h"

void Encrypt_Payload(unsigned char *Data, unsigned char Data_Length, unsigned int Frame_Counter,
                     unsigned char Direction, unsigned char Key[16], unsigned char DevAddr[4])
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b08a      	sub	sp, #40	@ 0x28
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	607a      	str	r2, [r7, #4]
 80011c8:	461a      	mov	r2, r3
 80011ca:	460b      	mov	r3, r1
 80011cc:	72fb      	strb	r3, [r7, #11]
 80011ce:	4613      	mov	r3, r2
 80011d0:	72bb      	strb	r3, [r7, #10]
	unsigned char i = 0x00;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	unsigned char j;
	unsigned char Number_of_Blocks = 0x00;
 80011d8:	2300      	movs	r3, #0
 80011da:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	unsigned char Incomplete_Block_Size = 0x00;
 80011de:	2300      	movs	r3, #0
 80011e0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	unsigned char Block_A[16];

	//Calculate number of blocks
	Number_of_Blocks = Data_Length / 16;
 80011e4:	7afb      	ldrb	r3, [r7, #11]
 80011e6:	091b      	lsrs	r3, r3, #4
 80011e8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	Incomplete_Block_Size = Data_Length % 16;
 80011ec:	7afb      	ldrb	r3, [r7, #11]
 80011ee:	f003 030f 	and.w	r3, r3, #15
 80011f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	if(Incomplete_Block_Size != 0)
 80011f6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d004      	beq.n	8001208 <Encrypt_Payload+0x4a>
	{
		Number_of_Blocks++;
 80011fe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001202:	3301      	adds	r3, #1
 8001204:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}

	for(i = 1; i <= Number_of_Blocks; i++)
 8001208:	2301      	movs	r3, #1
 800120a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800120e:	e07e      	b.n	800130e <Encrypt_Payload+0x150>
	{
		Block_A[0] = 0x01;
 8001210:	2301      	movs	r3, #1
 8001212:	753b      	strb	r3, [r7, #20]
		Block_A[1] = 0x00;
 8001214:	2300      	movs	r3, #0
 8001216:	757b      	strb	r3, [r7, #21]
		Block_A[2] = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	75bb      	strb	r3, [r7, #22]
		Block_A[3] = 0x00;
 800121c:	2300      	movs	r3, #0
 800121e:	75fb      	strb	r3, [r7, #23]
		Block_A[4] = 0x00;
 8001220:	2300      	movs	r3, #0
 8001222:	763b      	strb	r3, [r7, #24]

		Block_A[5] = Direction;
 8001224:	7abb      	ldrb	r3, [r7, #10]
 8001226:	767b      	strb	r3, [r7, #25]

		Block_A[6] = DevAddr[3];
 8001228:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800122a:	78db      	ldrb	r3, [r3, #3]
 800122c:	76bb      	strb	r3, [r7, #26]
		Block_A[7] = DevAddr[2];
 800122e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001230:	789b      	ldrb	r3, [r3, #2]
 8001232:	76fb      	strb	r3, [r7, #27]
		Block_A[8] = DevAddr[1];
 8001234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001236:	785b      	ldrb	r3, [r3, #1]
 8001238:	773b      	strb	r3, [r7, #28]
		Block_A[9] = DevAddr[0];
 800123a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	777b      	strb	r3, [r7, #29]

		Block_A[10] = (Frame_Counter & 0x00FF);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	b2db      	uxtb	r3, r3
 8001244:	77bb      	strb	r3, [r7, #30]
		Block_A[11] = ((Frame_Counter >> 8) & 0x00FF);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	b2db      	uxtb	r3, r3
 800124c:	77fb      	strb	r3, [r7, #31]

		Block_A[12] = 0x00; //Frame counter upper Bytes
 800124e:	2300      	movs	r3, #0
 8001250:	f887 3020 	strb.w	r3, [r7, #32]
		Block_A[13] = 0x00;
 8001254:	2300      	movs	r3, #0
 8001256:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

		Block_A[14] = 0x00;
 800125a:	2300      	movs	r3, #0
 800125c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

		Block_A[15] = i;
 8001260:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001264:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

		//Calculate S
		AES_Encrypt(Block_A, Key);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff fd06 	bl	8000c80 <AES_Encrypt>

		//Check for last block
		if(i != Number_of_Blocks)
 8001274:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001278:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800127c:	429a      	cmp	r2, r3
 800127e:	d01c      	beq.n	80012ba <Encrypt_Payload+0xfc>
		{
			for(j = 0; j < 16; j++)
 8001280:	2300      	movs	r3, #0
 8001282:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001286:	e013      	b.n	80012b0 <Encrypt_Payload+0xf2>
			{
				*Data = *Data ^ Block_A[j];
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	781a      	ldrb	r2, [r3, #0]
 800128c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001290:	3328      	adds	r3, #40	@ 0x28
 8001292:	443b      	add	r3, r7
 8001294:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8001298:	4053      	eors	r3, r2
 800129a:	b2da      	uxtb	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	701a      	strb	r2, [r3, #0]
				Data++;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	3301      	adds	r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < 16; j++)
 80012a6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012aa:	3301      	adds	r3, #1
 80012ac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80012b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012b4:	2b0f      	cmp	r3, #15
 80012b6:	d9e7      	bls.n	8001288 <Encrypt_Payload+0xca>
 80012b8:	e024      	b.n	8001304 <Encrypt_Payload+0x146>
			}
		}
		else
		{
			if(Incomplete_Block_Size == 0)
 80012ba:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <Encrypt_Payload+0x10a>
			{
				Incomplete_Block_Size = 16;
 80012c2:	2310      	movs	r3, #16
 80012c4:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			}
			for(j = 0; j < Incomplete_Block_Size; j++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80012ce:	e013      	b.n	80012f8 <Encrypt_Payload+0x13a>
			{
				*Data = *Data ^ Block_A[j];
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012d8:	3328      	adds	r3, #40	@ 0x28
 80012da:	443b      	add	r3, r7
 80012dc:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80012e0:	4053      	eors	r3, r2
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	701a      	strb	r2, [r3, #0]
				Data++;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	3301      	adds	r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
			for(j = 0; j < Incomplete_Block_Size; j++)
 80012ee:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80012f2:	3301      	adds	r3, #1
 80012f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80012f8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80012fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001300:	429a      	cmp	r2, r3
 8001302:	d3e5      	bcc.n	80012d0 <Encrypt_Payload+0x112>
	for(i = 1; i <= Number_of_Blocks; i++)
 8001304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001308:	3301      	adds	r3, #1
 800130a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800130e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8001312:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001316:	429a      	cmp	r2, r3
 8001318:	f67f af7a 	bls.w	8001210 <Encrypt_Payload+0x52>
			}
		}
	}
}
 800131c:	bf00      	nop
 800131e:	bf00      	nop
 8001320:	3728      	adds	r7, #40	@ 0x28
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <Calculate_MIC>:

void Calculate_MIC(unsigned char *Data, unsigned char *Final_MIC, unsigned char Data_Length, unsigned int Frame_Counter,
                   unsigned char Direction, unsigned char NwkSkey[16], unsigned char DevAddr[4])
{
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b09b      	sub	sp, #108	@ 0x6c
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	603b      	str	r3, [r7, #0]
 8001334:	4613      	mov	r3, r2
 8001336:	71fb      	strb	r3, [r7, #7]
	unsigned char i;
	unsigned char Block_B[16];
	unsigned char Key_K1[16] = {
 8001338:	4bba      	ldr	r3, [pc, #744]	@ (8001624 <Calculate_MIC+0x2fc>)
 800133a:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800133e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001340:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char Key_K2[16] = {
 8001344:	4bb7      	ldr	r3, [pc, #732]	@ (8001624 <Calculate_MIC+0x2fc>)
 8001346:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800134a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800134c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	//unsigned char Data_Copy[16];

	unsigned char Old_Data[16] = {
 8001350:	4bb4      	ldr	r3, [pc, #720]	@ (8001624 <Calculate_MIC+0x2fc>)
 8001352:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 8001356:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};
	unsigned char New_Data[16] = {
 800135c:	4bb1      	ldr	r3, [pc, #708]	@ (8001624 <Calculate_MIC+0x2fc>)
 800135e:	f107 0414 	add.w	r4, r7, #20
 8001362:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001364:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
	};

	unsigned char Number_of_Blocks = 0x00;
 8001368:	2300      	movs	r3, #0
 800136a:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	unsigned char Incomplete_Block_Size = 0x00;
 800136e:	2300      	movs	r3, #0
 8001370:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
	unsigned char Block_Counter = 0x01;
 8001374:	2301      	movs	r3, #1
 8001376:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

	//Create Block_B
	Block_B[0] = 0x49;
 800137a:	2349      	movs	r3, #73	@ 0x49
 800137c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	Block_B[1] = 0x00;
 8001380:	2300      	movs	r3, #0
 8001382:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
	Block_B[2] = 0x00;
 8001386:	2300      	movs	r3, #0
 8001388:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
	Block_B[3] = 0x00;
 800138c:	2300      	movs	r3, #0
 800138e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	Block_B[4] = 0x00;
 8001392:	2300      	movs	r3, #0
 8001394:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58

	Block_B[5] = Direction;
 8001398:	f897 3078 	ldrb.w	r3, [r7, #120]	@ 0x78
 800139c:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59

	Block_B[6] = DevAddr[3];
 80013a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013a4:	78db      	ldrb	r3, [r3, #3]
 80013a6:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
	Block_B[7] = DevAddr[2];
 80013aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013ae:	789b      	ldrb	r3, [r3, #2]
 80013b0:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
	Block_B[8] = DevAddr[1];
 80013b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013b8:	785b      	ldrb	r3, [r3, #1]
 80013ba:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
	Block_B[9] = DevAddr[0];
 80013be:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d

	Block_B[10] = (Frame_Counter & 0x00FF);
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	Block_B[11] = ((Frame_Counter >> 8) & 0x00FF);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	0a1b      	lsrs	r3, r3, #8
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f

	Block_B[12] = 0x00; //Frame counter upper bytes
 80013da:	2300      	movs	r3, #0
 80013dc:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
	Block_B[13] = 0x00;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61

	Block_B[14] = 0x00;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
	Block_B[15] = Data_Length;
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63

	//Calculate number of Blocks and blocksize of last block
	Number_of_Blocks = Data_Length / 16;
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	091b      	lsrs	r3, r3, #4
 80013f6:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	Incomplete_Block_Size = Data_Length % 16;
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 030f 	and.w	r3, r3, #15
 8001400:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64

	if(Incomplete_Block_Size != 0)
 8001404:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001408:	2b00      	cmp	r3, #0
 800140a:	d004      	beq.n	8001416 <Calculate_MIC+0xee>
	{
		Number_of_Blocks++;
 800140c:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8001410:	3301      	adds	r3, #1
 8001412:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
	}

	Generate_Keys(Key_K1, Key_K2, NwkSkey);
 8001416:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800141a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800141e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f901 	bl	8001628 <Generate_Keys>

	//Preform Calculation on Block B0

	//Preform AES encryption
	AES_Encrypt(Block_B, NwkSkey);
 8001426:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800142a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fc27 	bl	8000c80 <AES_Encrypt>

	//Copy Block_B to Old_Data
	for(i = 0; i < 16; i++)
 8001432:	2300      	movs	r3, #0
 8001434:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001438:	e010      	b.n	800145c <Calculate_MIC+0x134>
	{
		Old_Data[i] = Block_B[i];
 800143a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800143e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001442:	3268      	adds	r2, #104	@ 0x68
 8001444:	443a      	add	r2, r7
 8001446:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800144a:	3368      	adds	r3, #104	@ 0x68
 800144c:	443b      	add	r3, r7
 800144e:	f803 2c44 	strb.w	r2, [r3, #-68]
	for(i = 0; i < 16; i++)
 8001452:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001456:	3301      	adds	r3, #1
 8001458:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800145c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001460:	2b0f      	cmp	r3, #15
 8001462:	d9ea      	bls.n	800143a <Calculate_MIC+0x112>
	}

	//Preform full calculating until n-1 messsage blocks
	while(Block_Counter < Number_of_Blocks)
 8001464:	e043      	b.n	80014ee <Calculate_MIC+0x1c6>
	{
		//Copy data into array
		for(i = 0; i < 16; i++)
 8001466:	2300      	movs	r3, #0
 8001468:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800146c:	e00f      	b.n	800148e <Calculate_MIC+0x166>
		{
			New_Data[i] = *Data;
 800146e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	3368      	adds	r3, #104	@ 0x68
 8001478:	443b      	add	r3, r7
 800147a:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	3301      	adds	r3, #1
 8001482:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8001484:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001488:	3301      	adds	r3, #1
 800148a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800148e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001492:	2b0f      	cmp	r3, #15
 8001494:	d9eb      	bls.n	800146e <Calculate_MIC+0x146>
		}

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8001496:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4611      	mov	r1, r2
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 f94a 	bl	800173a <XOR>

		//Preform AES encryption
		AES_Encrypt(New_Data, NwkSkey);
 80014a6:	f107 0314 	add.w	r3, r7, #20
 80014aa:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fbe7 	bl	8000c80 <AES_Encrypt>

		//Copy New_Data to Old_Data
		for(i = 0; i < 16; i++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80014b8:	e010      	b.n	80014dc <Calculate_MIC+0x1b4>
		{
			Old_Data[i] = New_Data[i];
 80014ba:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80014be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80014c2:	3268      	adds	r2, #104	@ 0x68
 80014c4:	443a      	add	r2, r7
 80014c6:	f812 2c54 	ldrb.w	r2, [r2, #-84]
 80014ca:	3368      	adds	r3, #104	@ 0x68
 80014cc:	443b      	add	r3, r7
 80014ce:	f803 2c44 	strb.w	r2, [r3, #-68]
		for(i = 0; i < 16; i++)
 80014d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80014d6:	3301      	adds	r3, #1
 80014d8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80014dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80014e0:	2b0f      	cmp	r3, #15
 80014e2:	d9ea      	bls.n	80014ba <Calculate_MIC+0x192>
		}

		//Raise Block counter
		Block_Counter++;
 80014e4:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 80014e8:	3301      	adds	r3, #1
 80014ea:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
	while(Block_Counter < Number_of_Blocks)
 80014ee:	f897 2065 	ldrb.w	r2, [r7, #101]	@ 0x65
 80014f2:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d3b5      	bcc.n	8001466 <Calculate_MIC+0x13e>
	}

	//Perform calculation on last block
	//Check if Datalength is a multiple of 16
	if(Incomplete_Block_Size == 0)
 80014fa:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d12e      	bne.n	8001560 <Calculate_MIC+0x238>
	{
		//Copy last data into array
		for(i = 0; i < 16; i++)
 8001502:	2300      	movs	r3, #0
 8001504:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001508:	e00f      	b.n	800152a <Calculate_MIC+0x202>
		{
			New_Data[i] = *Data;
 800150a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	7812      	ldrb	r2, [r2, #0]
 8001512:	3368      	adds	r3, #104	@ 0x68
 8001514:	443b      	add	r3, r7
 8001516:	f803 2c54 	strb.w	r2, [r3, #-84]
			Data++;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	3301      	adds	r3, #1
 800151e:	60fb      	str	r3, [r7, #12]
		for(i = 0; i < 16; i++)
 8001520:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001524:	3301      	adds	r3, #1
 8001526:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800152a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800152e:	2b0f      	cmp	r3, #15
 8001530:	d9eb      	bls.n	800150a <Calculate_MIC+0x1e2>
		}

		//Preform XOR with Key 1
		XOR(New_Data,Key_K1);
 8001532:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001536:	f107 0314 	add.w	r3, r7, #20
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f000 f8fc 	bl	800173a <XOR>

		//Preform XOR with old data
		XOR(New_Data,Old_Data);
 8001542:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001546:	f107 0314 	add.w	r3, r7, #20
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f8f4 	bl	800173a <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff fb91 	bl	8000c80 <AES_Encrypt>
 800155e:	e04d      	b.n	80015fc <Calculate_MIC+0x2d4>
	}
	else
	{
		//Copy the remaining data and fill the rest
		for(i =  0; i < 16; i++)
 8001560:	2300      	movs	r3, #0
 8001562:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001566:	e02f      	b.n	80015c8 <Calculate_MIC+0x2a0>
		{
			if(i < Incomplete_Block_Size)
 8001568:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800156c:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001570:	429a      	cmp	r2, r3
 8001572:	d20a      	bcs.n	800158a <Calculate_MIC+0x262>
			{
				New_Data[i] = *Data;
 8001574:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	7812      	ldrb	r2, [r2, #0]
 800157c:	3368      	adds	r3, #104	@ 0x68
 800157e:	443b      	add	r3, r7
 8001580:	f803 2c54 	strb.w	r2, [r3, #-84]
				Data++;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	3301      	adds	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
			}
			if(i == Incomplete_Block_Size)
 800158a:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800158e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8001592:	429a      	cmp	r2, r3
 8001594:	d106      	bne.n	80015a4 <Calculate_MIC+0x27c>
			{
				New_Data[i] = 0x80;
 8001596:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800159a:	3368      	adds	r3, #104	@ 0x68
 800159c:	443b      	add	r3, r7
 800159e:	2280      	movs	r2, #128	@ 0x80
 80015a0:	f803 2c54 	strb.w	r2, [r3, #-84]
			}
			if(i > Incomplete_Block_Size)
 80015a4:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80015a8:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d906      	bls.n	80015be <Calculate_MIC+0x296>
			{
				New_Data[i] = 0x00;
 80015b0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80015b4:	3368      	adds	r3, #104	@ 0x68
 80015b6:	443b      	add	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	f803 2c54 	strb.w	r2, [r3, #-84]
		for(i =  0; i < 16; i++)
 80015be:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80015c2:	3301      	adds	r3, #1
 80015c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80015c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d9cb      	bls.n	8001568 <Calculate_MIC+0x240>
			}
		}

		//Preform XOR with Key 2
		XOR(New_Data,Key_K2);
 80015d0:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f8ad 	bl	800173a <XOR>

		//Preform XOR with Old data
		XOR(New_Data,Old_Data);
 80015e0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	4611      	mov	r1, r2
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 f8a5 	bl	800173a <XOR>

		//Preform last AES routine
		AES_Encrypt(New_Data, NwkSkey);
 80015f0:	f107 0314 	add.w	r3, r7, #20
 80015f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff fb42 	bl	8000c80 <AES_Encrypt>
	}

	Final_MIC[0] = New_Data[0];
 80015fc:	7d3a      	ldrb	r2, [r7, #20]
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	701a      	strb	r2, [r3, #0]
	Final_MIC[1] = New_Data[1];
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	3301      	adds	r3, #1
 8001606:	7d7a      	ldrb	r2, [r7, #21]
 8001608:	701a      	strb	r2, [r3, #0]
	Final_MIC[2] = New_Data[2];
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3302      	adds	r3, #2
 800160e:	7dba      	ldrb	r2, [r7, #22]
 8001610:	701a      	strb	r2, [r3, #0]
	Final_MIC[3] = New_Data[3];
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	3303      	adds	r3, #3
 8001616:	7dfa      	ldrb	r2, [r7, #23]
 8001618:	701a      	strb	r2, [r3, #0]
}
 800161a:	bf00      	nop
 800161c:	376c      	adds	r7, #108	@ 0x6c
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	bf00      	nop
 8001624:	080060c4 	.word	0x080060c4

08001628 <Generate_Keys>:

void Generate_Keys(unsigned char *K1, unsigned char *K2, unsigned char NwkSkey[16])
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
	unsigned char i;
	unsigned char MSB_Key;

	//Encrypt the zeros in K1 with the NwkSkey
	AES_Encrypt(K1, NwkSkey);
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f7ff fb22 	bl	8000c80 <AES_Encrypt>

	//Create K1
	//Check if MSB is 1
	if((K1[0] & 0x80) == 0x80)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b25b      	sxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	da02      	bge.n	800164c <Generate_Keys+0x24>
	{
		MSB_Key = 1;
 8001646:	2301      	movs	r3, #1
 8001648:	75bb      	strb	r3, [r7, #22]
 800164a:	e001      	b.n	8001650 <Generate_Keys+0x28>
	}
	else
	{
		MSB_Key = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K1 one bit left
	Shift_Left(K1);
 8001650:	68f8      	ldr	r0, [r7, #12]
 8001652:	f000 f83c 	bl	80016ce <Shift_Left>

	//if MSB was 1
	if(MSB_Key == 1)
 8001656:	7dbb      	ldrb	r3, [r7, #22]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d109      	bne.n	8001670 <Generate_Keys+0x48>
	{
		K1[15] = K1[15] ^ 0x87;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	330f      	adds	r3, #15
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	320f      	adds	r2, #15
 8001666:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800166a:	43db      	mvns	r3, r3
 800166c:	b2db      	uxtb	r3, r3
 800166e:	7013      	strb	r3, [r2, #0]
	}

	//Copy K1 to K2
	for( i = 0; i < 16; i++)
 8001670:	2300      	movs	r3, #0
 8001672:	75fb      	strb	r3, [r7, #23]
 8001674:	e00a      	b.n	800168c <Generate_Keys+0x64>
	{
		K2[i] = K1[i];
 8001676:	7dfb      	ldrb	r3, [r7, #23]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	441a      	add	r2, r3
 800167c:	7dfb      	ldrb	r3, [r7, #23]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	440b      	add	r3, r1
 8001682:	7812      	ldrb	r2, [r2, #0]
 8001684:	701a      	strb	r2, [r3, #0]
	for( i = 0; i < 16; i++)
 8001686:	7dfb      	ldrb	r3, [r7, #23]
 8001688:	3301      	adds	r3, #1
 800168a:	75fb      	strb	r3, [r7, #23]
 800168c:	7dfb      	ldrb	r3, [r7, #23]
 800168e:	2b0f      	cmp	r3, #15
 8001690:	d9f1      	bls.n	8001676 <Generate_Keys+0x4e>
	}

	//Check if MSB is 1
	if((K2[0] & 0x80) == 0x80)
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	b25b      	sxtb	r3, r3
 8001698:	2b00      	cmp	r3, #0
 800169a:	da02      	bge.n	80016a2 <Generate_Keys+0x7a>
	{
		MSB_Key = 1;
 800169c:	2301      	movs	r3, #1
 800169e:	75bb      	strb	r3, [r7, #22]
 80016a0:	e001      	b.n	80016a6 <Generate_Keys+0x7e>
	}
	else
	{
		MSB_Key = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75bb      	strb	r3, [r7, #22]
	}

	//Shift K2 one bit left
	Shift_Left(K2);
 80016a6:	68b8      	ldr	r0, [r7, #8]
 80016a8:	f000 f811 	bl	80016ce <Shift_Left>

	//Check if MSB was 1
	if(MSB_Key == 1)
 80016ac:	7dbb      	ldrb	r3, [r7, #22]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d109      	bne.n	80016c6 <Generate_Keys+0x9e>
	{
		K2[15] = K2[15] ^ 0x87;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	330f      	adds	r3, #15
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	68ba      	ldr	r2, [r7, #8]
 80016ba:	320f      	adds	r2, #15
 80016bc:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 80016c0:	43db      	mvns	r3, r3
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	7013      	strb	r3, [r2, #0]
	}
}
 80016c6:	bf00      	nop
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <Shift_Left>:

void Shift_Left(unsigned char *Data)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b085      	sub	sp, #20
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
	unsigned char i;
	unsigned char Overflow = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73bb      	strb	r3, [r7, #14]
	//unsigned char High_Byte, Low_Byte;

	for(i = 0; i < 16; i++)
 80016da:	2300      	movs	r3, #0
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	e022      	b.n	8001726 <Shift_Left+0x58>
	{
		//Check for overflow on next byte except for the last byte
		if(i < 15)
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b0e      	cmp	r3, #14
 80016e4:	d80d      	bhi.n	8001702 <Shift_Left+0x34>
		{
			//Check if upper bit is one
			if((Data[i+1] & 0x80) == 0x80)
 80016e6:	7bfb      	ldrb	r3, [r7, #15]
 80016e8:	3301      	adds	r3, #1
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	da02      	bge.n	80016fc <Shift_Left+0x2e>
			{
				Overflow = 1;
 80016f6:	2301      	movs	r3, #1
 80016f8:	73bb      	strb	r3, [r7, #14]
 80016fa:	e004      	b.n	8001706 <Shift_Left+0x38>
			}
			else
			{
				Overflow = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73bb      	strb	r3, [r7, #14]
 8001700:	e001      	b.n	8001706 <Shift_Left+0x38>
			}
		}
		else
		{
			Overflow = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	73bb      	strb	r3, [r7, #14]
		}

		//Shift one left
		Data[i] = (Data[i] << 1) + Overflow;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	b2d9      	uxtb	r1, r3
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	4413      	add	r3, r2
 8001718:	7bba      	ldrb	r2, [r7, #14]
 800171a:	440a      	add	r2, r1
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	3301      	adds	r3, #1
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	2b0f      	cmp	r3, #15
 800172a:	d9d9      	bls.n	80016e0 <Shift_Left+0x12>
	}
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3714      	adds	r7, #20
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <XOR>:

void XOR(unsigned char *New_Data,unsigned char *Old_Data)
{
 800173a:	b480      	push	{r7}
 800173c:	b085      	sub	sp, #20
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
	unsigned char i;

	for(i = 0; i < 16; i++)
 8001744:	2300      	movs	r3, #0
 8001746:	73fb      	strb	r3, [r7, #15]
 8001748:	e010      	b.n	800176c <XOR+0x32>
	{
		New_Data[i] = New_Data[i] ^ Old_Data[i];
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	7819      	ldrb	r1, [r3, #0]
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	4413      	add	r3, r2
 8001758:	781a      	ldrb	r2, [r3, #0]
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	4403      	add	r3, r0
 8001760:	404a      	eors	r2, r1
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < 16; i++)
 8001766:	7bfb      	ldrb	r3, [r7, #15]
 8001768:	3301      	adds	r3, #1
 800176a:	73fb      	strb	r3, [r7, #15]
 800176c:	7bfb      	ldrb	r3, [r7, #15]
 800176e:	2b0f      	cmp	r3, #15
 8001770:	d9eb      	bls.n	800174a <XOR+0x10>
	}
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <read_register>:

#define RFM95_REGISTER_INVERT_IQ_1_RX                    		0x67
#define RFM95_REGISTER_INVERT_IQ_2_RX							0x19

static bool read_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t *buffer, size_t length)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	607a      	str	r2, [r7, #4]
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	460b      	mov	r3, r1
 800178e:	72fb      	strb	r3, [r7, #11]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6858      	ldr	r0, [r3, #4]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	891b      	ldrh	r3, [r3, #8]
 8001798:	2200      	movs	r2, #0
 800179a:	4619      	mov	r1, r3
 800179c:	f001 fe90 	bl	80034c0 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer = (uint8_t)reg & 0x7fu;
 80017a0:	7afb      	ldrb	r3, [r7, #11]
 80017a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	75fb      	strb	r3, [r7, #23]

	if (HAL_SPI_Transmit(handle->spi_handle, &transmit_buffer, 1, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	f107 0117 	add.w	r1, r7, #23
 80017b2:	230a      	movs	r3, #10
 80017b4:	2201      	movs	r2, #1
 80017b6:	f002 fe08 	bl	80043ca <HAL_SPI_Transmit>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <read_register+0x44>
		return false;
 80017c0:	2300      	movs	r3, #0
 80017c2:	e015      	b.n	80017f0 <read_register+0x70>
	}

	if (HAL_SPI_Receive(handle->spi_handle, buffer, length, RFM95_SPI_TIMEOUT) != HAL_OK) {
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	6818      	ldr	r0, [r3, #0]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	230a      	movs	r3, #10
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	f002 ff71 	bl	80046b6 <HAL_SPI_Receive>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <read_register+0x5e>
		return false;
 80017da:	2300      	movs	r3, #0
 80017dc:	e008      	b.n	80017f0 <read_register+0x70>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6858      	ldr	r0, [r3, #4]
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	891b      	ldrh	r3, [r3, #8]
 80017e6:	2201      	movs	r2, #1
 80017e8:	4619      	mov	r1, r3
 80017ea:	f001 fe69 	bl	80034c0 <HAL_GPIO_WritePin>

	return true;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <write_register>:

static bool write_register(rfm95_handle_t *handle, rfm95_register_t reg, uint8_t value)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	460b      	mov	r3, r1
 8001802:	70fb      	strb	r3, [r7, #3]
 8001804:	4613      	mov	r3, r2
 8001806:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_RESET);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6858      	ldr	r0, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	891b      	ldrh	r3, [r3, #8]
 8001810:	2200      	movs	r2, #0
 8001812:	4619      	mov	r1, r3
 8001814:	f001 fe54 	bl	80034c0 <HAL_GPIO_WritePin>

	uint8_t transmit_buffer[2] = {((uint8_t)reg | 0x80u), value};
 8001818:	78fb      	ldrb	r3, [r7, #3]
 800181a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800181e:	b2db      	uxtb	r3, r3
 8001820:	733b      	strb	r3, [r7, #12]
 8001822:	78bb      	ldrb	r3, [r7, #2]
 8001824:	737b      	strb	r3, [r7, #13]

	if (HAL_SPI_Transmit(handle->spi_handle, transmit_buffer, 2, RFM95_SPI_TIMEOUT) != HAL_OK) {
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6818      	ldr	r0, [r3, #0]
 800182a:	f107 010c 	add.w	r1, r7, #12
 800182e:	230a      	movs	r3, #10
 8001830:	2202      	movs	r2, #2
 8001832:	f002 fdca 	bl	80043ca <HAL_SPI_Transmit>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <write_register+0x48>
		return false;
 800183c:	2300      	movs	r3, #0
 800183e:	e008      	b.n	8001852 <write_register+0x5a>
	}

	HAL_GPIO_WritePin(handle->nss_port, handle->nss_pin, GPIO_PIN_SET);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6858      	ldr	r0, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	891b      	ldrh	r3, [r3, #8]
 8001848:	2201      	movs	r2, #1
 800184a:	4619      	mov	r1, r3
 800184c:	f001 fe38 	bl	80034c0 <HAL_GPIO_WritePin>

	return true;
 8001850:	2301      	movs	r3, #1
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <config_set_channel>:

static void config_set_channel(rfm95_handle_t *handle, uint8_t channel_index, uint32_t frequency)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	460b      	mov	r3, r1
 8001866:	607a      	str	r2, [r7, #4]
 8001868:	72fb      	strb	r3, [r7, #11]
	assert(channel_index < 16);
 800186a:	7afb      	ldrb	r3, [r7, #11]
 800186c:	2b0f      	cmp	r3, #15
 800186e:	d905      	bls.n	800187c <config_set_channel+0x20>
 8001870:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <config_set_channel+0x54>)
 8001872:	4a10      	ldr	r2, [pc, #64]	@ (80018b4 <config_set_channel+0x58>)
 8001874:	216d      	movs	r1, #109	@ 0x6d
 8001876:	4810      	ldr	r0, [pc, #64]	@ (80018b8 <config_set_channel+0x5c>)
 8001878:	f003 fc30 	bl	80050dc <__assert_func>
	handle->config.channels[channel_index].frequency = frequency;
 800187c:	7afa      	ldrb	r2, [r7, #11]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	321a      	adds	r2, #26
 8001882:	6879      	ldr	r1, [r7, #4]
 8001884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	handle->config.channel_mask |= (1 << channel_index);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 800188e:	b21a      	sxth	r2, r3
 8001890:	7afb      	ldrb	r3, [r7, #11]
 8001892:	2101      	movs	r1, #1
 8001894:	fa01 f303 	lsl.w	r3, r1, r3
 8001898:	b21b      	sxth	r3, r3
 800189a:	4313      	orrs	r3, r2
 800189c:	b21b      	sxth	r3, r3
 800189e:	b29a      	uxth	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
}
 80018a6:	bf00      	nop
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	080060d4 	.word	0x080060d4
 80018b4:	080063a0 	.word	0x080063a0
 80018b8:	080060e8 	.word	0x080060e8

080018bc <config_load_default>:

static void config_load_default(rfm95_handle_t *handle)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	handle->config.magic = RFM95_EEPROM_CONFIG_MAGIC;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f64a 3267 	movw	r2, #43879	@ 0xab67
 80018ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
	handle->config.tx_frame_count = 0;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
	handle->config.rx_frame_count = 0;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
	handle->config.rx1_delay = 1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
	handle->config.channel_mask = 0;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f8a3 20a8 	strh.w	r2, [r3, #168]	@ 0xa8
	config_set_channel(handle, 0, 868100000);
 80018ee:	4a09      	ldr	r2, [pc, #36]	@ (8001914 <config_load_default+0x58>)
 80018f0:	2100      	movs	r1, #0
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffb2 	bl	800185c <config_set_channel>
	config_set_channel(handle, 1, 868300000);
 80018f8:	4a07      	ldr	r2, [pc, #28]	@ (8001918 <config_load_default+0x5c>)
 80018fa:	2101      	movs	r1, #1
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f7ff ffad 	bl	800185c <config_set_channel>
	config_set_channel(handle, 2, 868500000);
 8001902:	4a06      	ldr	r2, [pc, #24]	@ (800191c <config_load_default+0x60>)
 8001904:	2102      	movs	r1, #2
 8001906:	6878      	ldr	r0, [r7, #4]
 8001908:	f7ff ffa8 	bl	800185c <config_set_channel>
}
 800190c:	bf00      	nop
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	33be27a0 	.word	0x33be27a0
 8001918:	33c134e0 	.word	0x33c134e0
 800191c:	33c44220 	.word	0x33c44220

08001920 <reset>:

static void reset(rfm95_handle_t *handle)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_RESET);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68d8      	ldr	r0, [r3, #12]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	8a1b      	ldrh	r3, [r3, #16]
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	f001 fdc4 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_Delay(1); // 0.1ms would theoretically be enough
 8001938:	2001      	movs	r0, #1
 800193a:	f001 fb19 	bl	8002f70 <HAL_Delay>
	HAL_GPIO_WritePin(handle->nrst_port, handle->nrst_pin, GPIO_PIN_SET);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68d8      	ldr	r0, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	8a1b      	ldrh	r3, [r3, #16]
 8001946:	2201      	movs	r2, #1
 8001948:	4619      	mov	r1, r3
 800194a:	f001 fdb9 	bl	80034c0 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800194e:	2005      	movs	r0, #5
 8001950:	f001 fb0e 	bl	8002f70 <HAL_Delay>
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <configure_frequency>:

static bool configure_frequency(rfm95_handle_t *handle, uint32_t frequency)
{
 800195c:	b5b0      	push	{r4, r5, r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
	// FQ = (FRF * 32 Mhz) / (2 ^ 19)
	uint64_t frf = ((uint64_t)frequency << 19) / 32000000;
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	2000      	movs	r0, #0
 800196a:	460a      	mov	r2, r1
 800196c:	4603      	mov	r3, r0
 800196e:	0b55      	lsrs	r5, r2, #13
 8001970:	04d4      	lsls	r4, r2, #19
 8001972:	4a27      	ldr	r2, [pc, #156]	@ (8001a10 <configure_frequency+0xb4>)
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	4620      	mov	r0, r4
 800197a:	4629      	mov	r1, r5
 800197c:	f7fe fcc8 	bl	8000310 <__aeabi_uldivmod>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!write_register(handle, RFM95_REGISTER_FR_MSB, (uint8_t)(frf >> 16))) return false;
 8001988:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800198c:	f04f 0200 	mov.w	r2, #0
 8001990:	f04f 0300 	mov.w	r3, #0
 8001994:	0c02      	lsrs	r2, r0, #16
 8001996:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800199a:	0c0b      	lsrs	r3, r1, #16
 800199c:	b2d3      	uxtb	r3, r2
 800199e:	461a      	mov	r2, r3
 80019a0:	2106      	movs	r1, #6
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff28 	bl	80017f8 <write_register>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f083 0301 	eor.w	r3, r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <configure_frequency+0x5c>
 80019b4:	2300      	movs	r3, #0
 80019b6:	e026      	b.n	8001a06 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_MID, (uint8_t)(frf >> 8))) return false;
 80019b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	0a02      	lsrs	r2, r0, #8
 80019c6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80019ca:	0a0b      	lsrs	r3, r1, #8
 80019cc:	b2d3      	uxtb	r3, r2
 80019ce:	461a      	mov	r2, r3
 80019d0:	2107      	movs	r1, #7
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ff10 	bl	80017f8 <write_register>
 80019d8:	4603      	mov	r3, r0
 80019da:	f083 0301 	eor.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <configure_frequency+0x8c>
 80019e4:	2300      	movs	r3, #0
 80019e6:	e00e      	b.n	8001a06 <configure_frequency+0xaa>
	if (!write_register(handle, RFM95_REGISTER_FR_LSB, (uint8_t)(frf >> 0))) return false;
 80019e8:	7a3b      	ldrb	r3, [r7, #8]
 80019ea:	461a      	mov	r2, r3
 80019ec:	2108      	movs	r1, #8
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff02 	bl	80017f8 <write_register>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <configure_frequency+0xa8>
 8001a00:	2300      	movs	r3, #0
 8001a02:	e000      	b.n	8001a06 <configure_frequency+0xaa>

	return true;
 8001a04:	2301      	movs	r3, #1
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	01e84800 	.word	0x01e84800

08001a14 <configure_channel>:

static bool configure_channel(rfm95_handle_t *handle, size_t channel_index)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
	assert(handle->config.channel_mask & (1 << channel_index));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8001a24:	461a      	mov	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	fa42 f303 	asr.w	r3, r2, r3
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d105      	bne.n	8001a40 <configure_channel+0x2c>
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <configure_channel+0x48>)
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <configure_channel+0x4c>)
 8001a38:	2194      	movs	r1, #148	@ 0x94
 8001a3a:	480a      	ldr	r0, [pc, #40]	@ (8001a64 <configure_channel+0x50>)
 8001a3c:	f003 fb4e 	bl	80050dc <__assert_func>
	return configure_frequency(handle, handle->config.channels[channel_index].frequency);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	683a      	ldr	r2, [r7, #0]
 8001a44:	321a      	adds	r2, #26
 8001a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f7ff ff85 	bl	800195c <configure_frequency>
 8001a52:	4603      	mov	r3, r0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	08006110 	.word	0x08006110
 8001a60:	080063b4 	.word	0x080063b4
 8001a64:	080060e8 	.word	0x080060e8

08001a68 <wait_for_irq>:

static bool wait_for_irq(rfm95_handle_t *handle, rfm95_interrupt_t interrupt, uint32_t timeout_ms)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	460b      	mov	r3, r1
 8001a72:	607a      	str	r2, [r7, #4]
 8001a74:	72fb      	strb	r3, [r7, #11]
	uint32_t timeout_tick = handle->get_precision_tick() + timeout_ms * handle->precision_tick_frequency / 1000;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a7a:	4798      	blx	r3
 8001a7c:	4601      	mov	r1, r0
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	fb02 f303 	mul.w	r3, r2, r3
 8001a88:	4a0e      	ldr	r2, [pc, #56]	@ (8001ac4 <wait_for_irq+0x5c>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	099b      	lsrs	r3, r3, #6
 8001a90:	440b      	add	r3, r1
 8001a92:	617b      	str	r3, [r7, #20]

	while (handle->interrupt_times[interrupt] == 0) {
 8001a94:	e008      	b.n	8001aa8 <wait_for_irq+0x40>
		if (handle->get_precision_tick() >= timeout_tick) {
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9a:	4798      	blx	r3
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d801      	bhi.n	8001aa8 <wait_for_irq+0x40>
			return false;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	e008      	b.n	8001aba <wait_for_irq+0x52>
	while (handle->interrupt_times[interrupt] == 0) {
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
 8001aaa:	68fa      	ldr	r2, [r7, #12]
 8001aac:	332a      	adds	r3, #42	@ 0x2a
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ee      	beq.n	8001a96 <wait_for_irq+0x2e>
		}
	}

	return true;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	10624dd3 	.word	0x10624dd3

08001ac8 <wait_for_rx_irqs>:

static bool wait_for_rx_irqs(rfm95_handle_t *handle)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ad4:	4798      	blx	r3
 8001ad6:	4602      	mov	r2, r0
	                        RFM95_RECEIVE_TIMEOUT * handle->precision_tick_frequency / 1000;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001adc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001ae0:	fb01 f303 	mul.w	r3, r1, r3
 8001ae4:	4912      	ldr	r1, [pc, #72]	@ (8001b30 <wait_for_rx_irqs+0x68>)
 8001ae6:	fba1 1303 	umull	r1, r3, r1, r3
 8001aea:	099b      	lsrs	r3, r3, #6
	uint32_t timeout_tick = handle->get_precision_tick() +
 8001aec:	4413      	add	r3, r2
 8001aee:	60fb      	str	r3, [r7, #12]

	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8001af0:	e008      	b.n	8001b04 <wait_for_rx_irqs+0x3c>
		if (handle->get_precision_tick() >= timeout_tick) {
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af6:	4798      	blx	r3
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d801      	bhi.n	8001b04 <wait_for_rx_irqs+0x3c>
			return false;
 8001b00:	2300      	movs	r3, #0
 8001b02:	e011      	b.n	8001b28 <wait_for_rx_irqs+0x60>
	while (handle->interrupt_times[RFM95_INTERRUPT_DIO0] == 0 && handle->interrupt_times[RFM95_INTERRUPT_DIO1] == 0) {
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d104      	bne.n	8001b18 <wait_for_rx_irqs+0x50>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d0ec      	beq.n	8001af2 <wait_for_rx_irqs+0x2a>
		}
	}

	return handle->interrupt_times[RFM95_INTERRUPT_DIO0] != 0;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	bf14      	ite	ne
 8001b22:	2301      	movne	r3, #1
 8001b24:	2300      	moveq	r3, #0
 8001b26:	b2db      	uxtb	r3, r3
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	3710      	adds	r7, #16
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	10624dd3 	.word	0x10624dd3

08001b34 <rfm95_set_power>:

bool rfm95_set_power(rfm95_handle_t *handle, int8_t power)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	70fb      	strb	r3, [r7, #3]
	assert((power >= 2 && power <= 17) || power == 20);
 8001b40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	dd03      	ble.n	8001b50 <rfm95_set_power+0x1c>
 8001b48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b4c:	2b11      	cmp	r3, #17
 8001b4e:	dd09      	ble.n	8001b64 <rfm95_set_power+0x30>
 8001b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b54:	2b14      	cmp	r3, #20
 8001b56:	d005      	beq.n	8001b64 <rfm95_set_power+0x30>
 8001b58:	4b2c      	ldr	r3, [pc, #176]	@ (8001c0c <rfm95_set_power+0xd8>)
 8001b5a:	4a2d      	ldr	r2, [pc, #180]	@ (8001c10 <rfm95_set_power+0xdc>)
 8001b5c:	21b5      	movs	r1, #181	@ 0xb5
 8001b5e:	482d      	ldr	r0, [pc, #180]	@ (8001c14 <rfm95_set_power+0xe0>)
 8001b60:	f003 fabc 	bl	80050dc <__assert_func>

	rfm95_register_pa_config_t pa_config = {0};
 8001b64:	2300      	movs	r3, #0
 8001b66:	733b      	strb	r3, [r7, #12]
	uint8_t pa_dac_config = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73fb      	strb	r3, [r7, #15]

	if (power >= 2 && power <= 17) {
 8001b6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	dd18      	ble.n	8001ba6 <rfm95_set_power+0x72>
 8001b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b78:	2b11      	cmp	r3, #17
 8001b7a:	dc14      	bgt.n	8001ba6 <rfm95_set_power+0x72>
		pa_config.max_power = 7;
 8001b7c:	7b3b      	ldrb	r3, [r7, #12]
 8001b7e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001b82:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001b84:	7b3b      	ldrb	r3, [r7, #12]
 8001b86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b8a:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = (power - 2);
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	3b02      	subs	r3, #2
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	7b3b      	ldrb	r3, [r7, #12]
 8001b9a:	f362 0303 	bfi	r3, r2, #0, #4
 8001b9e:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_LOW_POWER;
 8001ba0:	2384      	movs	r3, #132	@ 0x84
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e011      	b.n	8001bca <rfm95_set_power+0x96>

	} else if (power == 20) {
 8001ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001baa:	2b14      	cmp	r3, #20
 8001bac:	d10d      	bne.n	8001bca <rfm95_set_power+0x96>
		pa_config.max_power = 7;
 8001bae:	7b3b      	ldrb	r3, [r7, #12]
 8001bb0:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8001bb4:	733b      	strb	r3, [r7, #12]
		pa_config.pa_select = 1;
 8001bb6:	7b3b      	ldrb	r3, [r7, #12]
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001bbc:	733b      	strb	r3, [r7, #12]
		pa_config.output_power = 15;
 8001bbe:	7b3b      	ldrb	r3, [r7, #12]
 8001bc0:	f043 030f 	orr.w	r3, r3, #15
 8001bc4:	733b      	strb	r3, [r7, #12]
		pa_dac_config = RFM95_REGISTER_PA_DAC_HIGH_POWER;
 8001bc6:	2387      	movs	r3, #135	@ 0x87
 8001bc8:	73fb      	strb	r3, [r7, #15]
	}

	if (!write_register(handle, RFM95_REGISTER_PA_CONFIG, pa_config.buffer)) return false;
 8001bca:	7b3b      	ldrb	r3, [r7, #12]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	2109      	movs	r1, #9
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff fe11 	bl	80017f8 <write_register>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f083 0301 	eor.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <rfm95_set_power+0xb2>
 8001be2:	2300      	movs	r3, #0
 8001be4:	e00e      	b.n	8001c04 <rfm95_set_power+0xd0>
	if (!write_register(handle, RFM95_REGISTER_PA_DAC, pa_dac_config)) return false;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
 8001be8:	461a      	mov	r2, r3
 8001bea:	214d      	movs	r1, #77	@ 0x4d
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff fe03 	bl	80017f8 <write_register>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f083 0301 	eor.w	r3, r3, #1
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <rfm95_set_power+0xce>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	e000      	b.n	8001c04 <rfm95_set_power+0xd0>

	return true;
 8001c02:	2301      	movs	r3, #1
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	08006144 	.word	0x08006144
 8001c10:	080063c8 	.word	0x080063c8
 8001c14:	080060e8 	.word	0x080060e8

08001c18 <rfm95_init>:

bool rfm95_init(rfm95_handle_t *handle)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
	assert(handle->spi_handle->Init.Mode == SPI_MODE_MASTER);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001c2a:	d005      	beq.n	8001c38 <rfm95_init+0x20>
 8001c2c:	4b9a      	ldr	r3, [pc, #616]	@ (8001e98 <rfm95_init+0x280>)
 8001c2e:	4a9b      	ldr	r2, [pc, #620]	@ (8001e9c <rfm95_init+0x284>)
 8001c30:	21cf      	movs	r1, #207	@ 0xcf
 8001c32:	489b      	ldr	r0, [pc, #620]	@ (8001ea0 <rfm95_init+0x288>)
 8001c34:	f003 fa52 	bl	80050dc <__assert_func>
	assert(handle->spi_handle->Init.Direction == SPI_DIRECTION_2LINES);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <rfm95_init+0x36>
 8001c42:	4b98      	ldr	r3, [pc, #608]	@ (8001ea4 <rfm95_init+0x28c>)
 8001c44:	4a95      	ldr	r2, [pc, #596]	@ (8001e9c <rfm95_init+0x284>)
 8001c46:	21d0      	movs	r1, #208	@ 0xd0
 8001c48:	4895      	ldr	r0, [pc, #596]	@ (8001ea0 <rfm95_init+0x288>)
 8001c4a:	f003 fa47 	bl	80050dc <__assert_func>
	assert(handle->spi_handle->Init.DataSize == SPI_DATASIZE_8BIT);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8001c58:	d005      	beq.n	8001c66 <rfm95_init+0x4e>
 8001c5a:	4b93      	ldr	r3, [pc, #588]	@ (8001ea8 <rfm95_init+0x290>)
 8001c5c:	4a8f      	ldr	r2, [pc, #572]	@ (8001e9c <rfm95_init+0x284>)
 8001c5e:	21d1      	movs	r1, #209	@ 0xd1
 8001c60:	488f      	ldr	r0, [pc, #572]	@ (8001ea0 <rfm95_init+0x288>)
 8001c62:	f003 fa3b 	bl	80050dc <__assert_func>
	assert(handle->spi_handle->Init.CLKPolarity == SPI_POLARITY_LOW);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <rfm95_init+0x64>
 8001c70:	4b8e      	ldr	r3, [pc, #568]	@ (8001eac <rfm95_init+0x294>)
 8001c72:	4a8a      	ldr	r2, [pc, #552]	@ (8001e9c <rfm95_init+0x284>)
 8001c74:	21d2      	movs	r1, #210	@ 0xd2
 8001c76:	488a      	ldr	r0, [pc, #552]	@ (8001ea0 <rfm95_init+0x288>)
 8001c78:	f003 fa30 	bl	80050dc <__assert_func>
	assert(handle->spi_handle->Init.CLKPhase == SPI_PHASE_1EDGE);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <rfm95_init+0x7a>
 8001c86:	4b8a      	ldr	r3, [pc, #552]	@ (8001eb0 <rfm95_init+0x298>)
 8001c88:	4a84      	ldr	r2, [pc, #528]	@ (8001e9c <rfm95_init+0x284>)
 8001c8a:	21d3      	movs	r1, #211	@ 0xd3
 8001c8c:	4884      	ldr	r0, [pc, #528]	@ (8001ea0 <rfm95_init+0x288>)
 8001c8e:	f003 fa25 	bl	80050dc <__assert_func>
	assert(handle->get_precision_tick != NULL);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d105      	bne.n	8001ca6 <rfm95_init+0x8e>
 8001c9a:	4b86      	ldr	r3, [pc, #536]	@ (8001eb4 <rfm95_init+0x29c>)
 8001c9c:	4a7f      	ldr	r2, [pc, #508]	@ (8001e9c <rfm95_init+0x284>)
 8001c9e:	21d4      	movs	r1, #212	@ 0xd4
 8001ca0:	487f      	ldr	r0, [pc, #508]	@ (8001ea0 <rfm95_init+0x288>)
 8001ca2:	f003 fa1b 	bl	80050dc <__assert_func>
	assert(handle->random_int != NULL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d105      	bne.n	8001cba <rfm95_init+0xa2>
 8001cae:	4b82      	ldr	r3, [pc, #520]	@ (8001eb8 <rfm95_init+0x2a0>)
 8001cb0:	4a7a      	ldr	r2, [pc, #488]	@ (8001e9c <rfm95_init+0x284>)
 8001cb2:	21d5      	movs	r1, #213	@ 0xd5
 8001cb4:	487a      	ldr	r0, [pc, #488]	@ (8001ea0 <rfm95_init+0x288>)
 8001cb6:	f003 fa11 	bl	80050dc <__assert_func>
	assert(handle->precision_sleep_until != NULL);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d105      	bne.n	8001cce <rfm95_init+0xb6>
 8001cc2:	4b7e      	ldr	r3, [pc, #504]	@ (8001ebc <rfm95_init+0x2a4>)
 8001cc4:	4a75      	ldr	r2, [pc, #468]	@ (8001e9c <rfm95_init+0x284>)
 8001cc6:	21d6      	movs	r1, #214	@ 0xd6
 8001cc8:	4875      	ldr	r0, [pc, #468]	@ (8001ea0 <rfm95_init+0x288>)
 8001cca:	f003 fa07 	bl	80050dc <__assert_func>
	assert(handle->precision_tick_frequency > 10000);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d805      	bhi.n	8001ce6 <rfm95_init+0xce>
 8001cda:	4b79      	ldr	r3, [pc, #484]	@ (8001ec0 <rfm95_init+0x2a8>)
 8001cdc:	4a6f      	ldr	r2, [pc, #444]	@ (8001e9c <rfm95_init+0x284>)
 8001cde:	21d7      	movs	r1, #215	@ 0xd7
 8001ce0:	486f      	ldr	r0, [pc, #444]	@ (8001ea0 <rfm95_init+0x288>)
 8001ce2:	f003 f9fb 	bl	80050dc <__assert_func>

	reset(handle);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff fe1a 	bl	8001920 <reset>

	// If there is reload function or the reload was unsuccessful or the magic does not match restore default.
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d012      	beq.n	8001d1a <rfm95_init+0x102>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	3260      	adds	r2, #96	@ 0x60
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4798      	blx	r3
 8001d00:	4603      	mov	r3, r0
 8001d02:	f083 0301 	eor.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d106      	bne.n	8001d1a <rfm95_init+0x102>
	    handle->config.magic != RFM95_EEPROM_CONFIG_MAGIC) {
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
	if (handle->reload_config == NULL || !handle->reload_config(&handle->config) ||
 8001d12:	f64a 3267 	movw	r2, #43879	@ 0xab67
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d002      	beq.n	8001d20 <rfm95_init+0x108>
		config_load_default(handle);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff fdce 	bl	80018bc <config_load_default>
	}

	// Check for correct version.
	uint8_t version;
	if (!read_register(handle, RFM95_REGISTER_VERSION, &version, 1)) return false;
 8001d20:	f107 020f 	add.w	r2, r7, #15
 8001d24:	2301      	movs	r3, #1
 8001d26:	2142      	movs	r1, #66	@ 0x42
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff fd29 	bl	8001780 <read_register>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f083 0301 	eor.w	r3, r3, #1
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <rfm95_init+0x126>
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	e0a7      	b.n	8001e8e <rfm95_init+0x276>
	if (version != RFM9x_VER) return false;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
 8001d40:	2b12      	cmp	r3, #18
 8001d42:	d001      	beq.n	8001d48 <rfm95_init+0x130>
 8001d44:	2300      	movs	r3, #0
 8001d46:	e0a2      	b.n	8001e8e <rfm95_init+0x276>

	// Module must be placed in sleep mode before switching to lora.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_SLEEP)) return false;
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff fd53 	bl	80017f8 <write_register>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f083 0301 	eor.w	r3, r3, #1
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <rfm95_init+0x14a>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	e095      	b.n	8001e8e <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001d62:	2280      	movs	r2, #128	@ 0x80
 8001d64:	2101      	movs	r1, #1
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f7ff fd46 	bl	80017f8 <write_register>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f083 0301 	eor.w	r3, r3, #1
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <rfm95_init+0x164>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e088      	b.n	8001e8e <rfm95_init+0x276>

	// Default interrupt configuration, must be done to prevent DIO5 clock interrupts at 1Mhz
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	2140      	movs	r1, #64	@ 0x40
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff fd39 	bl	80017f8 <write_register>
 8001d86:	4603      	mov	r3, r0
 8001d88:	f083 0301 	eor.w	r3, r3, #1
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <rfm95_init+0x17e>
 8001d92:	2300      	movs	r3, #0
 8001d94:	e07b      	b.n	8001e8e <rfm95_init+0x276>

	if (handle->on_after_interrupts_configured != NULL) {
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <rfm95_init+0x18c>
		handle->on_after_interrupts_configured();
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001da2:	4798      	blx	r3
	}

	// Set module power to 17dbm.
	if (!rfm95_set_power(handle, 17)) return false;
 8001da4:	2111      	movs	r1, #17
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff fec4 	bl	8001b34 <rfm95_set_power>
 8001dac:	4603      	mov	r3, r0
 8001dae:	f083 0301 	eor.w	r3, r3, #1
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <rfm95_init+0x1a4>
 8001db8:	2300      	movs	r3, #0
 8001dba:	e068      	b.n	8001e8e <rfm95_init+0x276>

	// Set LNA to the highest gain with 150% boost.
	if (!write_register(handle, RFM95_REGISTER_LNA, 0x23)) return false;
 8001dbc:	2223      	movs	r2, #35	@ 0x23
 8001dbe:	210c      	movs	r1, #12
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f7ff fd19 	bl	80017f8 <write_register>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f083 0301 	eor.w	r3, r3, #1
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <rfm95_init+0x1be>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	e05b      	b.n	8001e8e <rfm95_init+0x276>

	// Preamble set to 8 + 4.25 = 12.25 symbols.
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_MSB, 0x00)) return false;
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	2120      	movs	r1, #32
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f7ff fd0c 	bl	80017f8 <write_register>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f083 0301 	eor.w	r3, r3, #1
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <rfm95_init+0x1d8>
 8001dec:	2300      	movs	r3, #0
 8001dee:	e04e      	b.n	8001e8e <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_PREAMBLE_LSB, 0x08)) return false;
 8001df0:	2208      	movs	r2, #8
 8001df2:	2121      	movs	r1, #33	@ 0x21
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff fcff 	bl	80017f8 <write_register>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	f083 0301 	eor.w	r3, r3, #1
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <rfm95_init+0x1f2>
 8001e06:	2300      	movs	r3, #0
 8001e08:	e041      	b.n	8001e8e <rfm95_init+0x276>

	// Set TTN sync word 0x34.
	if (!write_register(handle, RFM95_REGISTER_SYNC_WORD, 0x34)) return false;
 8001e0a:	2234      	movs	r2, #52	@ 0x34
 8001e0c:	2139      	movs	r1, #57	@ 0x39
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f7ff fcf2 	bl	80017f8 <write_register>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f083 0301 	eor.w	r3, r3, #1
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <rfm95_init+0x20c>
 8001e20:	2300      	movs	r3, #0
 8001e22:	e034      	b.n	8001e8e <rfm95_init+0x276>

	// Set up TX and RX FIFO base addresses.
	if (!write_register(handle, RFM95_REGISTER_FIFO_TX_BASE_ADDR, 0x80)) return false;
 8001e24:	2280      	movs	r2, #128	@ 0x80
 8001e26:	210e      	movs	r1, #14
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff fce5 	bl	80017f8 <write_register>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f083 0301 	eor.w	r3, r3, #1
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <rfm95_init+0x226>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	e027      	b.n	8001e8e <rfm95_init+0x276>
	if (!write_register(handle, RFM95_REGISTER_FIFO_RX_BASE_ADDR, 0x00)) return false;
 8001e3e:	2200      	movs	r2, #0
 8001e40:	210f      	movs	r1, #15
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fcd8 	bl	80017f8 <write_register>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	f083 0301 	eor.w	r3, r3, #1
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d001      	beq.n	8001e58 <rfm95_init+0x240>
 8001e54:	2300      	movs	r3, #0
 8001e56:	e01a      	b.n	8001e8e <rfm95_init+0x276>

	// Maximum payload length of the RFM95 is 64.
	if (!write_register(handle, RFM95_REGISTER_MAX_PAYLOAD_LENGTH, 64)) return false;
 8001e58:	2240      	movs	r2, #64	@ 0x40
 8001e5a:	2123      	movs	r1, #35	@ 0x23
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff fccb 	bl	80017f8 <write_register>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f083 0301 	eor.w	r3, r3, #1
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <rfm95_init+0x25a>
 8001e6e:	2300      	movs	r3, #0
 8001e70:	e00d      	b.n	8001e8e <rfm95_init+0x276>

	// Let module sleep after initialisation.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8001e72:	2280      	movs	r2, #128	@ 0x80
 8001e74:	2101      	movs	r1, #1
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f7ff fcbe 	bl	80017f8 <write_register>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	f083 0301 	eor.w	r3, r3, #1
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <rfm95_init+0x274>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	e000      	b.n	8001e8e <rfm95_init+0x276>

	return true;
 8001e8c:	2301      	movs	r3, #1
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	08006170 	.word	0x08006170
 8001e9c:	080063d8 	.word	0x080063d8
 8001ea0:	080060e8 	.word	0x080060e8
 8001ea4:	080061a4 	.word	0x080061a4
 8001ea8:	080061e0 	.word	0x080061e0
 8001eac:	08006218 	.word	0x08006218
 8001eb0:	08006254 	.word	0x08006254
 8001eb4:	0800628c 	.word	0x0800628c
 8001eb8:	080062b0 	.word	0x080062b0
 8001ebc:	080062cc 	.word	0x080062cc
 8001ec0:	080062f4 	.word	0x080062f4

08001ec4 <process_mac_commands>:

static bool process_mac_commands(rfm95_handle_t *handle, const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t answer_buffer[51], uint8_t *answer_buffer_length,
                                 int8_t snr)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b08c      	sub	sp, #48	@ 0x30
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
	uint8_t index = 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t answer_index = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	while (index < frame_payload_length) {
 8001ede:	e1dd      	b.n	800229c <process_mac_commands+0x3d8>
		switch (frame_payload[index++])
 8001ee0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ee4:	1c5a      	adds	r2, r3, #1
 8001ee6:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001eea:	461a      	mov	r2, r3
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4413      	add	r3, r2
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	f200 81d1 	bhi.w	800229c <process_mac_commands+0x3d8>
 8001efa:	a201      	add	r2, pc, #4	@ (adr r2, 8001f00 <process_mac_commands+0x3c>)
 8001efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f00:	08001f35 	.word	0x08001f35
 8001f04:	08001f4f 	.word	0x08001f4f
 8001f08:	08001f6d 	.word	0x08001f6d
 8001f0c:	08001f8b 	.word	0x08001f8b
 8001f10:	08001fa5 	.word	0x08001fa5
 8001f14:	08002053 	.word	0x08002053
 8001f18:	080020c1 	.word	0x080020c1
 8001f1c:	080021f3 	.word	0x080021f3
 8001f20:	08002253 	.word	0x08002253
 8001f24:	08002261 	.word	0x08002261
 8001f28:	08002273 	.word	0x08002273
 8001f2c:	08002281 	.word	0x08002281
 8001f30:	0800229d 	.word	0x0800229d
		{
			case 0x01: // ResetConf
			{
				if (index >= frame_payload_length) return false;
 8001f34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d801      	bhi.n	8001f42 <process_mac_commands+0x7e>
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e1b7      	b.n	80022b2 <process_mac_commands+0x3ee>

				index += 1;
 8001f42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f46:	3301      	adds	r3, #1
 8001f48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8001f4c:	e1a6      	b.n	800229c <process_mac_commands+0x3d8>
			}
			case 0x02: // LinkCheckReq
			{
				if ((index + 1) >= frame_payload_length) return false;
 8001f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f52:	3301      	adds	r3, #1
 8001f54:	461a      	mov	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d801      	bhi.n	8001f60 <process_mac_commands+0x9c>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	e1a8      	b.n	80022b2 <process_mac_commands+0x3ee>

				index += 2;
 8001f60:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f64:	3302      	adds	r3, #2
 8001f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8001f6a:	e197      	b.n	800229c <process_mac_commands+0x3d8>
			}
			case 0x03: // LinkADRReq
			{
				if ((index + 3) >= frame_payload_length) return false;
 8001f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f70:	3303      	adds	r3, #3
 8001f72:	461a      	mov	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d801      	bhi.n	8001f7e <process_mac_commands+0xba>
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	e199      	b.n	80022b2 <process_mac_commands+0x3ee>

				index += 4;
 8001f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f82:	3304      	adds	r3, #4
 8001f84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8001f88:	e188      	b.n	800229c <process_mac_commands+0x3d8>
			}
			case 0x04: // DutyCycleReq
			{
				if (index >= frame_payload_length) return false;
 8001f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f8e:	687a      	ldr	r2, [r7, #4]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d801      	bhi.n	8001f98 <process_mac_commands+0xd4>
 8001f94:	2300      	movs	r3, #0
 8001f96:	e18c      	b.n	80022b2 <process_mac_commands+0x3ee>

				index += 1;
 8001f98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				break;
 8001fa2:	e17b      	b.n	800229c <process_mac_commands+0x3d8>
			}
			case 0x05: // RXParamSetupReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8001fa4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fa8:	3304      	adds	r3, #4
 8001faa:	461a      	mov	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d801      	bhi.n	8001fb6 <process_mac_commands+0xf2>
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e17d      	b.n	80022b2 <process_mac_commands+0x3ee>
				if ((answer_index + 2) >= 51) return false;
 8001fb6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8001fba:	2b30      	cmp	r3, #48	@ 0x30
 8001fbc:	d901      	bls.n	8001fc2 <process_mac_commands+0xfe>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e177      	b.n	80022b2 <process_mac_commands+0x3ee>

				uint8_t dl_settings = frame_payload[index++];
 8001fc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001fcc:	461a      	mov	r2, r3
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	77bb      	strb	r3, [r7, #30]
				uint8_t frequency_lsb = frame_payload[index++];
 8001fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001fe0:	461a      	mov	r2, r3
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	777b      	strb	r3, [r7, #29]
				uint8_t frequency_msb = frame_payload[index++];
 8001fea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fee:	1c5a      	adds	r2, r3, #1
 8001ff0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	773b      	strb	r3, [r7, #28]
				uint8_t frequency_hsb = frame_payload[index++];
 8001ffe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	4413      	add	r3, r2
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	76fb      	strb	r3, [r7, #27]
				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 8002012:	7f7a      	ldrb	r2, [r7, #29]
 8002014:	7f3b      	ldrb	r3, [r7, #28]
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	431a      	orrs	r2, r3
 800201a:	7efb      	ldrb	r3, [r7, #27]
 800201c:	041b      	lsls	r3, r3, #16
 800201e:	4313      	orrs	r3, r2
 8002020:	2264      	movs	r2, #100	@ 0x64
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]

				answer_buffer[answer_index++] = 0x05;
 8002028:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002032:	461a      	mov	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	2205      	movs	r2, #5
 800203a:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0b0000111;
 800203c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002046:	461a      	mov	r2, r3
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	4413      	add	r3, r2
 800204c:	2207      	movs	r2, #7
 800204e:	701a      	strb	r2, [r3, #0]
				break;
 8002050:	e124      	b.n	800229c <process_mac_commands+0x3d8>
			}
			case 0x06: // DevStatusReq
			{
				if ((answer_index + 3) >= 51) return false;
 8002052:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002056:	2b2f      	cmp	r3, #47	@ 0x2f
 8002058:	d901      	bls.n	800205e <process_mac_commands+0x19a>
 800205a:	2300      	movs	r3, #0
 800205c:	e129      	b.n	80022b2 <process_mac_commands+0x3ee>

				uint8_t margin = (uint8_t)(snr & 0x1f);
 800205e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	f887 3020 	strb.w	r3, [r7, #32]
				uint8_t battery_level = handle->get_battery_level == NULL ? 0xff : handle->get_battery_level();
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800206e:	2b00      	cmp	r3, #0
 8002070:	d004      	beq.n	800207c <process_mac_commands+0x1b8>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002076:	4798      	blx	r3
 8002078:	4603      	mov	r3, r0
 800207a:	e000      	b.n	800207e <process_mac_commands+0x1ba>
 800207c:	23ff      	movs	r3, #255	@ 0xff
 800207e:	77fb      	strb	r3, [r7, #31]

				answer_buffer[answer_index++] = 0x06;
 8002080:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002084:	1c5a      	adds	r2, r3, #1
 8002086:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800208a:	461a      	mov	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4413      	add	r3, r2
 8002090:	2206      	movs	r2, #6
 8002092:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = battery_level;
 8002094:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800209e:	461a      	mov	r2, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	7ffa      	ldrb	r2, [r7, #31]
 80020a6:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = margin;
 80020a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80020b2:	461a      	mov	r2, r3
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4413      	add	r3, r2
 80020b8:	f897 2020 	ldrb.w	r2, [r7, #32]
 80020bc:	701a      	strb	r2, [r3, #0]
				break;
 80020be:	e0ed      	b.n	800229c <process_mac_commands+0x3d8>
			}
			case 0x07: // NewChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 80020c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020c4:	3304      	adds	r3, #4
 80020c6:	461a      	mov	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d801      	bhi.n	80020d2 <process_mac_commands+0x20e>
 80020ce:	2300      	movs	r3, #0
 80020d0:	e0ef      	b.n	80022b2 <process_mac_commands+0x3ee>
				if ((answer_index + 2) >= 51) return false;
 80020d2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80020d6:	2b30      	cmp	r3, #48	@ 0x30
 80020d8:	d901      	bls.n	80020de <process_mac_commands+0x21a>
 80020da:	2300      	movs	r3, #0
 80020dc:	e0e9      	b.n	80022b2 <process_mac_commands+0x3ee>

				uint8_t channel_index = frame_payload[index++];
 80020de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80020e8:	461a      	mov	r2, r3
 80020ea:	68bb      	ldr	r3, [r7, #8]
 80020ec:	4413      	add	r3, r2
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
				uint8_t frequency_lsb = frame_payload[index++];
 80020f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020f8:	1c5a      	adds	r2, r3, #1
 80020fa:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	4413      	add	r3, r2
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
				uint8_t frequency_msb = frame_payload[index++];
 800210a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800210e:	1c5a      	adds	r2, r3, #1
 8002110:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	4413      	add	r3, r2
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
				uint8_t frequency_hsb = frame_payload[index++];
 8002120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 800212a:	461a      	mov	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4413      	add	r3, r2
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
				uint8_t min_max_dr = frame_payload[index++];
 8002136:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800213a:	1c5a      	adds	r2, r3, #1
 800213c:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002140:	461a      	mov	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	4413      	add	r3, r2
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

				uint32_t frequency = (frequency_lsb | (frequency_msb << 8) | (frequency_hsb << 16)) * 100;
 800214c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002150:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002154:	021b      	lsls	r3, r3, #8
 8002156:	431a      	orrs	r2, r3
 8002158:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800215c:	041b      	lsls	r3, r3, #16
 800215e:	4313      	orrs	r3, r2
 8002160:	2264      	movs	r2, #100	@ 0x64
 8002162:	fb02 f303 	mul.w	r3, r2, r3
 8002166:	627b      	str	r3, [r7, #36]	@ 0x24
				uint8_t min_dr = min_max_dr & 0x0f;
 8002168:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800216c:	f003 030f 	and.w	r3, r3, #15
 8002170:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
				uint8_t max_dr = (min_max_dr >> 4) & 0x0f;
 8002174:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

				if (channel_index >= 3) {
 800217e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8002182:	2b02      	cmp	r3, #2
 8002184:	d906      	bls.n	8002194 <process_mac_commands+0x2d0>
					config_set_channel(handle, channel_index, frequency);
 8002186:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800218a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800218c:	4619      	mov	r1, r3
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f7ff fb64 	bl	800185c <config_set_channel>
				}

				bool dr_supports_125kHz_SF7 = min_dr <= 5 || max_dr >= 5;
 8002194:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002198:	2b05      	cmp	r3, #5
 800219a:	d903      	bls.n	80021a4 <process_mac_commands+0x2e0>
 800219c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021a0:	2b04      	cmp	r3, #4
 80021a2:	d901      	bls.n	80021a8 <process_mac_commands+0x2e4>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <process_mac_commands+0x2e6>
 80021a8:	2300      	movs	r3, #0
 80021aa:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 80021ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

				answer_buffer[answer_index++] = 0x07;
 80021ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80021c4:	461a      	mov	r2, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	4413      	add	r3, r2
 80021ca:	2207      	movs	r2, #7
 80021cc:	701a      	strb	r2, [r3, #0]
				answer_buffer[answer_index++] = 0x01 | (dr_supports_125kHz_SF7 << 1);
 80021ce:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	b25b      	sxtb	r3, r3
 80021d6:	f043 0301 	orr.w	r3, r3, #1
 80021da:	b25a      	sxtb	r2, r3
 80021dc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80021e0:	1c59      	adds	r1, r3, #1
 80021e2:	f887 102e 	strb.w	r1, [r7, #46]	@ 0x2e
 80021e6:	4619      	mov	r1, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	440b      	add	r3, r1
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	701a      	strb	r2, [r3, #0]
				break;
 80021f0:	e054      	b.n	800229c <process_mac_commands+0x3d8>
			}
			case 0x08: // RXTimingSetupReq
			{
				if (index >= frame_payload_length) return false;
 80021f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d801      	bhi.n	8002200 <process_mac_commands+0x33c>
 80021fc:	2300      	movs	r3, #0
 80021fe:	e058      	b.n	80022b2 <process_mac_commands+0x3ee>
				if ((answer_index + 2) >= 51) return false;
 8002200:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002204:	2b30      	cmp	r3, #48	@ 0x30
 8002206:	d901      	bls.n	800220c <process_mac_commands+0x348>
 8002208:	2300      	movs	r3, #0
 800220a:	e052      	b.n	80022b2 <process_mac_commands+0x3ee>

				handle->config.rx1_delay = frame_payload[index++] & 0xf;
 800220c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8002216:	461a      	mov	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4413      	add	r3, r2
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	b2da      	uxtb	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				if (handle->config.rx1_delay == 0) {
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8002230:	2b00      	cmp	r3, #0
 8002232:	d103      	bne.n	800223c <process_mac_commands+0x378>
					handle->config.rx1_delay = 1;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				}

				answer_buffer[answer_index++] = 0x08;
 800223c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8002246:	461a      	mov	r2, r3
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	4413      	add	r3, r2
 800224c:	2208      	movs	r2, #8
 800224e:	701a      	strb	r2, [r3, #0]
				break;
 8002250:	e024      	b.n	800229c <process_mac_commands+0x3d8>
			}
			case 0x09: // TxParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8002252:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	d818      	bhi.n	800228e <process_mac_commands+0x3ca>
 800225c:	2300      	movs	r3, #0
 800225e:	e028      	b.n	80022b2 <process_mac_commands+0x3ee>

				break;
			}
			case 0x0a: // DlChannelReq
			{
				if ((index + 4) >= frame_payload_length) return false;
 8002260:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002264:	3304      	adds	r3, #4
 8002266:	461a      	mov	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4293      	cmp	r3, r2
 800226c:	d811      	bhi.n	8002292 <process_mac_commands+0x3ce>
 800226e:	2300      	movs	r3, #0
 8002270:	e01f      	b.n	80022b2 <process_mac_commands+0x3ee>

				break;
			}
			case 0x0b: // RekeyConf
			{
				if (index >= frame_payload_length) return false;
 8002272:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	429a      	cmp	r2, r3
 800227a:	d80c      	bhi.n	8002296 <process_mac_commands+0x3d2>
 800227c:	2300      	movs	r3, #0
 800227e:	e018      	b.n	80022b2 <process_mac_commands+0x3ee>

				break;
			}
			case 0x0c: // ADRParamSetupReq
			{
				if (index >= frame_payload_length) return false;
 8002280:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	429a      	cmp	r2, r3
 8002288:	d807      	bhi.n	800229a <process_mac_commands+0x3d6>
 800228a:	2300      	movs	r3, #0
 800228c:	e011      	b.n	80022b2 <process_mac_commands+0x3ee>
				break;
 800228e:	bf00      	nop
 8002290:	e004      	b.n	800229c <process_mac_commands+0x3d8>
				break;
 8002292:	bf00      	nop
 8002294:	e002      	b.n	800229c <process_mac_commands+0x3d8>
				break;
 8002296:	bf00      	nop
 8002298:	e000      	b.n	800229c <process_mac_commands+0x3d8>

				break;
 800229a:	bf00      	nop
	while (index < frame_payload_length) {
 800229c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	f63f ae1c 	bhi.w	8001ee0 <process_mac_commands+0x1c>
				break;
			}
		}
	}

	*answer_buffer_length = answer_index;
 80022a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022aa:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80022ae:	701a      	strb	r2, [r3, #0]
	return true;
 80022b0:	2301      	movs	r3, #1
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3730      	adds	r7, #48	@ 0x30
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop

080022bc <receive_at_scheduled_time>:

static bool receive_at_scheduled_time(rfm95_handle_t *handle, uint32_t scheduled_time)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	// Sleep until 1ms before the scheduled time.
	handle->precision_sleep_until(scheduled_time - handle->precision_tick_frequency / 1000);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80022ce:	492b      	ldr	r1, [pc, #172]	@ (800237c <receive_at_scheduled_time+0xc0>)
 80022d0:	fba1 1202 	umull	r1, r2, r1, r2
 80022d4:	0992      	lsrs	r2, r2, #6
 80022d6:	6839      	ldr	r1, [r7, #0]
 80022d8:	1a8a      	subs	r2, r1, r2
 80022da:	4610      	mov	r0, r2
 80022dc:	4798      	blx	r3

	// Clear flags and previous interrupt time, configure mapping for RX done.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_RXDONE)) return false;
 80022de:	2200      	movs	r2, #0
 80022e0:	2140      	movs	r1, #64	@ 0x40
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff fa88 	bl	80017f8 <write_register>
 80022e8:	4603      	mov	r3, r0
 80022ea:	f083 0301 	eor.w	r3, r3, #1
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <receive_at_scheduled_time+0x3c>
 80022f4:	2300      	movs	r3, #0
 80022f6:	e03c      	b.n	8002372 <receive_at_scheduled_time+0xb6>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 80022f8:	22ff      	movs	r2, #255	@ 0xff
 80022fa:	2112      	movs	r1, #18
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fa7b 	bl	80017f8 <write_register>
 8002302:	4603      	mov	r3, r0
 8002304:	f083 0301 	eor.w	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <receive_at_scheduled_time+0x56>
 800230e:	2300      	movs	r3, #0
 8002310:	e02f      	b.n	8002372 <receive_at_scheduled_time+0xb6>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO1] = 0;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 800232a:	2281      	movs	r2, #129	@ 0x81
 800232c:	2101      	movs	r1, #1
 800232e:	6878      	ldr	r0, [r7, #4]
 8002330:	f7ff fa62 	bl	80017f8 <write_register>
 8002334:	4603      	mov	r3, r0
 8002336:	f083 0301 	eor.w	r3, r3, #1
 800233a:	b2db      	uxtb	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <receive_at_scheduled_time+0x88>
 8002340:	2300      	movs	r3, #0
 8002342:	e016      	b.n	8002372 <receive_at_scheduled_time+0xb6>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8002344:	220a      	movs	r2, #10
 8002346:	2102      	movs	r1, #2
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fb8d 	bl	8001a68 <wait_for_irq>

	// Now sleep until the real scheduled time.
	handle->precision_sleep_until(scheduled_time);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002352:	6838      	ldr	r0, [r7, #0]
 8002354:	4798      	blx	r3

	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_RX_SINGLE)) return false;
 8002356:	2286      	movs	r2, #134	@ 0x86
 8002358:	2101      	movs	r1, #1
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff fa4c 	bl	80017f8 <write_register>
 8002360:	4603      	mov	r3, r0
 8002362:	f083 0301 	eor.w	r3, r3, #1
 8002366:	b2db      	uxtb	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <receive_at_scheduled_time+0xb4>
 800236c:	2300      	movs	r3, #0
 800236e:	e000      	b.n	8002372 <receive_at_scheduled_time+0xb6>

	return true;
 8002370:	2301      	movs	r3, #1
}
 8002372:	4618      	mov	r0, r3
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	10624dd3 	.word	0x10624dd3

08002380 <calculate_rx_timings>:

static void calculate_rx_timings(rfm95_handle_t *handle, uint32_t bw, uint8_t sf, uint32_t tx_ticks,
                                 uint32_t *rx_target, uint32_t *rx_window_symbols)
{
 8002380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002384:	b08a      	sub	sp, #40	@ 0x28
 8002386:	af00      	add	r7, sp, #0
 8002388:	60f8      	str	r0, [r7, #12]
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	603b      	str	r3, [r7, #0]
 800238e:	4613      	mov	r3, r2
 8002390:	71fb      	strb	r3, [r7, #7]
	volatile int32_t symbol_rate_ns = (int32_t)(((2 << (sf - 1)) * 1000000) / bw);
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	3b01      	subs	r3, #1
 8002396:	2202      	movs	r2, #2
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	4a29      	ldr	r2, [pc, #164]	@ (8002444 <calculate_rx_timings+0xc4>)
 800239e:	fb02 f303 	mul.w	r3, r2, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023aa:	627b      	str	r3, [r7, #36]	@ 0x24

	volatile int32_t rx_timing_error_ns = (int32_t)(handle->precision_tick_drift_ns_per_s * handle->config.rx1_delay);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	623b      	str	r3, [r7, #32]
	volatile int32_t rx_window_ns = 2 * symbol_rate_ns + 2 * rx_timing_error_ns;
 80023bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023be:	6a3b      	ldr	r3, [r7, #32]
 80023c0:	4413      	add	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
	volatile int32_t rx_offset_ns = 4 * symbol_rate_ns - (rx_timing_error_ns / 2);
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	009a      	lsls	r2, r3, #2
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	0fd9      	lsrs	r1, r3, #31
 80023ce:	440b      	add	r3, r1
 80023d0:	105b      	asrs	r3, r3, #1
 80023d2:	425b      	negs	r3, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
	volatile int32_t rx_offset_ticks = (int32_t)(((int64_t)rx_offset_ns * (int64_t)handle->precision_tick_frequency) / 1000000);
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	17da      	asrs	r2, r3, #31
 80023dc:	469a      	mov	sl, r3
 80023de:	4693      	mov	fp, r2
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e4:	2200      	movs	r2, #0
 80023e6:	4698      	mov	r8, r3
 80023e8:	4691      	mov	r9, r2
 80023ea:	fb08 f20b 	mul.w	r2, r8, fp
 80023ee:	fb0a f309 	mul.w	r3, sl, r9
 80023f2:	4413      	add	r3, r2
 80023f4:	fbaa 4508 	umull	r4, r5, sl, r8
 80023f8:	442b      	add	r3, r5
 80023fa:	461d      	mov	r5, r3
 80023fc:	4a11      	ldr	r2, [pc, #68]	@ (8002444 <calculate_rx_timings+0xc4>)
 80023fe:	f04f 0300 	mov.w	r3, #0
 8002402:	4620      	mov	r0, r4
 8002404:	4629      	mov	r1, r5
 8002406:	f7fd ff33 	bl	8000270 <__aeabi_ldivmod>
 800240a:	4602      	mov	r2, r0
 800240c:	460b      	mov	r3, r1
 800240e:	4613      	mov	r3, r2
 8002410:	617b      	str	r3, [r7, #20]
	*rx_target = tx_ticks + handle->precision_tick_frequency * handle->config.rx1_delay + rx_offset_ticks;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	f892 2066 	ldrb.w	r2, [r2, #102]	@ 0x66
 800241c:	fb03 f202 	mul.w	r2, r3, r2
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	4413      	add	r3, r2
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	441a      	add	r2, r3
 8002428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800242a:	601a      	str	r2, [r3, #0]
	*rx_window_symbols = rx_window_ns / symbol_rate_ns;
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002430:	fb92 f3f3 	sdiv	r3, r2, r3
 8002434:	461a      	mov	r2, r3
 8002436:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002438:	601a      	str	r2, [r3, #0]
}
 800243a:	bf00      	nop
 800243c:	3728      	adds	r7, #40	@ 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002444:	000f4240 	.word	0x000f4240

08002448 <receive_package>:

static bool receive_package(rfm95_handle_t *handle, uint32_t tx_ticks, uint8_t *payload_buf, size_t *payload_len,
                            int8_t *snr)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	@ 0x30
 800244c:	af02      	add	r7, sp, #8
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
 8002454:	603b      	str	r3, [r7, #0]
	*payload_len = 0;
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

	uint32_t rx1_target, rx1_window_symbols;
	calculate_rx_timings(handle, 125000, 7, tx_ticks, &rx1_target, &rx1_window_symbols);
 800245c:	f107 0320 	add.w	r3, r7, #32
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2207      	movs	r2, #7
 800246c:	49ab      	ldr	r1, [pc, #684]	@ (800271c <receive_package+0x2d4>)
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f7ff ff86 	bl	8002380 <calculate_rx_timings>

	assert(rx1_window_symbols <= 0x3ff);
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247a:	d306      	bcc.n	800248a <receive_package+0x42>
 800247c:	4ba8      	ldr	r3, [pc, #672]	@ (8002720 <receive_package+0x2d8>)
 800247e:	4aa9      	ldr	r2, [pc, #676]	@ (8002724 <receive_package+0x2dc>)
 8002480:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 8002484:	48a8      	ldr	r0, [pc, #672]	@ (8002728 <receive_package+0x2e0>)
 8002486:	f002 fe29 	bl	80050dc <__assert_func>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 800248a:	2272      	movs	r2, #114	@ 0x72
 800248c:	211d      	movs	r1, #29
 800248e:	68f8      	ldr	r0, [r7, #12]
 8002490:	f7ff f9b2 	bl	80017f8 <write_register>
 8002494:	4603      	mov	r3, r0
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <receive_package+0x5c>
 80024a0:	2300      	movs	r3, #0
 80024a2:	e136      	b.n	8002712 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx1_window_symbols >> 8) & 0x3))) return false;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f043 0374 	orr.w	r3, r3, #116	@ 0x74
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	461a      	mov	r2, r3
 80024b8:	211e      	movs	r1, #30
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f7ff f99c 	bl	80017f8 <write_register>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f083 0301 	eor.w	r3, r3, #1
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d001      	beq.n	80024d0 <receive_package+0x88>
 80024cc:	2300      	movs	r3, #0
 80024ce:	e120      	b.n	8002712 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80024d0:	2204      	movs	r2, #4
 80024d2:	2126      	movs	r1, #38	@ 0x26
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7ff f98f 	bl	80017f8 <write_register>
 80024da:	4603      	mov	r3, r0
 80024dc:	f083 0301 	eor.w	r3, r3, #1
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <receive_package+0xa2>
 80024e6:	2300      	movs	r3, #0
 80024e8:	e113      	b.n	8002712 <receive_package+0x2ca>

	// Set maximum symbol timeout.
	if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx1_window_symbols)) return false;
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	211f      	movs	r1, #31
 80024f2:	68f8      	ldr	r0, [r7, #12]
 80024f4:	f7ff f980 	bl	80017f8 <write_register>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f083 0301 	eor.w	r3, r3, #1
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	2b00      	cmp	r3, #0
 8002502:	d001      	beq.n	8002508 <receive_package+0xc0>
 8002504:	2300      	movs	r3, #0
 8002506:	e104      	b.n	8002712 <receive_package+0x2ca>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_RX)) return false;
 8002508:	2267      	movs	r2, #103	@ 0x67
 800250a:	2133      	movs	r1, #51	@ 0x33
 800250c:	68f8      	ldr	r0, [r7, #12]
 800250e:	f7ff f973 	bl	80017f8 <write_register>
 8002512:	4603      	mov	r3, r0
 8002514:	f083 0301 	eor.w	r3, r3, #1
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <receive_package+0xda>
 800251e:	2300      	movs	r3, #0
 8002520:	e0f7      	b.n	8002712 <receive_package+0x2ca>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_RX)) return false;
 8002522:	2219      	movs	r2, #25
 8002524:	213b      	movs	r1, #59	@ 0x3b
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7ff f966 	bl	80017f8 <write_register>
 800252c:	4603      	mov	r3, r0
 800252e:	f083 0301 	eor.w	r3, r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <receive_package+0xf4>
 8002538:	2300      	movs	r3, #0
 800253a:	e0ea      	b.n	8002712 <receive_package+0x2ca>

	receive_at_scheduled_time(handle, rx1_target);
 800253c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253e:	4619      	mov	r1, r3
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff febb 	bl	80022bc <receive_at_scheduled_time>

	// If there was nothing received during RX1, try RX2.
	if (!wait_for_rx_irqs(handle)) {
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f7ff fabe 	bl	8001ac8 <wait_for_rx_irqs>
 800254c:	4603      	mov	r3, r0
 800254e:	f083 0301 	eor.w	r3, r3, #1
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d07a      	beq.n	800264e <receive_package+0x206>

		// Return modem to sleep.
		if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 8002558:	2280      	movs	r2, #128	@ 0x80
 800255a:	2101      	movs	r1, #1
 800255c:	68f8      	ldr	r0, [r7, #12]
 800255e:	f7ff f94b 	bl	80017f8 <write_register>
 8002562:	4603      	mov	r3, r0
 8002564:	f083 0301 	eor.w	r3, r3, #1
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <receive_package+0x12a>
 800256e:	2300      	movs	r3, #0
 8002570:	e0cf      	b.n	8002712 <receive_package+0x2ca>

		if (handle->receive_mode == RFM95_RECEIVE_MODE_RX12) {
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002578:	2b02      	cmp	r3, #2
 800257a:	d166      	bne.n	800264a <receive_package+0x202>

			uint32_t rx2_target, rx2_window_symbols;
			calculate_rx_timings(handle, 125000, 12, tx_ticks, &rx2_target, &rx2_window_symbols);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	9301      	str	r3, [sp, #4]
 8002582:	f107 0318 	add.w	r3, r7, #24
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	220c      	movs	r2, #12
 800258c:	4963      	ldr	r1, [pc, #396]	@ (800271c <receive_package+0x2d4>)
 800258e:	68f8      	ldr	r0, [r7, #12]
 8002590:	f7ff fef6 	bl	8002380 <calculate_rx_timings>

			// Configure 869.525 MHz
			if (!configure_frequency(handle, 869525000)) return false;
 8002594:	4965      	ldr	r1, [pc, #404]	@ (800272c <receive_package+0x2e4>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f7ff f9e0 	bl	800195c <configure_frequency>
 800259c:	4603      	mov	r3, r0
 800259e:	f083 0301 	eor.w	r3, r3, #1
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <receive_package+0x164>
 80025a8:	2300      	movs	r3, #0
 80025aa:	e0b2      	b.n	8002712 <receive_package+0x2ca>

			// Configure modem SF12
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0xc2)) return false;
 80025ac:	22c2      	movs	r2, #194	@ 0xc2
 80025ae:	211d      	movs	r1, #29
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7ff f921 	bl	80017f8 <write_register>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f083 0301 	eor.w	r3, r3, #1
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <receive_package+0x17e>
 80025c2:	2300      	movs	r3, #0
 80025c4:	e0a5      	b.n	8002712 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74 | ((rx2_window_symbols >> 8) & 0x3))) return false;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	f043 0374 	orr.w	r3, r3, #116	@ 0x74
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	211e      	movs	r1, #30
 80025dc:	68f8      	ldr	r0, [r7, #12]
 80025de:	f7ff f90b 	bl	80017f8 <write_register>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f083 0301 	eor.w	r3, r3, #1
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <receive_package+0x1aa>
 80025ee:	2300      	movs	r3, #0
 80025f0:	e08f      	b.n	8002712 <receive_package+0x2ca>
			if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 80025f2:	2204      	movs	r2, #4
 80025f4:	2126      	movs	r1, #38	@ 0x26
 80025f6:	68f8      	ldr	r0, [r7, #12]
 80025f8:	f7ff f8fe 	bl	80017f8 <write_register>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f083 0301 	eor.w	r3, r3, #1
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <receive_package+0x1c4>
 8002608:	2300      	movs	r3, #0
 800260a:	e082      	b.n	8002712 <receive_package+0x2ca>

			// Set maximum symbol timeout.
			if (!write_register(handle, RFM95_REGISTER_SYMB_TIMEOUT_LSB, rx2_window_symbols)) return false;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	b2db      	uxtb	r3, r3
 8002610:	461a      	mov	r2, r3
 8002612:	211f      	movs	r1, #31
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f7ff f8ef 	bl	80017f8 <write_register>
 800261a:	4603      	mov	r3, r0
 800261c:	f083 0301 	eor.w	r3, r3, #1
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <receive_package+0x1e2>
 8002626:	2300      	movs	r3, #0
 8002628:	e073      	b.n	8002712 <receive_package+0x2ca>

			receive_at_scheduled_time(handle, rx2_target);
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	4619      	mov	r1, r3
 800262e:	68f8      	ldr	r0, [r7, #12]
 8002630:	f7ff fe44 	bl	80022bc <receive_at_scheduled_time>

			if (!wait_for_rx_irqs(handle)) {
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f7ff fa47 	bl	8001ac8 <wait_for_rx_irqs>
 800263a:	4603      	mov	r3, r0
 800263c:	f083 0301 	eor.w	r3, r3, #1
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <receive_package+0x202>
				// No payload during in RX1 and RX2
				return true;
 8002646:	2301      	movs	r3, #1
 8002648:	e063      	b.n	8002712 <receive_package+0x2ca>
			}
		}

		return true;
 800264a:	2301      	movs	r3, #1
 800264c:	e061      	b.n	8002712 <receive_package+0x2ca>
	}

	uint8_t irq_flags;
	read_register(handle, RFM95_REGISTER_IRQ_FLAGS, &irq_flags, 1);
 800264e:	f107 021f 	add.w	r2, r7, #31
 8002652:	2301      	movs	r3, #1
 8002654:	2112      	movs	r1, #18
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff f892 	bl	8001780 <read_register>

	// Check if there was a CRC error.
	if (irq_flags & 0x20) {
 800265c:	7ffb      	ldrb	r3, [r7, #31]
 800265e:	f003 0320 	and.w	r3, r3, #32
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <receive_package+0x222>
		return true;
 8002666:	2301      	movs	r3, #1
 8002668:	e053      	b.n	8002712 <receive_package+0x2ca>
	}

	int8_t packet_snr;
	if (!read_register(handle, RFM95_REGISTER_PACKET_SNR, (uint8_t *)&packet_snr, 1)) return false;
 800266a:	f107 021e 	add.w	r2, r7, #30
 800266e:	2301      	movs	r3, #1
 8002670:	2119      	movs	r1, #25
 8002672:	68f8      	ldr	r0, [r7, #12]
 8002674:	f7ff f884 	bl	8001780 <read_register>
 8002678:	4603      	mov	r3, r0
 800267a:	f083 0301 	eor.w	r3, r3, #1
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <receive_package+0x240>
 8002684:	2300      	movs	r3, #0
 8002686:	e044      	b.n	8002712 <receive_package+0x2ca>
	*snr = (int8_t)(packet_snr / 4);
 8002688:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800268c:	2b00      	cmp	r3, #0
 800268e:	da00      	bge.n	8002692 <receive_package+0x24a>
 8002690:	3303      	adds	r3, #3
 8002692:	109b      	asrs	r3, r3, #2
 8002694:	b25a      	sxtb	r2, r3
 8002696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002698:	701a      	strb	r2, [r3, #0]

	// Read received payload length.
	uint8_t payload_len_internal;
	if (!read_register(handle, RFM95_REGISTER_FIFO_RX_BYTES_NB, &payload_len_internal, 1)) return false;
 800269a:	f107 021d 	add.w	r2, r7, #29
 800269e:	2301      	movs	r3, #1
 80026a0:	2113      	movs	r1, #19
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f7ff f86c 	bl	8001780 <read_register>
 80026a8:	4603      	mov	r3, r0
 80026aa:	f083 0301 	eor.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <receive_package+0x270>
 80026b4:	2300      	movs	r3, #0
 80026b6:	e02c      	b.n	8002712 <receive_package+0x2ca>

	// Read received payload itself.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0)) return false;
 80026b8:	2200      	movs	r2, #0
 80026ba:	210d      	movs	r1, #13
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f7ff f89b 	bl	80017f8 <write_register>
 80026c2:	4603      	mov	r3, r0
 80026c4:	f083 0301 	eor.w	r3, r3, #1
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <receive_package+0x28a>
 80026ce:	2300      	movs	r3, #0
 80026d0:	e01f      	b.n	8002712 <receive_package+0x2ca>
	if (!read_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf, payload_len_internal)) return false;
 80026d2:	7f7b      	ldrb	r3, [r7, #29]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	2100      	movs	r1, #0
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff f851 	bl	8001780 <read_register>
 80026de:	4603      	mov	r3, r0
 80026e0:	f083 0301 	eor.w	r3, r3, #1
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <receive_package+0x2a6>
 80026ea:	2300      	movs	r3, #0
 80026ec:	e011      	b.n	8002712 <receive_package+0x2ca>

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80026ee:	2280      	movs	r2, #128	@ 0x80
 80026f0:	2101      	movs	r1, #1
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff f880 	bl	80017f8 <write_register>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <receive_package+0x2c0>
 8002704:	2300      	movs	r3, #0
 8002706:	e004      	b.n	8002712 <receive_package+0x2ca>

	// Successful payload receive, set payload length to tell caller.
	*payload_len = payload_len_internal;
 8002708:	7f7b      	ldrb	r3, [r7, #29]
 800270a:	461a      	mov	r2, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	601a      	str	r2, [r3, #0]
	return true;
 8002710:	2301      	movs	r3, #1
}
 8002712:	4618      	mov	r0, r3
 8002714:	3728      	adds	r7, #40	@ 0x28
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	0001e848 	.word	0x0001e848
 8002720:	08006320 	.word	0x08006320
 8002724:	080063e4 	.word	0x080063e4
 8002728:	080060e8 	.word	0x080060e8
 800272c:	33d3e608 	.word	0x33d3e608

08002730 <send_package>:

static bool send_package(rfm95_handle_t *handle, uint8_t *payload_buf, size_t payload_len, uint8_t channel,
                         uint32_t *tx_ticks)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	70fb      	strb	r3, [r7, #3]
	// Configure channel for transmission.
	if (!configure_channel(handle, channel)) return false;
 800273e:	78fb      	ldrb	r3, [r7, #3]
 8002740:	4619      	mov	r1, r3
 8002742:	68f8      	ldr	r0, [r7, #12]
 8002744:	f7ff f966 	bl	8001a14 <configure_channel>
 8002748:	4603      	mov	r3, r0
 800274a:	f083 0301 	eor.w	r3, r3, #1
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <send_package+0x28>
 8002754:	2300      	movs	r3, #0
 8002756:	e0d8      	b.n	800290a <send_package+0x1da>

	// Configure modem (125kHz, 4/6 error coding rate, SF7, single packet, CRC enable, AGC auto on)
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_1, 0x72)) return false;
 8002758:	2272      	movs	r2, #114	@ 0x72
 800275a:	211d      	movs	r1, #29
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff f84b 	bl	80017f8 <write_register>
 8002762:	4603      	mov	r3, r0
 8002764:	f083 0301 	eor.w	r3, r3, #1
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <send_package+0x42>
 800276e:	2300      	movs	r3, #0
 8002770:	e0cb      	b.n	800290a <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_2, 0x74)) return false;
 8002772:	2274      	movs	r2, #116	@ 0x74
 8002774:	211e      	movs	r1, #30
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff f83e 	bl	80017f8 <write_register>
 800277c:	4603      	mov	r3, r0
 800277e:	f083 0301 	eor.w	r3, r3, #1
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <send_package+0x5c>
 8002788:	2300      	movs	r3, #0
 800278a:	e0be      	b.n	800290a <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_MODEM_CONFIG_3, 0x04)) return false;
 800278c:	2204      	movs	r2, #4
 800278e:	2126      	movs	r1, #38	@ 0x26
 8002790:	68f8      	ldr	r0, [r7, #12]
 8002792:	f7ff f831 	bl	80017f8 <write_register>
 8002796:	4603      	mov	r3, r0
 8002798:	f083 0301 	eor.w	r3, r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <send_package+0x76>
 80027a2:	2300      	movs	r3, #0
 80027a4:	e0b1      	b.n	800290a <send_package+0x1da>

	// Set IQ registers according to AN1200.24.
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_1, RFM95_REGISTER_INVERT_IQ_1_TX)) return false;
 80027a6:	2227      	movs	r2, #39	@ 0x27
 80027a8:	2133      	movs	r1, #51	@ 0x33
 80027aa:	68f8      	ldr	r0, [r7, #12]
 80027ac:	f7ff f824 	bl	80017f8 <write_register>
 80027b0:	4603      	mov	r3, r0
 80027b2:	f083 0301 	eor.w	r3, r3, #1
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <send_package+0x90>
 80027bc:	2300      	movs	r3, #0
 80027be:	e0a4      	b.n	800290a <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_INVERT_IQ_2, RFM95_REGISTER_INVERT_IQ_2_TX)) return false;
 80027c0:	221d      	movs	r2, #29
 80027c2:	213b      	movs	r1, #59	@ 0x3b
 80027c4:	68f8      	ldr	r0, [r7, #12]
 80027c6:	f7ff f817 	bl	80017f8 <write_register>
 80027ca:	4603      	mov	r3, r0
 80027cc:	f083 0301 	eor.w	r3, r3, #1
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <send_package+0xaa>
 80027d6:	2300      	movs	r3, #0
 80027d8:	e097      	b.n	800290a <send_package+0x1da>

	// Set the payload length.
	if (!write_register(handle, RFM95_REGISTER_PAYLOAD_LENGTH, payload_len)) return false;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	2122      	movs	r1, #34	@ 0x22
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f7ff f808 	bl	80017f8 <write_register>
 80027e8:	4603      	mov	r3, r0
 80027ea:	f083 0301 	eor.w	r3, r3, #1
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <send_package+0xc8>
 80027f4:	2300      	movs	r3, #0
 80027f6:	e088      	b.n	800290a <send_package+0x1da>

	// Enable tx-done interrupt, clear flags and previous interrupt time.
	if (!write_register(handle, RFM95_REGISTER_DIO_MAPPING_1, RFM95_REGISTER_DIO_MAPPING_1_IRQ_FOR_TXDONE)) return false;
 80027f8:	2240      	movs	r2, #64	@ 0x40
 80027fa:	2140      	movs	r1, #64	@ 0x40
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7fe fffb 	bl	80017f8 <write_register>
 8002802:	4603      	mov	r3, r0
 8002804:	f083 0301 	eor.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <send_package+0xe2>
 800280e:	2300      	movs	r3, #0
 8002810:	e07b      	b.n	800290a <send_package+0x1da>
	if (!write_register(handle, RFM95_REGISTER_IRQ_FLAGS, 0xff)) return false;
 8002812:	22ff      	movs	r2, #255	@ 0xff
 8002814:	2112      	movs	r1, #18
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f7fe ffee 	bl	80017f8 <write_register>
 800281c:	4603      	mov	r3, r0
 800281e:	f083 0301 	eor.w	r3, r3, #1
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <send_package+0xfc>
 8002828:	2300      	movs	r3, #0
 800282a:	e06e      	b.n	800290a <send_package+0x1da>
	handle->interrupt_times[RFM95_INTERRUPT_DIO0] = 0;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	handle->interrupt_times[RFM95_INTERRUPT_DIO5] = 0;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4

	// Move modem to lora standby.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_STANDBY)) return false;
 800283c:	2281      	movs	r2, #129	@ 0x81
 800283e:	2101      	movs	r1, #1
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f7fe ffd9 	bl	80017f8 <write_register>
 8002846:	4603      	mov	r3, r0
 8002848:	f083 0301 	eor.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <send_package+0x126>
 8002852:	2300      	movs	r3, #0
 8002854:	e059      	b.n	800290a <send_package+0x1da>

	// Wait for the modem to be ready.
	wait_for_irq(handle, RFM95_INTERRUPT_DIO5, RFM95_WAKEUP_TIMEOUT);
 8002856:	220a      	movs	r2, #10
 8002858:	2102      	movs	r1, #2
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f7ff f904 	bl	8001a68 <wait_for_irq>

	// Set pointer to start of TX section in FIFO.
	if (!write_register(handle, RFM95_REGISTER_FIFO_ADDR_PTR, 0x80)) return false;
 8002860:	2280      	movs	r2, #128	@ 0x80
 8002862:	210d      	movs	r1, #13
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	f7fe ffc7 	bl	80017f8 <write_register>
 800286a:	4603      	mov	r3, r0
 800286c:	f083 0301 	eor.w	r3, r3, #1
 8002870:	b2db      	uxtb	r3, r3
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <send_package+0x14a>
 8002876:	2300      	movs	r3, #0
 8002878:	e047      	b.n	800290a <send_package+0x1da>

	// Write payload to FIFO.
	for (size_t i = 0; i < payload_len; i++) {
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e00b      	b.n	8002898 <send_package+0x168>
		write_register(handle, RFM95_REGISTER_FIFO_ACCESS, payload_buf[i]);
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	4413      	add	r3, r2
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	461a      	mov	r2, r3
 800288a:	2100      	movs	r1, #0
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f7fe ffb3 	bl	80017f8 <write_register>
	for (size_t i = 0; i < payload_len; i++) {
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	3301      	adds	r3, #1
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	429a      	cmp	r2, r3
 800289e:	d3ef      	bcc.n	8002880 <send_package+0x150>
	}

	// Set modem to tx mode.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_TX)) return false;
 80028a0:	2283      	movs	r2, #131	@ 0x83
 80028a2:	2101      	movs	r1, #1
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f7fe ffa7 	bl	80017f8 <write_register>
 80028aa:	4603      	mov	r3, r0
 80028ac:	f083 0301 	eor.w	r3, r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d001      	beq.n	80028ba <send_package+0x18a>
 80028b6:	2300      	movs	r3, #0
 80028b8:	e027      	b.n	800290a <send_package+0x1da>

	// Wait for the transfer complete interrupt.
	if (!wait_for_irq(handle, RFM95_INTERRUPT_DIO0, RFM95_SEND_TIMEOUT)) return false;
 80028ba:	2264      	movs	r2, #100	@ 0x64
 80028bc:	2100      	movs	r1, #0
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f7ff f8d2 	bl	8001a68 <wait_for_irq>
 80028c4:	4603      	mov	r3, r0
 80028c6:	f083 0301 	eor.w	r3, r3, #1
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <send_package+0x1a4>
 80028d0:	2300      	movs	r3, #0
 80028d2:	e01a      	b.n	800290a <send_package+0x1da>

	// Set real tx time in ticks.
	*tx_ticks = handle->interrupt_times[RFM95_INTERRUPT_DIO0];
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f8d3 20ac 	ldr.w	r2, [r3, #172]	@ 0xac
 80028da:	6a3b      	ldr	r3, [r7, #32]
 80028dc:	601a      	str	r2, [r3, #0]

	// Return modem to sleep.
	if (!write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP)) return false;
 80028de:	2280      	movs	r2, #128	@ 0x80
 80028e0:	2101      	movs	r1, #1
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f7fe ff88 	bl	80017f8 <write_register>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f083 0301 	eor.w	r3, r3, #1
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <send_package+0x1c8>
 80028f4:	2300      	movs	r3, #0
 80028f6:	e008      	b.n	800290a <send_package+0x1da>

	// Increment tx frame counter.
	handle->config.tx_frame_count++;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80028fe:	3301      	adds	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

	return true;
 8002908:	2301      	movs	r3, #1
}
 800290a:	4618      	mov	r0, r3
 800290c:	3718      	adds	r7, #24
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <encode_phy_payload>:

static size_t encode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], const uint8_t *frame_payload,
                                 size_t frame_payload_length, uint8_t port)
{
 8002914:	b590      	push	{r4, r7, lr}
 8002916:	b08d      	sub	sp, #52	@ 0x34
 8002918:	af04      	add	r7, sp, #16
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	60b9      	str	r1, [r7, #8]
 800291e:	607a      	str	r2, [r7, #4]
 8002920:	603b      	str	r3, [r7, #0]
	size_t payload_len = 0;
 8002922:	2300      	movs	r3, #0
 8002924:	61bb      	str	r3, [r7, #24]

	// 64 bytes is maximum size of FIFO
	assert(frame_payload_length + 4 + 9 <= 64);
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	330d      	adds	r3, #13
 800292a:	2b40      	cmp	r3, #64	@ 0x40
 800292c:	d906      	bls.n	800293c <encode_phy_payload+0x28>
 800292e:	4b51      	ldr	r3, [pc, #324]	@ (8002a74 <encode_phy_payload+0x160>)
 8002930:	4a51      	ldr	r2, [pc, #324]	@ (8002a78 <encode_phy_payload+0x164>)
 8002932:	f240 214f 	movw	r1, #591	@ 0x24f
 8002936:	4851      	ldr	r0, [pc, #324]	@ (8002a7c <encode_phy_payload+0x168>)
 8002938:	f002 fbd0 	bl	80050dc <__assert_func>

	payload_buf[0] = 0x40; // MAC Header
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2240      	movs	r2, #64	@ 0x40
 8002940:	701a      	strb	r2, [r3, #0]
	payload_buf[1] = handle->device_address[3];
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	3301      	adds	r3, #1
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	7d52      	ldrb	r2, [r2, #21]
 800294a:	701a      	strb	r2, [r3, #0]
	payload_buf[2] = handle->device_address[2];
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	3302      	adds	r3, #2
 8002950:	68fa      	ldr	r2, [r7, #12]
 8002952:	7d12      	ldrb	r2, [r2, #20]
 8002954:	701a      	strb	r2, [r3, #0]
	payload_buf[3] = handle->device_address[1];
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	3303      	adds	r3, #3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	7cd2      	ldrb	r2, [r2, #19]
 800295e:	701a      	strb	r2, [r3, #0]
	payload_buf[4] = handle->device_address[0];
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	3304      	adds	r3, #4
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	7c92      	ldrb	r2, [r2, #18]
 8002968:	701a      	strb	r2, [r3, #0]
	payload_buf[5] = 0x00; // Frame Control
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	3305      	adds	r3, #5
 800296e:	2200      	movs	r2, #0
 8002970:	701a      	strb	r2, [r3, #0]
	payload_buf[6] = (handle->config.tx_frame_count & 0x00ffu);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	3306      	adds	r3, #6
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	701a      	strb	r2, [r3, #0]
	payload_buf[7] = ((uint16_t)(handle->config.tx_frame_count >> 8u) & 0x00ffu);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002986:	0a1b      	lsrs	r3, r3, #8
 8002988:	b29a      	uxth	r2, r3
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	3307      	adds	r3, #7
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]
	payload_buf[8] = port; // Frame Port
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	3308      	adds	r3, #8
 8002996:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800299a:	701a      	strb	r2, [r3, #0]
	payload_len += 9;
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	3309      	adds	r3, #9
 80029a0:	61bb      	str	r3, [r7, #24]

	// Encrypt payload in place in payload_buf.
	memcpy(payload_buf + payload_len, frame_payload, frame_payload_length);
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	4413      	add	r3, r2
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 fd68 	bl	8005482 <memcpy>
	if (port == 0) {
 80029b2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d113      	bne.n	80029e2 <encode_phy_payload+0xce>
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	18d0      	adds	r0, r2, r3
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	b2d9      	uxtb	r1, r3
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80029ca:	461c      	mov	r4, r3
		                0, handle->network_session_key, handle->device_address);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	3316      	adds	r3, #22
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 80029d4:	9201      	str	r2, [sp, #4]
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	2300      	movs	r3, #0
 80029da:	4622      	mov	r2, r4
 80029dc:	f7fe fbef 	bl	80011be <Encrypt_Payload>
 80029e0:	e012      	b.n	8002a08 <encode_phy_payload+0xf4>
	} else {
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 80029e2:	68ba      	ldr	r2, [r7, #8]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	18d0      	adds	r0, r2, r3
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	b2d9      	uxtb	r1, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80029f2:	461c      	mov	r4, r3
		                0, handle->application_session_key, handle->device_address);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	3326      	adds	r3, #38	@ 0x26
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	3212      	adds	r2, #18
		Encrypt_Payload(payload_buf + payload_len, frame_payload_length, handle->config.tx_frame_count,
 80029fc:	9201      	str	r2, [sp, #4]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2300      	movs	r3, #0
 8002a02:	4622      	mov	r2, r4
 8002a04:	f7fe fbdb 	bl	80011be <Encrypt_Payload>
	}
	payload_len += frame_payload_length;
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]

	// Calculate MIC and copy to last 4 bytes of the payload_buf.
	uint8_t mic[4];
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	b2d8      	uxtb	r0, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8002a1a:	461c      	mov	r4, r3
	              handle->network_session_key, handle->device_address);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	3316      	adds	r3, #22
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, mic, payload_len, handle->config.tx_frame_count, 0,
 8002a24:	f107 0114 	add.w	r1, r7, #20
 8002a28:	9202      	str	r2, [sp, #8]
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	4623      	mov	r3, r4
 8002a32:	4602      	mov	r2, r0
 8002a34:	68b8      	ldr	r0, [r7, #8]
 8002a36:	f7fe fc77 	bl	8001328 <Calculate_MIC>
	for (uint8_t i = 0; i < 4; i++) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e00d      	b.n	8002a5c <encode_phy_payload+0x148>
		payload_buf[payload_len + i] = mic[i];
 8002a40:	7ffa      	ldrb	r2, [r7, #31]
 8002a42:	7ff9      	ldrb	r1, [r7, #31]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	440b      	add	r3, r1
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3220      	adds	r2, #32
 8002a4e:	443a      	add	r2, r7
 8002a50:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8002a54:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < 4; i++) {
 8002a56:	7ffb      	ldrb	r3, [r7, #31]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	77fb      	strb	r3, [r7, #31]
 8002a5c:	7ffb      	ldrb	r3, [r7, #31]
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d9ee      	bls.n	8002a40 <encode_phy_payload+0x12c>
	}
	payload_len += 4;
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	3304      	adds	r3, #4
 8002a66:	61bb      	str	r3, [r7, #24]

	return payload_len;
 8002a68:	69bb      	ldr	r3, [r7, #24]
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd90      	pop	{r4, r7, pc}
 8002a72:	bf00      	nop
 8002a74:	0800633c 	.word	0x0800633c
 8002a78:	080063f4 	.word	0x080063f4
 8002a7c:	080060e8 	.word	0x080060e8

08002a80 <decode_phy_payload>:

static bool decode_phy_payload(rfm95_handle_t *handle, uint8_t payload_buf[64], uint8_t payload_length,
                               uint8_t **decoded_frame_payload_ptr, uint8_t *decoded_frame_payload_length, uint8_t *frame_port)
{
 8002a80:	b590      	push	{r4, r7, lr}
 8002a82:	b08d      	sub	sp, #52	@ 0x34
 8002a84:	af04      	add	r7, sp, #16
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	71fb      	strb	r3, [r7, #7]
	// Only unconfirmed down-links are supported for now.
	if (payload_buf[0] != 0x60) {
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b60      	cmp	r3, #96	@ 0x60
 8002a96:	d001      	beq.n	8002a9c <decode_phy_payload+0x1c>
		return false;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	e0aa      	b.n	8002bf2 <decode_phy_payload+0x172>
	}

	// Does the device address match?
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	7d5b      	ldrb	r3, [r3, #21]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d114      	bne.n	8002ad4 <decode_phy_payload+0x54>
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	3302      	adds	r3, #2
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	7d1b      	ldrb	r3, [r3, #20]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d10d      	bne.n	8002ad4 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	3303      	adds	r3, #3
 8002abc:	781a      	ldrb	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	7cdb      	ldrb	r3, [r3, #19]
	if (payload_buf[1] != handle->device_address[3] || payload_buf[2] != handle->device_address[2] ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d106      	bne.n	8002ad4 <decode_phy_payload+0x54>
	    payload_buf[3] != handle->device_address[1] || payload_buf[4] != handle->device_address[0]) {
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	3304      	adds	r3, #4
 8002aca:	781a      	ldrb	r2, [r3, #0]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	7c9b      	ldrb	r3, [r3, #18]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <decode_phy_payload+0x58>
		return false;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	e08c      	b.n	8002bf2 <decode_phy_payload+0x172>
	}

	uint8_t frame_control = payload_buf[5];
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	795b      	ldrb	r3, [r3, #5]
 8002adc:	77fb      	strb	r3, [r7, #31]
	uint8_t frame_opts_length = frame_control & 0x0f;
 8002ade:	7ffb      	ldrb	r3, [r7, #31]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	77bb      	strb	r3, [r7, #30]
	uint16_t rx_frame_count = (payload_buf[7] << 8) | payload_buf[6];
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	3307      	adds	r3, #7
 8002aea:	781b      	ldrb	r3, [r3, #0]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	b21a      	sxth	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	3306      	adds	r3, #6
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b21b      	sxth	r3, r3
 8002af8:	4313      	orrs	r3, r2
 8002afa:	b21b      	sxth	r3, r3
 8002afc:	83bb      	strh	r3, [r7, #28]

	// Check if rx frame count is valid and if so, update accordingly.
	if (rx_frame_count < handle->config.rx_frame_count) {
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8002b04:	8bba      	ldrh	r2, [r7, #28]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d201      	bcs.n	8002b0e <decode_phy_payload+0x8e>
		return false;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	e071      	b.n	8002bf2 <decode_phy_payload+0x172>
	}
	handle->config.rx_frame_count = rx_frame_count;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8bba      	ldrh	r2, [r7, #28]
 8002b12:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

	uint8_t check_mic[4];
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	3b04      	subs	r3, #4
 8002b1a:	b2d8      	uxtb	r0, r3
 8002b1c:	8bbc      	ldrh	r4, [r7, #28]
	              handle->network_session_key, handle->device_address);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	3316      	adds	r3, #22
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	3212      	adds	r2, #18
	Calculate_MIC(payload_buf, check_mic, payload_length - 4, rx_frame_count, 1,
 8002b26:	f107 0114 	add.w	r1, r7, #20
 8002b2a:	9202      	str	r2, [sp, #8]
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2301      	movs	r3, #1
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	4623      	mov	r3, r4
 8002b34:	4602      	mov	r2, r0
 8002b36:	68b8      	ldr	r0, [r7, #8]
 8002b38:	f7fe fbf6 	bl	8001328 <Calculate_MIC>
	if (memcmp(check_mic, &payload_buf[payload_length - 4], 4) != 0) {
 8002b3c:	79fb      	ldrb	r3, [r7, #7]
 8002b3e:	3b04      	subs	r3, #4
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	18d1      	adds	r1, r2, r3
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	2204      	movs	r2, #4
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f002 fc0d 	bl	800536a <memcmp>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <decode_phy_payload+0xda>
		return false;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e04b      	b.n	8002bf2 <decode_phy_payload+0x172>
	}

	if (payload_length - 12 - frame_opts_length == 0) {
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f1a3 020c 	sub.w	r2, r3, #12
 8002b60:	7fbb      	ldrb	r3, [r7, #30]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d10b      	bne.n	8002b7e <decode_phy_payload+0xfe>
		*frame_port = 0;
 8002b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b68:	2200      	movs	r2, #0
 8002b6a:	701a      	strb	r2, [r3, #0]
		*decoded_frame_payload_ptr = &payload_buf[8];
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	f103 0208 	add.w	r2, r3, #8
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_opts_length;
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	7fba      	ldrb	r2, [r7, #30]
 8002b7a:	701a      	strb	r2, [r3, #0]
 8002b7c:	e038      	b.n	8002bf0 <decode_phy_payload+0x170>

	} else {
		*frame_port = payload_buf[8];
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	7a1a      	ldrb	r2, [r3, #8]
 8002b82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b84:	701a      	strb	r2, [r3, #0]

		uint8_t frame_payload_start = 9 + frame_opts_length;
 8002b86:	7fbb      	ldrb	r3, [r7, #30]
 8002b88:	3309      	adds	r3, #9
 8002b8a:	76fb      	strb	r3, [r7, #27]
		uint8_t frame_payload_end = payload_length - 4;
 8002b8c:	79fb      	ldrb	r3, [r7, #7]
 8002b8e:	3b04      	subs	r3, #4
 8002b90:	76bb      	strb	r3, [r7, #26]
		uint8_t frame_payload_length = frame_payload_end - frame_payload_start;
 8002b92:	7eba      	ldrb	r2, [r7, #26]
 8002b94:	7efb      	ldrb	r3, [r7, #27]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	767b      	strb	r3, [r7, #25]

		if (*frame_port == 0) {
 8002b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d10f      	bne.n	8002bc2 <decode_phy_payload+0x142>
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002ba2:	7efb      	ldrb	r3, [r7, #27]
 8002ba4:	68ba      	ldr	r2, [r7, #8]
 8002ba6:	18d0      	adds	r0, r2, r3
 8002ba8:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->network_session_key, handle->device_address);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3316      	adds	r3, #22
 8002bae:	68fa      	ldr	r2, [r7, #12]
 8002bb0:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002bb2:	7e79      	ldrb	r1, [r7, #25]
 8002bb4:	9201      	str	r2, [sp, #4]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2301      	movs	r3, #1
 8002bba:	4622      	mov	r2, r4
 8002bbc:	f7fe faff 	bl	80011be <Encrypt_Payload>
 8002bc0:	e00e      	b.n	8002be0 <decode_phy_payload+0x160>
		} else {
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002bc2:	7efb      	ldrb	r3, [r7, #27]
 8002bc4:	68ba      	ldr	r2, [r7, #8]
 8002bc6:	18d0      	adds	r0, r2, r3
 8002bc8:	8bbc      	ldrh	r4, [r7, #28]
			                1, handle->application_session_key, handle->device_address);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3326      	adds	r3, #38	@ 0x26
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	3212      	adds	r2, #18
			Encrypt_Payload(&payload_buf[frame_payload_start], frame_payload_length, rx_frame_count,
 8002bd2:	7e79      	ldrb	r1, [r7, #25]
 8002bd4:	9201      	str	r2, [sp, #4]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2301      	movs	r3, #1
 8002bda:	4622      	mov	r2, r4
 8002bdc:	f7fe faef 	bl	80011be <Encrypt_Payload>
		}

		*decoded_frame_payload_ptr = &payload_buf[frame_payload_start];
 8002be0:	7efb      	ldrb	r3, [r7, #27]
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	441a      	add	r2, r3
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	601a      	str	r2, [r3, #0]
		*decoded_frame_payload_length = frame_payload_length;
 8002bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bec:	7e7a      	ldrb	r2, [r7, #25]
 8002bee:	701a      	strb	r2, [r3, #0]
	}

	return true;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3724      	adds	r7, #36	@ 0x24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd90      	pop	{r4, r7, pc}

08002bfa <select_random_channel>:

static uint8_t select_random_channel(rfm95_handle_t *handle)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
	uint8_t channel_count = 0;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]

	for (uint8_t i = 0; i < 16; i++) {
 8002c06:	2300      	movs	r3, #0
 8002c08:	73bb      	strb	r3, [r7, #14]
 8002c0a:	e010      	b.n	8002c2e <select_random_channel+0x34>
		if (handle->config.channel_mask & (1 << i)) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8002c12:	461a      	mov	r2, r3
 8002c14:	7bbb      	ldrb	r3, [r7, #14]
 8002c16:	fa42 f303 	asr.w	r3, r2, r3
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d002      	beq.n	8002c28 <select_random_channel+0x2e>
			channel_count++;
 8002c22:	7bfb      	ldrb	r3, [r7, #15]
 8002c24:	3301      	adds	r3, #1
 8002c26:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < 16; i++) {
 8002c28:	7bbb      	ldrb	r3, [r7, #14]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	73bb      	strb	r3, [r7, #14]
 8002c2e:	7bbb      	ldrb	r3, [r7, #14]
 8002c30:	2b0f      	cmp	r3, #15
 8002c32:	d9eb      	bls.n	8002c0c <select_random_channel+0x12>
		}
	}

	uint8_t random_channel = handle->random_int(channel_count);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c38:	7bfa      	ldrb	r2, [r7, #15]
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4798      	blx	r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	737b      	strb	r3, [r7, #13]

	for (uint8_t i = 0; i < 16; i++) {
 8002c42:	2300      	movs	r3, #0
 8002c44:	733b      	strb	r3, [r7, #12]
 8002c46:	e015      	b.n	8002c74 <select_random_channel+0x7a>
		if (handle->config.channel_mask & (1 << i)) {
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	@ 0xa8
 8002c4e:	461a      	mov	r2, r3
 8002c50:	7b3b      	ldrb	r3, [r7, #12]
 8002c52:	fa42 f303 	asr.w	r3, r2, r3
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <select_random_channel+0x74>
			if (random_channel == 0) {
 8002c5e:	7b7b      	ldrb	r3, [r7, #13]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <select_random_channel+0x6e>
				return i;
 8002c64:	7b3b      	ldrb	r3, [r7, #12]
 8002c66:	e009      	b.n	8002c7c <select_random_channel+0x82>
			} else {
				random_channel--;
 8002c68:	7b7b      	ldrb	r3, [r7, #13]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	737b      	strb	r3, [r7, #13]
	for (uint8_t i = 0; i < 16; i++) {
 8002c6e:	7b3b      	ldrb	r3, [r7, #12]
 8002c70:	3301      	adds	r3, #1
 8002c72:	733b      	strb	r3, [r7, #12]
 8002c74:	7b3b      	ldrb	r3, [r7, #12]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	d9e6      	bls.n	8002c48 <select_random_channel+0x4e>
			}
		}
	}

	return 0;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <rfm95_send_receive_cycle>:

bool rfm95_send_receive_cycle(rfm95_handle_t *handle, const uint8_t *send_data, size_t send_data_length)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b0aa      	sub	sp, #168	@ 0xa8
 8002c88:	af02      	add	r7, sp, #8
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
	uint8_t phy_payload_buf[64] = { 0 };
 8002c90:	2300      	movs	r3, #0
 8002c92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c94:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002c98:	223c      	movs	r2, #60	@ 0x3c
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f002 fb74 	bl	800538a <memset>

	// Build the up-link phy payload.
	size_t phy_payload_len = encode_phy_payload(handle, phy_payload_buf, send_data, send_data_length, 1);
 8002ca2:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	9300      	str	r3, [sp, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	68f8      	ldr	r0, [r7, #12]
 8002cb0:	f7ff fe30 	bl	8002914 <encode_phy_payload>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	65bb      	str	r3, [r7, #88]	@ 0x58

	uint8_t random_channel = select_random_channel(handle);
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f7ff ff9e 	bl	8002bfa <select_random_channel>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

	uint32_t tx_ticks;

	// Send the requested up-link.
	if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel, &tx_ticks)) {
 8002cc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002cc6:	f897 009f 	ldrb.w	r0, [r7, #159]	@ 0x9f
 8002cca:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002cce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f7ff fd2a 	bl	8002730 <send_package>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	f083 0301 	eor.w	r3, r3, #1
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <rfm95_send_receive_cycle+0x72>
		write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002ce8:	2280      	movs	r2, #128	@ 0x80
 8002cea:	2101      	movs	r1, #1
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f7fe fd83 	bl	80017f8 <write_register>
		return false;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e0af      	b.n	8002e56 <rfm95_send_receive_cycle+0x1d2>
	}

	// Clear phy payload buffer to reuse for the down-link message.
	memset(phy_payload_buf, 0x00, sizeof(phy_payload_buf));
 8002cf6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002cfa:	2240      	movs	r2, #64	@ 0x40
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f002 fb43 	bl	800538a <memset>
	phy_payload_len = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	65bb      	str	r3, [r7, #88]	@ 0x58

	// Only receive if configured to do so.
	if (handle->receive_mode != RFM95_RECEIVE_MODE_NONE) {
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	f000 8096 	beq.w	8002e40 <rfm95_send_receive_cycle+0x1bc>

		int8_t snr;

		// Try receiving a down-link.
		if (!receive_package(handle, tx_ticks, phy_payload_buf, &phy_payload_len, &snr)) {
 8002d14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d16:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8002d1a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8002d1e:	f107 0353 	add.w	r3, r7, #83	@ 0x53
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	4603      	mov	r3, r0
 8002d26:	68f8      	ldr	r0, [r7, #12]
 8002d28:	f7ff fb8e 	bl	8002448 <receive_package>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	f083 0301 	eor.w	r3, r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d010      	beq.n	8002d5a <rfm95_send_receive_cycle+0xd6>
			write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002d38:	2280      	movs	r2, #128	@ 0x80
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f7fe fd5b 	bl	80017f8 <write_register>
			if (handle->save_config) {
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d005      	beq.n	8002d56 <rfm95_send_receive_cycle+0xd2>
				handle->save_config(&(handle->config));
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4e:	68fa      	ldr	r2, [r7, #12]
 8002d50:	3260      	adds	r2, #96	@ 0x60
 8002d52:	4610      	mov	r0, r2
 8002d54:	4798      	blx	r3
			}
			return false;
 8002d56:	2300      	movs	r3, #0
 8002d58:	e07d      	b.n	8002e56 <rfm95_send_receive_cycle+0x1d2>
		}

		// Any RX payload was received.
		if (phy_payload_len != 0) {
 8002d5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d06f      	beq.n	8002e40 <rfm95_send_receive_cycle+0x1bc>

			uint8_t *frame_payload;
			uint8_t frame_payload_len = 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
			uint8_t frame_port;

			// Try decoding the frame payload.
			if (decode_phy_payload(handle, phy_payload_buf, phy_payload_len, &frame_payload, &frame_payload_len,
 8002d66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8002d6e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002d72:	f107 034a 	add.w	r3, r7, #74	@ 0x4a
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	f107 034b 	add.w	r3, r7, #75	@ 0x4b
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	4603      	mov	r3, r0
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff fe7d 	bl	8002a80 <decode_phy_payload>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d059      	beq.n	8002e40 <rfm95_send_receive_cycle+0x1bc>
			                       &frame_port)) {

				// Process Mac Commands
				if (frame_port == 0) {
 8002d8c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d155      	bne.n	8002e40 <rfm95_send_receive_cycle+0x1bc>

					uint8_t mac_response_data[51] = {0};
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	f107 0318 	add.w	r3, r7, #24
 8002d9c:	222f      	movs	r2, #47	@ 0x2f
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 faf2 	bl	800538a <memset>
					uint8_t mac_response_len = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49

					if (process_mac_commands(handle, frame_payload, frame_payload_len, mac_response_data,
 8002dac:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8002dae:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8002db2:	4618      	mov	r0, r3
 8002db4:	f997 3053 	ldrsb.w	r3, [r7, #83]	@ 0x53
 8002db8:	f107 0214 	add.w	r2, r7, #20
 8002dbc:	9301      	str	r3, [sp, #4]
 8002dbe:	f107 0349 	add.w	r3, r7, #73	@ 0x49
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff f87b 	bl	8001ec4 <process_mac_commands>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d035      	beq.n	8002e40 <rfm95_send_receive_cycle+0x1bc>
					                         &mac_response_len, snr) && mac_response_len != 0) {
 8002dd4:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d031      	beq.n	8002e40 <rfm95_send_receive_cycle+0x1bc>

						// Build the up-link phy payload.
						phy_payload_len = encode_phy_payload(handle, phy_payload_buf, mac_response_data,
 8002ddc:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8002de0:	4618      	mov	r0, r3
 8002de2:	f107 0214 	add.w	r2, r7, #20
 8002de6:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002dea:	2300      	movs	r3, #0
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	4603      	mov	r3, r0
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f7ff fd8f 	bl	8002914 <encode_phy_payload>
 8002df6:	4603      	mov	r3, r0
 8002df8:	65bb      	str	r3, [r7, #88]	@ 0x58
						                                     mac_response_len, 0);

						if (!send_package(handle, phy_payload_buf, phy_payload_len, random_channel,
 8002dfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dfc:	f897 009f 	ldrb.w	r0, [r7, #159]	@ 0x9f
 8002e00:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8002e04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e08:	9300      	str	r3, [sp, #0]
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff fc8f 	bl	8002730 <send_package>
 8002e12:	4603      	mov	r3, r0
 8002e14:	f083 0301 	eor.w	r3, r3, #1
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d010      	beq.n	8002e40 <rfm95_send_receive_cycle+0x1bc>
						                  &tx_ticks)) {
							write_register(handle, RFM95_REGISTER_OP_MODE, RFM95_REGISTER_OP_MODE_LORA_SLEEP);
 8002e1e:	2280      	movs	r2, #128	@ 0x80
 8002e20:	2101      	movs	r1, #1
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	f7fe fce8 	bl	80017f8 <write_register>
							if (handle->save_config) {
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d005      	beq.n	8002e3c <rfm95_send_receive_cycle+0x1b8>
								handle->save_config(&(handle->config));
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	3260      	adds	r2, #96	@ 0x60
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4798      	blx	r3
							}
							return false;
 8002e3c:	2300      	movs	r3, #0
			return false;
 8002e3e:	e00a      	b.n	8002e56 <rfm95_send_receive_cycle+0x1d2>
				}
			}
		}
	}

	if (handle->save_config) {
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d005      	beq.n	8002e54 <rfm95_send_receive_cycle+0x1d0>
		handle->save_config(&(handle->config));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	3260      	adds	r2, #96	@ 0x60
 8002e50:	4610      	mov	r0, r2
 8002e52:	4798      	blx	r3
	}

	return true;
 8002e54:	2301      	movs	r3, #1
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	37a0      	adds	r7, #160	@ 0xa0
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <rfm95_on_interrupt>:

void rfm95_on_interrupt(rfm95_handle_t *handle, rfm95_interrupt_t interrupt)
{
 8002e5e:	b590      	push	{r4, r7, lr}
 8002e60:	b083      	sub	sp, #12
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
 8002e66:	460b      	mov	r3, r1
 8002e68:	70fb      	strb	r3, [r7, #3]
	handle->interrupt_times[interrupt] = handle->get_precision_tick();
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	78fc      	ldrb	r4, [r7, #3]
 8002e70:	4798      	blx	r3
 8002e72:	4601      	mov	r1, r0
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	f104 032a 	add.w	r3, r4, #42	@ 0x2a
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	6059      	str	r1, [r3, #4]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd90      	pop	{r4, r7, pc}

08002e88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e92:	2003      	movs	r0, #3
 8002e94:	f000 f960 	bl	8003158 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f000 f80d 	bl	8002eb8 <HAL_InitTick>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d002      	beq.n	8002eaa <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	71fb      	strb	r3, [r7, #7]
 8002ea8:	e001      	b.n	8002eae <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002eaa:	f7fd fd3d 	bl	8000928 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002eae:	79fb      	ldrb	r3, [r7, #7]
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3708      	adds	r7, #8
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ec4:	4b17      	ldr	r3, [pc, #92]	@ (8002f24 <HAL_InitTick+0x6c>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d023      	beq.n	8002f14 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002ecc:	4b16      	ldr	r3, [pc, #88]	@ (8002f28 <HAL_InitTick+0x70>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b14      	ldr	r3, [pc, #80]	@ (8002f24 <HAL_InitTick+0x6c>)
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f96d 	bl	80031c2 <HAL_SYSTICK_Config>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10f      	bne.n	8002f0e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2b0f      	cmp	r3, #15
 8002ef2:	d809      	bhi.n	8002f08 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8002efc:	f000 f937 	bl	800316e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f00:	4a0a      	ldr	r2, [pc, #40]	@ (8002f2c <HAL_InitTick+0x74>)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e007      	b.n	8002f18 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]
 8002f0c:	e004      	b.n	8002f18 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
 8002f12:	e001      	b.n	8002f18 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	200001c0 	.word	0x200001c0
 8002f28:	200000b8 	.word	0x200000b8
 8002f2c:	200001bc 	.word	0x200001bc

08002f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <HAL_IncTick+0x20>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b06      	ldr	r3, [pc, #24]	@ (8002f54 <HAL_IncTick+0x24>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4413      	add	r3, r2
 8002f40:	4a04      	ldr	r2, [pc, #16]	@ (8002f54 <HAL_IncTick+0x24>)
 8002f42:	6013      	str	r3, [r2, #0]
}
 8002f44:	bf00      	nop
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	200001c0 	.word	0x200001c0
 8002f54:	200002b4 	.word	0x200002b4

08002f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f5c:	4b03      	ldr	r3, [pc, #12]	@ (8002f6c <HAL_GetTick+0x14>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	200002b4 	.word	0x200002b4

08002f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f78:	f7ff ffee 	bl	8002f58 <HAL_GetTick>
 8002f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f88:	d005      	beq.n	8002f96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002fb4 <HAL_Delay+0x44>)
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	461a      	mov	r2, r3
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	4413      	add	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f96:	bf00      	nop
 8002f98:	f7ff ffde 	bl	8002f58 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d8f7      	bhi.n	8002f98 <HAL_Delay+0x28>
  {
  }
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	200001c0 	.word	0x200001c0

08002fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ffc <__NVIC_SetPriorityGrouping+0x44>)
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fe0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002fe4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fea:	4a04      	ldr	r2, [pc, #16]	@ (8002ffc <__NVIC_SetPriorityGrouping+0x44>)
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	60d3      	str	r3, [r2, #12]
}
 8002ff0:	bf00      	nop
 8002ff2:	3714      	adds	r7, #20
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr
 8002ffc:	e000ed00 	.word	0xe000ed00

08003000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003004:	4b04      	ldr	r3, [pc, #16]	@ (8003018 <__NVIC_GetPriorityGrouping+0x18>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	0a1b      	lsrs	r3, r3, #8
 800300a:	f003 0307 	and.w	r3, r3, #7
}
 800300e:	4618      	mov	r0, r3
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	4603      	mov	r3, r0
 8003024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	2b00      	cmp	r3, #0
 800302c:	db0b      	blt.n	8003046 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800302e:	79fb      	ldrb	r3, [r7, #7]
 8003030:	f003 021f 	and.w	r2, r3, #31
 8003034:	4907      	ldr	r1, [pc, #28]	@ (8003054 <__NVIC_EnableIRQ+0x38>)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	2001      	movs	r0, #1
 800303e:	fa00 f202 	lsl.w	r2, r0, r2
 8003042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	e000e100 	.word	0xe000e100

08003058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	6039      	str	r1, [r7, #0]
 8003062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	2b00      	cmp	r3, #0
 800306a:	db0a      	blt.n	8003082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	b2da      	uxtb	r2, r3
 8003070:	490c      	ldr	r1, [pc, #48]	@ (80030a4 <__NVIC_SetPriority+0x4c>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	0112      	lsls	r2, r2, #4
 8003078:	b2d2      	uxtb	r2, r2
 800307a:	440b      	add	r3, r1
 800307c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003080:	e00a      	b.n	8003098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	4908      	ldr	r1, [pc, #32]	@ (80030a8 <__NVIC_SetPriority+0x50>)
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	3b04      	subs	r3, #4
 8003090:	0112      	lsls	r2, r2, #4
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	440b      	add	r3, r1
 8003096:	761a      	strb	r2, [r3, #24]
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	e000e100 	.word	0xe000e100
 80030a8:	e000ed00 	.word	0xe000ed00

080030ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b089      	sub	sp, #36	@ 0x24
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f003 0307 	and.w	r3, r3, #7
 80030be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f1c3 0307 	rsb	r3, r3, #7
 80030c6:	2b04      	cmp	r3, #4
 80030c8:	bf28      	it	cs
 80030ca:	2304      	movcs	r3, #4
 80030cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	3304      	adds	r3, #4
 80030d2:	2b06      	cmp	r3, #6
 80030d4:	d902      	bls.n	80030dc <NVIC_EncodePriority+0x30>
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	3b03      	subs	r3, #3
 80030da:	e000      	b.n	80030de <NVIC_EncodePriority+0x32>
 80030dc:	2300      	movs	r3, #0
 80030de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030e0:	f04f 32ff 	mov.w	r2, #4294967295
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	43da      	mvns	r2, r3
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	401a      	ands	r2, r3
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030f4:	f04f 31ff 	mov.w	r1, #4294967295
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	fa01 f303 	lsl.w	r3, r1, r3
 80030fe:	43d9      	mvns	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003104:	4313      	orrs	r3, r2
         );
}
 8003106:	4618      	mov	r0, r3
 8003108:	3724      	adds	r7, #36	@ 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	3b01      	subs	r3, #1
 8003120:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003124:	d301      	bcc.n	800312a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003126:	2301      	movs	r3, #1
 8003128:	e00f      	b.n	800314a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800312a:	4a0a      	ldr	r2, [pc, #40]	@ (8003154 <SysTick_Config+0x40>)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003132:	210f      	movs	r1, #15
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	f7ff ff8e 	bl	8003058 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800313c:	4b05      	ldr	r3, [pc, #20]	@ (8003154 <SysTick_Config+0x40>)
 800313e:	2200      	movs	r2, #0
 8003140:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003142:	4b04      	ldr	r3, [pc, #16]	@ (8003154 <SysTick_Config+0x40>)
 8003144:	2207      	movs	r2, #7
 8003146:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	e000e010 	.word	0xe000e010

08003158 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f7ff ff29 	bl	8002fb8 <__NVIC_SetPriorityGrouping>
}
 8003166:	bf00      	nop
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b086      	sub	sp, #24
 8003172:	af00      	add	r7, sp, #0
 8003174:	4603      	mov	r3, r0
 8003176:	60b9      	str	r1, [r7, #8]
 8003178:	607a      	str	r2, [r7, #4]
 800317a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800317c:	2300      	movs	r3, #0
 800317e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003180:	f7ff ff3e 	bl	8003000 <__NVIC_GetPriorityGrouping>
 8003184:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	68b9      	ldr	r1, [r7, #8]
 800318a:	6978      	ldr	r0, [r7, #20]
 800318c:	f7ff ff8e 	bl	80030ac <NVIC_EncodePriority>
 8003190:	4602      	mov	r2, r0
 8003192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003196:	4611      	mov	r1, r2
 8003198:	4618      	mov	r0, r3
 800319a:	f7ff ff5d 	bl	8003058 <__NVIC_SetPriority>
}
 800319e:	bf00      	nop
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	4603      	mov	r3, r0
 80031ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ff31 	bl	800301c <__NVIC_EnableIRQ>
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ffa2 	bl	8003114 <SysTick_Config>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031dc:	b480      	push	{r7}
 80031de:	b087      	sub	sp, #28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031e6:	2300      	movs	r3, #0
 80031e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ea:	e14e      	b.n	800348a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	fa01 f303 	lsl.w	r3, r1, r3
 80031f8:	4013      	ands	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8140 	beq.w	8003484 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d005      	beq.n	800321c <HAL_GPIO_Init+0x40>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d130      	bne.n	800327e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4013      	ands	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003252:	2201      	movs	r2, #1
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	091b      	lsrs	r3, r3, #4
 8003268:	f003 0201 	and.w	r2, r3, #1
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	693a      	ldr	r2, [r7, #16]
 8003274:	4313      	orrs	r3, r2
 8003276:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f003 0303 	and.w	r3, r3, #3
 8003286:	2b03      	cmp	r3, #3
 8003288:	d017      	beq.n	80032ba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	2203      	movs	r2, #3
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	43db      	mvns	r3, r3
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	4013      	ands	r3, r2
 80032a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	4313      	orrs	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d123      	bne.n	800330e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	08da      	lsrs	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	3208      	adds	r2, #8
 80032ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f003 0307 	and.w	r3, r3, #7
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	220f      	movs	r2, #15
 80032de:	fa02 f303 	lsl.w	r3, r2, r3
 80032e2:	43db      	mvns	r3, r3
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	4013      	ands	r3, r2
 80032e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	08da      	lsrs	r2, r3, #3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	3208      	adds	r2, #8
 8003308:	6939      	ldr	r1, [r7, #16]
 800330a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	2203      	movs	r2, #3
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43db      	mvns	r3, r3
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	4013      	ands	r3, r2
 8003324:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f003 0203 	and.w	r2, r3, #3
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	4313      	orrs	r3, r2
 800333a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 809a 	beq.w	8003484 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003350:	4b55      	ldr	r3, [pc, #340]	@ (80034a8 <HAL_GPIO_Init+0x2cc>)
 8003352:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003354:	4a54      	ldr	r2, [pc, #336]	@ (80034a8 <HAL_GPIO_Init+0x2cc>)
 8003356:	f043 0301 	orr.w	r3, r3, #1
 800335a:	6613      	str	r3, [r2, #96]	@ 0x60
 800335c:	4b52      	ldr	r3, [pc, #328]	@ (80034a8 <HAL_GPIO_Init+0x2cc>)
 800335e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003360:	f003 0301 	and.w	r3, r3, #1
 8003364:	60bb      	str	r3, [r7, #8]
 8003366:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003368:	4a50      	ldr	r2, [pc, #320]	@ (80034ac <HAL_GPIO_Init+0x2d0>)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	089b      	lsrs	r3, r3, #2
 800336e:	3302      	adds	r3, #2
 8003370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003374:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	220f      	movs	r2, #15
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43db      	mvns	r3, r3
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4013      	ands	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003392:	d013      	beq.n	80033bc <HAL_GPIO_Init+0x1e0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a46      	ldr	r2, [pc, #280]	@ (80034b0 <HAL_GPIO_Init+0x2d4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d00d      	beq.n	80033b8 <HAL_GPIO_Init+0x1dc>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a45      	ldr	r2, [pc, #276]	@ (80034b4 <HAL_GPIO_Init+0x2d8>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d007      	beq.n	80033b4 <HAL_GPIO_Init+0x1d8>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a44      	ldr	r2, [pc, #272]	@ (80034b8 <HAL_GPIO_Init+0x2dc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <HAL_GPIO_Init+0x1d4>
 80033ac:	2303      	movs	r3, #3
 80033ae:	e006      	b.n	80033be <HAL_GPIO_Init+0x1e2>
 80033b0:	2307      	movs	r3, #7
 80033b2:	e004      	b.n	80033be <HAL_GPIO_Init+0x1e2>
 80033b4:	2302      	movs	r3, #2
 80033b6:	e002      	b.n	80033be <HAL_GPIO_Init+0x1e2>
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <HAL_GPIO_Init+0x1e2>
 80033bc:	2300      	movs	r3, #0
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	f002 0203 	and.w	r2, r2, #3
 80033c4:	0092      	lsls	r2, r2, #2
 80033c6:	4093      	lsls	r3, r2
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80033ce:	4937      	ldr	r1, [pc, #220]	@ (80034ac <HAL_GPIO_Init+0x2d0>)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	089b      	lsrs	r3, r3, #2
 80033d4:	3302      	adds	r3, #2
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033dc:	4b37      	ldr	r3, [pc, #220]	@ (80034bc <HAL_GPIO_Init+0x2e0>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	43db      	mvns	r3, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003400:	4a2e      	ldr	r2, [pc, #184]	@ (80034bc <HAL_GPIO_Init+0x2e0>)
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003406:	4b2d      	ldr	r3, [pc, #180]	@ (80034bc <HAL_GPIO_Init+0x2e0>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	43db      	mvns	r3, r3
 8003410:	693a      	ldr	r2, [r7, #16]
 8003412:	4013      	ands	r3, r2
 8003414:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800342a:	4a24      	ldr	r2, [pc, #144]	@ (80034bc <HAL_GPIO_Init+0x2e0>)
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003430:	4b22      	ldr	r3, [pc, #136]	@ (80034bc <HAL_GPIO_Init+0x2e0>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	4313      	orrs	r3, r2
 8003452:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003454:	4a19      	ldr	r2, [pc, #100]	@ (80034bc <HAL_GPIO_Init+0x2e0>)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800345a:	4b18      	ldr	r3, [pc, #96]	@ (80034bc <HAL_GPIO_Init+0x2e0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003476:	693a      	ldr	r2, [r7, #16]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800347e:	4a0f      	ldr	r2, [pc, #60]	@ (80034bc <HAL_GPIO_Init+0x2e0>)
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	3301      	adds	r3, #1
 8003488:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	fa22 f303 	lsr.w	r3, r2, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	f47f aea9 	bne.w	80031ec <HAL_GPIO_Init+0x10>
  }
}
 800349a:	bf00      	nop
 800349c:	bf00      	nop
 800349e:	371c      	adds	r7, #28
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr
 80034a8:	40021000 	.word	0x40021000
 80034ac:	40010000 	.word	0x40010000
 80034b0:	48000400 	.word	0x48000400
 80034b4:	48000800 	.word	0x48000800
 80034b8:	48000c00 	.word	0x48000c00
 80034bc:	40010400 	.word	0x40010400

080034c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
 80034cc:	4613      	mov	r3, r2
 80034ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034dc:	e002      	b.n	80034e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034fa:	4b08      	ldr	r3, [pc, #32]	@ (800351c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	88fb      	ldrh	r3, [r7, #6]
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003506:	4a05      	ldr	r2, [pc, #20]	@ (800351c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003508:	88fb      	ldrh	r3, [r7, #6]
 800350a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800350c:	88fb      	ldrh	r3, [r7, #6]
 800350e:	4618      	mov	r0, r3
 8003510:	f7fd f9e0 	bl	80008d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003514:	bf00      	nop
 8003516:	3708      	adds	r7, #8
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	40010400 	.word	0x40010400

08003520 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003524:	4b04      	ldr	r3, [pc, #16]	@ (8003538 <HAL_PWREx_GetVoltageRange+0x18>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	40007000 	.word	0x40007000

0800353c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800353c:	b480      	push	{r7}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800354a:	d130      	bne.n	80035ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800354c:	4b23      	ldr	r3, [pc, #140]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003558:	d038      	beq.n	80035cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800355a:	4b20      	ldr	r3, [pc, #128]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003562:	4a1e      	ldr	r2, [pc, #120]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003564:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003568:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800356a:	4b1d      	ldr	r3, [pc, #116]	@ (80035e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2232      	movs	r2, #50	@ 0x32
 8003570:	fb02 f303 	mul.w	r3, r2, r3
 8003574:	4a1b      	ldr	r2, [pc, #108]	@ (80035e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	0c9b      	lsrs	r3, r3, #18
 800357c:	3301      	adds	r3, #1
 800357e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003580:	e002      	b.n	8003588 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3b01      	subs	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003588:	4b14      	ldr	r3, [pc, #80]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800358a:	695b      	ldr	r3, [r3, #20]
 800358c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003590:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003594:	d102      	bne.n	800359c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1f2      	bne.n	8003582 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800359c:	4b0f      	ldr	r3, [pc, #60]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035a8:	d110      	bne.n	80035cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035aa:	2303      	movs	r3, #3
 80035ac:	e00f      	b.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ae:	4b0b      	ldr	r3, [pc, #44]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035ba:	d007      	beq.n	80035cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035bc:	4b07      	ldr	r3, [pc, #28]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035c4:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035cc:	2300      	movs	r3, #0
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40007000 	.word	0x40007000
 80035e0:	200000b8 	.word	0x200000b8
 80035e4:	431bde83 	.word	0x431bde83

080035e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08a      	sub	sp, #40	@ 0x28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d102      	bne.n	80035fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f000 bc4f 	b.w	8003e9a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fc:	4b97      	ldr	r3, [pc, #604]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003606:	4b95      	ldr	r3, [pc, #596]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80e6 	beq.w	80037ea <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d007      	beq.n	8003634 <HAL_RCC_OscConfig+0x4c>
 8003624:	6a3b      	ldr	r3, [r7, #32]
 8003626:	2b0c      	cmp	r3, #12
 8003628:	f040 808d 	bne.w	8003746 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b01      	cmp	r3, #1
 8003630:	f040 8089 	bne.w	8003746 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003634:	4b89      	ldr	r3, [pc, #548]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d006      	beq.n	800364e <HAL_RCC_OscConfig+0x66>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	f000 bc26 	b.w	8003e9a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003652:	4b82      	ldr	r3, [pc, #520]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0308 	and.w	r3, r3, #8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d004      	beq.n	8003668 <HAL_RCC_OscConfig+0x80>
 800365e:	4b7f      	ldr	r3, [pc, #508]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003666:	e005      	b.n	8003674 <HAL_RCC_OscConfig+0x8c>
 8003668:	4b7c      	ldr	r3, [pc, #496]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003674:	4293      	cmp	r3, r2
 8003676:	d224      	bcs.n	80036c2 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800367c:	4618      	mov	r0, r3
 800367e:	f000 fda1 	bl	80041c4 <RCC_SetFlashLatencyFromMSIRange>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	f000 bc06 	b.w	8003e9a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800368e:	4b73      	ldr	r3, [pc, #460]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a72      	ldr	r2, [pc, #456]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003694:	f043 0308 	orr.w	r3, r3, #8
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	4b70      	ldr	r3, [pc, #448]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036a6:	496d      	ldr	r1, [pc, #436]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036ac:	4b6b      	ldr	r3, [pc, #428]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	021b      	lsls	r3, r3, #8
 80036ba:	4968      	ldr	r1, [pc, #416]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	604b      	str	r3, [r1, #4]
 80036c0:	e025      	b.n	800370e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c2:	4b66      	ldr	r3, [pc, #408]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a65      	ldr	r2, [pc, #404]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80036c8:	f043 0308 	orr.w	r3, r3, #8
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	4b63      	ldr	r3, [pc, #396]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036da:	4960      	ldr	r1, [pc, #384]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036e0:	4b5e      	ldr	r3, [pc, #376]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	021b      	lsls	r3, r3, #8
 80036ee:	495b      	ldr	r1, [pc, #364]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036f4:	6a3b      	ldr	r3, [r7, #32]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fd60 	bl	80041c4 <RCC_SetFlashLatencyFromMSIRange>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e3c5      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800370e:	f000 fccd 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8003712:	4602      	mov	r2, r0
 8003714:	4b51      	ldr	r3, [pc, #324]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	4950      	ldr	r1, [pc, #320]	@ (8003860 <HAL_RCC_OscConfig+0x278>)
 8003720:	5ccb      	ldrb	r3, [r1, r3]
 8003722:	f003 031f 	and.w	r3, r3, #31
 8003726:	fa22 f303 	lsr.w	r3, r2, r3
 800372a:	4a4e      	ldr	r2, [pc, #312]	@ (8003864 <HAL_RCC_OscConfig+0x27c>)
 800372c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800372e:	4b4e      	ldr	r3, [pc, #312]	@ (8003868 <HAL_RCC_OscConfig+0x280>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff fbc0 	bl	8002eb8 <HAL_InitTick>
 8003738:	4603      	mov	r3, r0
 800373a:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 800373c:	7dfb      	ldrb	r3, [r7, #23]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d052      	beq.n	80037e8 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8003742:	7dfb      	ldrb	r3, [r7, #23]
 8003744:	e3a9      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d032      	beq.n	80037b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800374e:	4b43      	ldr	r3, [pc, #268]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a42      	ldr	r2, [pc, #264]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800375a:	f7ff fbfd 	bl	8002f58 <HAL_GetTick>
 800375e:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003762:	f7ff fbf9 	bl	8002f58 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e392      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003774:	4b39      	ldr	r3, [pc, #228]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003780:	4b36      	ldr	r3, [pc, #216]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a35      	ldr	r2, [pc, #212]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003786:	f043 0308 	orr.w	r3, r3, #8
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b33      	ldr	r3, [pc, #204]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003798:	4930      	ldr	r1, [pc, #192]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 800379a:	4313      	orrs	r3, r2
 800379c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800379e:	4b2f      	ldr	r3, [pc, #188]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	492b      	ldr	r1, [pc, #172]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	604b      	str	r3, [r1, #4]
 80037b2:	e01a      	b.n	80037ea <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037b4:	4b29      	ldr	r3, [pc, #164]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a28      	ldr	r2, [pc, #160]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80037c0:	f7ff fbca 	bl	8002f58 <HAL_GetTick>
 80037c4:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037c8:	f7ff fbc6 	bl	8002f58 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e35f      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80037da:	4b20      	ldr	r3, [pc, #128]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x1e0>
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d073      	beq.n	80038de <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80037f6:	6a3b      	ldr	r3, [r7, #32]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_OscConfig+0x220>
 80037fc:	6a3b      	ldr	r3, [r7, #32]
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d10e      	bne.n	8003820 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	2b03      	cmp	r3, #3
 8003806:	d10b      	bne.n	8003820 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003808:	4b14      	ldr	r3, [pc, #80]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d063      	beq.n	80038dc <HAL_RCC_OscConfig+0x2f4>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d15f      	bne.n	80038dc <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e33c      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003828:	d106      	bne.n	8003838 <HAL_RCC_OscConfig+0x250>
 800382a:	4b0c      	ldr	r3, [pc, #48]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a0b      	ldr	r2, [pc, #44]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e025      	b.n	8003884 <HAL_RCC_OscConfig+0x29c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003840:	d114      	bne.n	800386c <HAL_RCC_OscConfig+0x284>
 8003842:	4b06      	ldr	r3, [pc, #24]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a05      	ldr	r2, [pc, #20]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	4b03      	ldr	r3, [pc, #12]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a02      	ldr	r2, [pc, #8]	@ (800385c <HAL_RCC_OscConfig+0x274>)
 8003854:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	e013      	b.n	8003884 <HAL_RCC_OscConfig+0x29c>
 800385c:	40021000 	.word	0x40021000
 8003860:	08006360 	.word	0x08006360
 8003864:	200000b8 	.word	0x200000b8
 8003868:	200001bc 	.word	0x200001bc
 800386c:	4b8f      	ldr	r3, [pc, #572]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a8e      	ldr	r2, [pc, #568]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003872:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003876:	6013      	str	r3, [r2, #0]
 8003878:	4b8c      	ldr	r3, [pc, #560]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a8b      	ldr	r2, [pc, #556]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800387e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003882:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d013      	beq.n	80038b4 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7ff fb64 	bl	8002f58 <HAL_GetTick>
 8003890:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003894:	f7ff fb60 	bl	8002f58 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	@ 0x64
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e2f9      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038a6:	4b81      	ldr	r3, [pc, #516]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d0f0      	beq.n	8003894 <HAL_RCC_OscConfig+0x2ac>
 80038b2:	e014      	b.n	80038de <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7ff fb50 	bl	8002f58 <HAL_GetTick>
 80038b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038bc:	f7ff fb4c 	bl	8002f58 <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	69bb      	ldr	r3, [r7, #24]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b64      	cmp	r3, #100	@ 0x64
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e2e5      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038ce:	4b77      	ldr	r3, [pc, #476]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x2d4>
 80038da:	e000      	b.n	80038de <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d060      	beq.n	80039ac <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80038ea:	6a3b      	ldr	r3, [r7, #32]
 80038ec:	2b04      	cmp	r3, #4
 80038ee:	d005      	beq.n	80038fc <HAL_RCC_OscConfig+0x314>
 80038f0:	6a3b      	ldr	r3, [r7, #32]
 80038f2:	2b0c      	cmp	r3, #12
 80038f4:	d119      	bne.n	800392a <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d116      	bne.n	800392a <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038fc:	4b6b      	ldr	r3, [pc, #428]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003904:	2b00      	cmp	r3, #0
 8003906:	d005      	beq.n	8003914 <HAL_RCC_OscConfig+0x32c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d101      	bne.n	8003914 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e2c2      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003914:	4b65      	ldr	r3, [pc, #404]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	061b      	lsls	r3, r3, #24
 8003922:	4962      	ldr	r1, [pc, #392]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003924:	4313      	orrs	r3, r2
 8003926:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003928:	e040      	b.n	80039ac <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d023      	beq.n	800397a <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003932:	4b5e      	ldr	r3, [pc, #376]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a5d      	ldr	r2, [pc, #372]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003938:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800393c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7ff fb0b 	bl	8002f58 <HAL_GetTick>
 8003942:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003946:	f7ff fb07 	bl	8002f58 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e2a0      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003958:	4b54      	ldr	r3, [pc, #336]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b51      	ldr	r3, [pc, #324]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	061b      	lsls	r3, r3, #24
 8003972:	494e      	ldr	r1, [pc, #312]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003974:	4313      	orrs	r3, r2
 8003976:	604b      	str	r3, [r1, #4]
 8003978:	e018      	b.n	80039ac <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397a:	4b4c      	ldr	r3, [pc, #304]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a4b      	ldr	r2, [pc, #300]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003980:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7ff fae7 	bl	8002f58 <HAL_GetTick>
 800398a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800398c:	e008      	b.n	80039a0 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800398e:	f7ff fae3 	bl	8002f58 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d901      	bls.n	80039a0 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e27c      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039a0:	4b42      	ldr	r3, [pc, #264]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1f0      	bne.n	800398e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 8082 	beq.w	8003abe <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	695b      	ldr	r3, [r3, #20]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d05f      	beq.n	8003a82 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80039c2:	4b3a      	ldr	r3, [pc, #232]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039c8:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d037      	beq.n	8003a48 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e254      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01b      	beq.n	8003a32 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 80039fa:	4b2c      	ldr	r3, [pc, #176]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 80039fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a00:	4a2a      	ldr	r2, [pc, #168]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	f023 0301 	bic.w	r3, r3, #1
 8003a06:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a0a:	f7ff faa5 	bl	8002f58 <HAL_GetTick>
 8003a0e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a12:	f7ff faa1 	bl	8002f58 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b11      	cmp	r3, #17
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e23a      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a24:	4b21      	ldr	r3, [pc, #132]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ef      	bne.n	8003a12 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8003a32:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a38:	f023 0210 	bic.w	r2, r3, #16
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	491a      	ldr	r1, [pc, #104]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a48:	4b18      	ldr	r3, [pc, #96]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a4e:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a50:	f043 0301 	orr.w	r3, r3, #1
 8003a54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a58:	f7ff fa7e 	bl	8002f58 <HAL_GetTick>
 8003a5c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a60:	f7ff fa7a 	bl	8002f58 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b11      	cmp	r3, #17
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e213      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a72:	4b0e      	ldr	r3, [pc, #56]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d0ef      	beq.n	8003a60 <HAL_RCC_OscConfig+0x478>
 8003a80:	e01d      	b.n	8003abe <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a82:	4b0a      	ldr	r3, [pc, #40]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a88:	4a08      	ldr	r2, [pc, #32]	@ (8003aac <HAL_RCC_OscConfig+0x4c4>)
 8003a8a:	f023 0301 	bic.w	r3, r3, #1
 8003a8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a92:	f7ff fa61 	bl	8002f58 <HAL_GetTick>
 8003a96:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a98:	e00a      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a9a:	f7ff fa5d 	bl	8002f58 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b11      	cmp	r3, #17
 8003aa6:	d903      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e1f6      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
 8003aac:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ab0:	4ba9      	ldr	r3, [pc, #676]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ab6:	f003 0302 	and.w	r3, r3, #2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1ed      	bne.n	8003a9a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0304 	and.w	r3, r3, #4
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80bd 	beq.w	8003c46 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ad2:	4ba1      	ldr	r3, [pc, #644]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10e      	bne.n	8003afc <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ade:	4b9e      	ldr	r3, [pc, #632]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003ae0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae2:	4a9d      	ldr	r2, [pc, #628]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003ae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003aea:	4b9b      	ldr	r3, [pc, #620]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003aec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003af6:	2301      	movs	r3, #1
 8003af8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003afc:	4b97      	ldr	r3, [pc, #604]	@ (8003d5c <HAL_RCC_OscConfig+0x774>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d118      	bne.n	8003b3a <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b08:	4b94      	ldr	r3, [pc, #592]	@ (8003d5c <HAL_RCC_OscConfig+0x774>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a93      	ldr	r2, [pc, #588]	@ (8003d5c <HAL_RCC_OscConfig+0x774>)
 8003b0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b14:	f7ff fa20 	bl	8002f58 <HAL_GetTick>
 8003b18:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b1a:	e008      	b.n	8003b2e <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b1c:	f7ff fa1c 	bl	8002f58 <HAL_GetTick>
 8003b20:	4602      	mov	r2, r0
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	1ad3      	subs	r3, r2, r3
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d901      	bls.n	8003b2e <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8003b2a:	2303      	movs	r3, #3
 8003b2c:	e1b5      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b2e:	4b8b      	ldr	r3, [pc, #556]	@ (8003d5c <HAL_RCC_OscConfig+0x774>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d0f0      	beq.n	8003b1c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d02c      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8003b46:	4b84      	ldr	r3, [pc, #528]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b4c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b58:	497f      	ldr	r1, [pc, #508]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d010      	beq.n	8003b8e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003b6c:	4b7a      	ldr	r3, [pc, #488]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b72:	4a79      	ldr	r2, [pc, #484]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b74:	f043 0304 	orr.w	r3, r3, #4
 8003b78:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b7c:	4b76      	ldr	r3, [pc, #472]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b82:	4a75      	ldr	r2, [pc, #468]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b84:	f043 0301 	orr.w	r3, r3, #1
 8003b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b8c:	e018      	b.n	8003bc0 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003b8e:	4b72      	ldr	r3, [pc, #456]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b94:	4a70      	ldr	r2, [pc, #448]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003b9e:	e00f      	b.n	8003bc0 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003ba0:	4b6d      	ldr	r3, [pc, #436]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ba6:	4a6c      	ldr	r2, [pc, #432]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003bb0:	4b69      	ldr	r3, [pc, #420]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bb6:	4a68      	ldr	r2, [pc, #416]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003bb8:	f023 0304 	bic.w	r3, r3, #4
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d016      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc8:	f7ff f9c6 	bl	8002f58 <HAL_GetTick>
 8003bcc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bce:	e00a      	b.n	8003be6 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bd0:	f7ff f9c2 	bl	8002f58 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e159      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003be6:	4b5c      	ldr	r3, [pc, #368]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d0ed      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x5e8>
 8003bf4:	e01d      	b.n	8003c32 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf6:	f7ff f9af 	bl	8002f58 <HAL_GetTick>
 8003bfa:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bfe:	f7ff f9ab 	bl	8002f58 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d901      	bls.n	8003c14 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e142      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c14:	4b50      	ldr	r3, [pc, #320]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1ed      	bne.n	8003bfe <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8003c22:	4b4d      	ldr	r3, [pc, #308]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c28:	4a4b      	ldr	r2, [pc, #300]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c2e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3a:	4b47      	ldr	r3, [pc, #284]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3e:	4a46      	ldr	r2, [pc, #280]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c44:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0320 	and.w	r3, r3, #32
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d03c      	beq.n	8003ccc <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d01c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003c5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c60:	4a3d      	ldr	r2, [pc, #244]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003c62:	f043 0301 	orr.w	r3, r3, #1
 8003c66:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c6a:	f7ff f975 	bl	8002f58 <HAL_GetTick>
 8003c6e:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c72:	f7ff f971 	bl	8002f58 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e10a      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c84:	4b34      	ldr	r3, [pc, #208]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003c86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ef      	beq.n	8003c72 <HAL_RCC_OscConfig+0x68a>
 8003c92:	e01b      	b.n	8003ccc <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c94:	4b30      	ldr	r3, [pc, #192]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003c9a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003c9c:	f023 0301 	bic.w	r3, r3, #1
 8003ca0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca4:	f7ff f958 	bl	8002f58 <HAL_GetTick>
 8003ca8:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003caa:	e008      	b.n	8003cbe <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003cac:	f7ff f954 	bl	8002f58 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0ed      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cbe:	4b26      	ldr	r3, [pc, #152]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003cc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ef      	bne.n	8003cac <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	f000 80e1 	beq.w	8003e98 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	f040 80b5 	bne.w	8003e4a <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	f003 0203 	and.w	r2, r3, #3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d124      	bne.n	8003d3e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d11b      	bne.n	8003d3e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d113      	bne.n	8003d3e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d20:	085b      	lsrs	r3, r3, #1
 8003d22:	3b01      	subs	r3, #1
 8003d24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d109      	bne.n	8003d3e <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d34:	085b      	lsrs	r3, r3, #1
 8003d36:	3b01      	subs	r3, #1
 8003d38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3a:	429a      	cmp	r2, r3
 8003d3c:	d05f      	beq.n	8003dfe <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	2b0c      	cmp	r3, #12
 8003d42:	d05a      	beq.n	8003dfa <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d44:	4b04      	ldr	r3, [pc, #16]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a03      	ldr	r2, [pc, #12]	@ (8003d58 <HAL_RCC_OscConfig+0x770>)
 8003d4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d50:	f7ff f902 	bl	8002f58 <HAL_GetTick>
 8003d54:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d56:	e00c      	b.n	8003d72 <HAL_RCC_OscConfig+0x78a>
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d60:	f7ff f8fa 	bl	8002f58 <HAL_GetTick>
 8003d64:	4602      	mov	r2, r0
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e093      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d72:	4b4c      	ldr	r3, [pc, #304]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	4b49      	ldr	r3, [pc, #292]	@ (8003ea8 <HAL_RCC_OscConfig+0x8c0>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003d8e:	3a01      	subs	r2, #1
 8003d90:	0112      	lsls	r2, r2, #4
 8003d92:	4311      	orrs	r1, r2
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d98:	0212      	lsls	r2, r2, #8
 8003d9a:	4311      	orrs	r1, r2
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003da0:	0852      	lsrs	r2, r2, #1
 8003da2:	3a01      	subs	r2, #1
 8003da4:	0552      	lsls	r2, r2, #21
 8003da6:	4311      	orrs	r1, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003dac:	0852      	lsrs	r2, r2, #1
 8003dae:	3a01      	subs	r2, #1
 8003db0:	0652      	lsls	r2, r2, #25
 8003db2:	430a      	orrs	r2, r1
 8003db4:	493b      	ldr	r1, [pc, #236]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003dba:	4b3a      	ldr	r3, [pc, #232]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a39      	ldr	r2, [pc, #228]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003dc0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dc4:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003dc6:	4b37      	ldr	r3, [pc, #220]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	4a36      	ldr	r2, [pc, #216]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003dcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003dd0:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dd2:	f7ff f8c1 	bl	8002f58 <HAL_GetTick>
 8003dd6:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dda:	f7ff f8bd 	bl	8002f58 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e056      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dec:	4b2d      	ldr	r3, [pc, #180]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0f0      	beq.n	8003dda <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003df8:	e04e      	b.n	8003e98 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e04d      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfe:	4b29      	ldr	r3, [pc, #164]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d146      	bne.n	8003e98 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e0a:	4b26      	ldr	r3, [pc, #152]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a25      	ldr	r2, [pc, #148]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e14:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e16:	4b23      	ldr	r3, [pc, #140]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	4a22      	ldr	r2, [pc, #136]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e20:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e22:	f7ff f899 	bl	8002f58 <HAL_GetTick>
 8003e26:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e2a:	f7ff f895 	bl	8002f58 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e02e      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e3c:	4b19      	ldr	r3, [pc, #100]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d0f0      	beq.n	8003e2a <HAL_RCC_OscConfig+0x842>
 8003e48:	e026      	b.n	8003e98 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	d021      	beq.n	8003e94 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e50:	4b14      	ldr	r3, [pc, #80]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a13      	ldr	r2, [pc, #76]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e5c:	f7ff f87c 	bl	8002f58 <HAL_GetTick>
 8003e60:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e64:	f7ff f878 	bl	8002f58 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e011      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e76:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1f0      	bne.n	8003e64 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8003e82:	4b08      	ldr	r3, [pc, #32]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	4a07      	ldr	r2, [pc, #28]	@ (8003ea4 <HAL_RCC_OscConfig+0x8bc>)
 8003e88:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8003e8c:	f023 0303 	bic.w	r3, r3, #3
 8003e90:	60d3      	str	r3, [r2, #12]
 8003e92:	e001      	b.n	8003e98 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e000      	b.n	8003e9a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8003e98:	2300      	movs	r3, #0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3728      	adds	r7, #40	@ 0x28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	f99f808c 	.word	0xf99f808c

08003eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e0e7      	b.n	8004090 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ec0:	4b75      	ldr	r3, [pc, #468]	@ (8004098 <HAL_RCC_ClockConfig+0x1ec>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0307 	and.w	r3, r3, #7
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d910      	bls.n	8003ef0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ece:	4b72      	ldr	r3, [pc, #456]	@ (8004098 <HAL_RCC_ClockConfig+0x1ec>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f023 0207 	bic.w	r2, r3, #7
 8003ed6:	4970      	ldr	r1, [pc, #448]	@ (8004098 <HAL_RCC_ClockConfig+0x1ec>)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ede:	4b6e      	ldr	r3, [pc, #440]	@ (8004098 <HAL_RCC_ClockConfig+0x1ec>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d001      	beq.n	8003ef0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0cf      	b.n	8004090 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d010      	beq.n	8003f1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	4b66      	ldr	r3, [pc, #408]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d908      	bls.n	8003f1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f0c:	4b63      	ldr	r3, [pc, #396]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4960      	ldr	r1, [pc, #384]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d04c      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d107      	bne.n	8003f42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f32:	4b5a      	ldr	r3, [pc, #360]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d121      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e0a6      	b.n	8004090 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d107      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f4a:	4b54      	ldr	r3, [pc, #336]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d115      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e09a      	b.n	8004090 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f62:	4b4e      	ldr	r3, [pc, #312]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d109      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e08e      	b.n	8004090 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f72:	4b4a      	ldr	r3, [pc, #296]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e086      	b.n	8004090 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f82:	4b46      	ldr	r3, [pc, #280]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f023 0203 	bic.w	r2, r3, #3
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	4943      	ldr	r1, [pc, #268]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f94:	f7fe ffe0 	bl	8002f58 <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9c:	f7fe ffdc 	bl	8002f58 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e06e      	b.n	8004090 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fb2:	4b3a      	ldr	r3, [pc, #232]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	f003 020c 	and.w	r2, r3, #12
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d1eb      	bne.n	8003f9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d010      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	4b31      	ldr	r3, [pc, #196]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d208      	bcs.n	8003ff2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	492b      	ldr	r1, [pc, #172]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff2:	4b29      	ldr	r3, [pc, #164]	@ (8004098 <HAL_RCC_ClockConfig+0x1ec>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d210      	bcs.n	8004022 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004000:	4b25      	ldr	r3, [pc, #148]	@ (8004098 <HAL_RCC_ClockConfig+0x1ec>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f023 0207 	bic.w	r2, r3, #7
 8004008:	4923      	ldr	r1, [pc, #140]	@ (8004098 <HAL_RCC_ClockConfig+0x1ec>)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	4313      	orrs	r3, r2
 800400e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004010:	4b21      	ldr	r3, [pc, #132]	@ (8004098 <HAL_RCC_ClockConfig+0x1ec>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0307 	and.w	r3, r3, #7
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	429a      	cmp	r2, r3
 800401c:	d001      	beq.n	8004022 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e036      	b.n	8004090 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d008      	beq.n	8004040 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800402e:	4b1b      	ldr	r3, [pc, #108]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	4918      	ldr	r1, [pc, #96]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 800403c:	4313      	orrs	r3, r2
 800403e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d009      	beq.n	8004060 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800404c:	4b13      	ldr	r3, [pc, #76]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4910      	ldr	r1, [pc, #64]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004060:	f000 f824 	bl	80040ac <HAL_RCC_GetSysClockFreq>
 8004064:	4602      	mov	r2, r0
 8004066:	4b0d      	ldr	r3, [pc, #52]	@ (800409c <HAL_RCC_ClockConfig+0x1f0>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	091b      	lsrs	r3, r3, #4
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	490b      	ldr	r1, [pc, #44]	@ (80040a0 <HAL_RCC_ClockConfig+0x1f4>)
 8004072:	5ccb      	ldrb	r3, [r1, r3]
 8004074:	f003 031f 	and.w	r3, r3, #31
 8004078:	fa22 f303 	lsr.w	r3, r2, r3
 800407c:	4a09      	ldr	r2, [pc, #36]	@ (80040a4 <HAL_RCC_ClockConfig+0x1f8>)
 800407e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004080:	4b09      	ldr	r3, [pc, #36]	@ (80040a8 <HAL_RCC_ClockConfig+0x1fc>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fe ff17 	bl	8002eb8 <HAL_InitTick>
 800408a:	4603      	mov	r3, r0
 800408c:	72fb      	strb	r3, [r7, #11]

  return status;
 800408e:	7afb      	ldrb	r3, [r7, #11]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40022000 	.word	0x40022000
 800409c:	40021000 	.word	0x40021000
 80040a0:	08006360 	.word	0x08006360
 80040a4:	200000b8 	.word	0x200000b8
 80040a8:	200001bc 	.word	0x200001bc

080040ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b089      	sub	sp, #36	@ 0x24
 80040b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61fb      	str	r3, [r7, #28]
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040ba:	4b3e      	ldr	r3, [pc, #248]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040c4:	4b3b      	ldr	r3, [pc, #236]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	f003 0303 	and.w	r3, r3, #3
 80040cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_GetSysClockFreq+0x34>
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d121      	bne.n	800411e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d11e      	bne.n	800411e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80040e0:	4b34      	ldr	r3, [pc, #208]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d107      	bne.n	80040fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80040ec:	4b31      	ldr	r3, [pc, #196]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	61fb      	str	r3, [r7, #28]
 80040fa:	e005      	b.n	8004108 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80040fc:	4b2d      	ldr	r3, [pc, #180]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004108:	4a2b      	ldr	r2, [pc, #172]	@ (80041b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004110:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d10d      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d102      	bne.n	800412a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004124:	4b25      	ldr	r3, [pc, #148]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004126:	61bb      	str	r3, [r7, #24]
 8004128:	e004      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b08      	cmp	r3, #8
 800412e:	d101      	bne.n	8004134 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004130:	4b23      	ldr	r3, [pc, #140]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004132:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	2b0c      	cmp	r3, #12
 8004138:	d134      	bne.n	80041a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800413a:	4b1e      	ldr	r3, [pc, #120]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d003      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0xa6>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b03      	cmp	r3, #3
 800414e:	d003      	beq.n	8004158 <HAL_RCC_GetSysClockFreq+0xac>
 8004150:	e005      	b.n	800415e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004152:	4b1a      	ldr	r3, [pc, #104]	@ (80041bc <HAL_RCC_GetSysClockFreq+0x110>)
 8004154:	617b      	str	r3, [r7, #20]
      break;
 8004156:	e005      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800415a:	617b      	str	r3, [r7, #20]
      break;
 800415c:	e002      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	617b      	str	r3, [r7, #20]
      break;
 8004162:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004164:	4b13      	ldr	r3, [pc, #76]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	091b      	lsrs	r3, r3, #4
 800416a:	f003 0307 	and.w	r3, r3, #7
 800416e:	3301      	adds	r3, #1
 8004170:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004172:	4b10      	ldr	r3, [pc, #64]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	fb03 f202 	mul.w	r2, r3, r2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800418a:	4b0a      	ldr	r3, [pc, #40]	@ (80041b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	0e5b      	lsrs	r3, r3, #25
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	3301      	adds	r3, #1
 8004196:	005b      	lsls	r3, r3, #1
 8004198:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041a4:	69bb      	ldr	r3, [r7, #24]
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3724      	adds	r7, #36	@ 0x24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40021000 	.word	0x40021000
 80041b8:	08006370 	.word	0x08006370
 80041bc:	00f42400 	.word	0x00f42400
 80041c0:	007a1200 	.word	0x007a1200

080041c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80041cc:	2300      	movs	r3, #0
 80041ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80041d0:	4b2a      	ldr	r3, [pc, #168]	@ (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d003      	beq.n	80041e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80041dc:	f7ff f9a0 	bl	8003520 <HAL_PWREx_GetVoltageRange>
 80041e0:	6178      	str	r0, [r7, #20]
 80041e2:	e014      	b.n	800420e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80041e4:	4b25      	ldr	r3, [pc, #148]	@ (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041e8:	4a24      	ldr	r2, [pc, #144]	@ (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80041f0:	4b22      	ldr	r3, [pc, #136]	@ (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80041f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80041fc:	f7ff f990 	bl	8003520 <HAL_PWREx_GetVoltageRange>
 8004200:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004202:	4b1e      	ldr	r3, [pc, #120]	@ (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004204:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004206:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800420c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004214:	d10b      	bne.n	800422e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b80      	cmp	r3, #128	@ 0x80
 800421a:	d919      	bls.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004220:	d902      	bls.n	8004228 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004222:	2302      	movs	r3, #2
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	e013      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004228:	2301      	movs	r3, #1
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	e010      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b80      	cmp	r3, #128	@ 0x80
 8004232:	d902      	bls.n	800423a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004234:	2303      	movs	r3, #3
 8004236:	613b      	str	r3, [r7, #16]
 8004238:	e00a      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b80      	cmp	r3, #128	@ 0x80
 800423e:	d102      	bne.n	8004246 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004240:	2302      	movs	r3, #2
 8004242:	613b      	str	r3, [r7, #16]
 8004244:	e004      	b.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b70      	cmp	r3, #112	@ 0x70
 800424a:	d101      	bne.n	8004250 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800424c:	2301      	movs	r3, #1
 800424e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 0207 	bic.w	r2, r3, #7
 8004258:	4909      	ldr	r1, [pc, #36]	@ (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004260:	4b07      	ldr	r3, [pc, #28]	@ (8004280 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	429a      	cmp	r2, r3
 800426c:	d001      	beq.n	8004272 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e000      	b.n	8004274 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3718      	adds	r7, #24
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	40021000 	.word	0x40021000
 8004280:	40022000 	.word	0x40022000

08004284 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e095      	b.n	80043c2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429a:	2b00      	cmp	r3, #0
 800429c:	d108      	bne.n	80042b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042a6:	d009      	beq.n	80042bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	61da      	str	r2, [r3, #28]
 80042ae:	e005      	b.n	80042bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d106      	bne.n	80042dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7fc fb4a 	bl	8000970 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2202      	movs	r2, #2
 80042e0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042f2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80042fc:	d902      	bls.n	8004304 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]
 8004302:	e002      	b.n	800430a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004308:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004312:	d007      	beq.n	8004324 <HAL_SPI_Init+0xa0>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800431c:	d002      	beq.n	8004324 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004334:	431a      	orrs	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0301 	and.w	r3, r3, #1
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004352:	431a      	orrs	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004366:	ea42 0103 	orr.w	r1, r2, r3
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800436e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	430a      	orrs	r2, r1
 8004378:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	0c1b      	lsrs	r3, r3, #16
 8004380:	f003 0204 	and.w	r2, r3, #4
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	f003 0310 	and.w	r3, r3, #16
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004392:	f003 0308 	and.w	r3, r3, #8
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043a0:	ea42 0103 	orr.w	r1, r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	430a      	orrs	r2, r1
 80043b0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b088      	sub	sp, #32
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	603b      	str	r3, [r7, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80043da:	f7fe fdbd 	bl	8002f58 <HAL_GetTick>
 80043de:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80043e0:	88fb      	ldrh	r3, [r7, #6]
 80043e2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d001      	beq.n	80043f4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80043f0:	2302      	movs	r3, #2
 80043f2:	e15c      	b.n	80046ae <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d002      	beq.n	8004400 <HAL_SPI_Transmit+0x36>
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e154      	b.n	80046ae <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d101      	bne.n	8004412 <HAL_SPI_Transmit+0x48>
 800440e:	2302      	movs	r3, #2
 8004410:	e14d      	b.n	80046ae <HAL_SPI_Transmit+0x2e4>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2203      	movs	r2, #3
 800441e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	88fa      	ldrh	r2, [r7, #6]
 8004432:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2200      	movs	r2, #0
 8004444:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004464:	d10f      	bne.n	8004486 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681a      	ldr	r2, [r3, #0]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004474:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004484:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004490:	2b40      	cmp	r3, #64	@ 0x40
 8004492:	d007      	beq.n	80044a4 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80044ac:	d952      	bls.n	8004554 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_SPI_Transmit+0xf2>
 80044b6:	8b7b      	ldrh	r3, [r7, #26]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d145      	bne.n	8004548 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	1c9a      	adds	r2, r3, #2
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80044e0:	e032      	b.n	8004548 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d112      	bne.n	8004516 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	881a      	ldrh	r2, [r3, #0]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	1c9a      	adds	r2, r3, #2
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004514:	e018      	b.n	8004548 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004516:	f7fe fd1f 	bl	8002f58 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d803      	bhi.n	800452e <HAL_SPI_Transmit+0x164>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452c:	d102      	bne.n	8004534 <HAL_SPI_Transmit+0x16a>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d109      	bne.n	8004548 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e0b2      	b.n	80046ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1c7      	bne.n	80044e2 <HAL_SPI_Transmit+0x118>
 8004552:	e083      	b.n	800465c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <HAL_SPI_Transmit+0x198>
 800455c:	8b7b      	ldrh	r3, [r7, #26]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d177      	bne.n	8004652 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d912      	bls.n	8004592 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	881a      	ldrh	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b02      	subs	r3, #2
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004590:	e05f      	b.n	8004652 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	7812      	ldrb	r2, [r2, #0]
 800459e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a4:	1c5a      	adds	r2, r3, #1
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	3b01      	subs	r3, #1
 80045b2:	b29a      	uxth	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045b8:	e04b      	b.n	8004652 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d12b      	bne.n	8004620 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d912      	bls.n	80045f8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d6:	881a      	ldrh	r2, [r3, #0]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e2:	1c9a      	adds	r2, r3, #2
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b02      	subs	r3, #2
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045f6:	e02c      	b.n	8004652 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	330c      	adds	r3, #12
 8004602:	7812      	ldrb	r2, [r2, #0]
 8004604:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800461e:	e018      	b.n	8004652 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004620:	f7fe fc9a 	bl	8002f58 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	429a      	cmp	r2, r3
 800462e:	d803      	bhi.n	8004638 <HAL_SPI_Transmit+0x26e>
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004636:	d102      	bne.n	800463e <HAL_SPI_Transmit+0x274>
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2201      	movs	r2, #1
 8004642:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2200      	movs	r2, #0
 800464a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e02d      	b.n	80046ae <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004656:	b29b      	uxth	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1ae      	bne.n	80045ba <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	6839      	ldr	r1, [r7, #0]
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fcf5 	bl	8005050 <SPI_EndRxTxTransaction>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e000      	b.n	80046ae <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80046ac:	2300      	movs	r3, #0
  }
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3720      	adds	r7, #32
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b088      	sub	sp, #32
 80046ba:	af02      	add	r7, sp, #8
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	4613      	mov	r3, r2
 80046c4:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d001      	beq.n	80046d6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80046d2:	2302      	movs	r3, #2
 80046d4:	e123      	b.n	800491e <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046de:	d112      	bne.n	8004706 <HAL_SPI_Receive+0x50>
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10e      	bne.n	8004706 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2204      	movs	r2, #4
 80046ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80046f0:	88fa      	ldrh	r2, [r7, #6]
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	4613      	mov	r3, r2
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	68b9      	ldr	r1, [r7, #8]
 80046fc:	68f8      	ldr	r0, [r7, #12]
 80046fe:	f000 f912 	bl	8004926 <HAL_SPI_TransmitReceive>
 8004702:	4603      	mov	r3, r0
 8004704:	e10b      	b.n	800491e <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004706:	f7fe fc27 	bl	8002f58 <HAL_GetTick>
 800470a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_SPI_Receive+0x62>
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e100      	b.n	800491e <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004722:	2b01      	cmp	r3, #1
 8004724:	d101      	bne.n	800472a <HAL_SPI_Receive+0x74>
 8004726:	2302      	movs	r3, #2
 8004728:	e0f9      	b.n	800491e <HAL_SPI_Receive+0x268>
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2204      	movs	r2, #4
 8004736:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	88fa      	ldrh	r2, [r7, #6]
 800474a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	88fa      	ldrh	r2, [r7, #6]
 8004752:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2200      	movs	r2, #0
 800476c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2200      	movs	r2, #0
 8004772:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800477c:	d908      	bls.n	8004790 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685a      	ldr	r2, [r3, #4]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800478c:	605a      	str	r2, [r3, #4]
 800478e:	e007      	b.n	80047a0 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800479e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047a8:	d10f      	bne.n	80047ca <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80047c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047d4:	2b40      	cmp	r3, #64	@ 0x40
 80047d6:	d007      	beq.n	80047e8 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047f0:	d875      	bhi.n	80048de <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80047f2:	e037      	b.n	8004864 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d117      	bne.n	8004832 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f103 020c 	add.w	r2, r3, #12
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480e:	7812      	ldrb	r2, [r2, #0]
 8004810:	b2d2      	uxtb	r2, r2
 8004812:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	1c5a      	adds	r2, r3, #1
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29a      	uxth	r2, r3
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004830:	e018      	b.n	8004864 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004832:	f7fe fb91 	bl	8002f58 <HAL_GetTick>
 8004836:	4602      	mov	r2, r0
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	1ad3      	subs	r3, r2, r3
 800483c:	683a      	ldr	r2, [r7, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d803      	bhi.n	800484a <HAL_SPI_Receive+0x194>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004848:	d102      	bne.n	8004850 <HAL_SPI_Receive+0x19a>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e05c      	b.n	800491e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1c1      	bne.n	80047f4 <HAL_SPI_Receive+0x13e>
 8004870:	e03b      	b.n	80048ea <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b01      	cmp	r3, #1
 800487e:	d115      	bne.n	80048ac <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	b292      	uxth	r2, r2
 800488c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004892:	1c9a      	adds	r2, r3, #2
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80048aa:	e018      	b.n	80048de <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ac:	f7fe fb54 	bl	8002f58 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	683a      	ldr	r2, [r7, #0]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d803      	bhi.n	80048c4 <HAL_SPI_Receive+0x20e>
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c2:	d102      	bne.n	80048ca <HAL_SPI_Receive+0x214>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e01f      	b.n	800491e <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d1c3      	bne.n	8004872 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048ea:	697a      	ldr	r2, [r7, #20]
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	f000 fb56 	bl	8004fa0 <SPI_EndRxTransaction>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e000      	b.n	800491e <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 800491c:	2300      	movs	r3, #0
  }
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b08a      	sub	sp, #40	@ 0x28
 800492a:	af00      	add	r7, sp, #0
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
 8004932:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004934:	2301      	movs	r3, #1
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004938:	f7fe fb0e 	bl	8002f58 <HAL_GetTick>
 800493c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004944:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800494c:	887b      	ldrh	r3, [r7, #2]
 800494e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8004950:	887b      	ldrh	r3, [r7, #2]
 8004952:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004954:	7ffb      	ldrb	r3, [r7, #31]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d00c      	beq.n	8004974 <HAL_SPI_TransmitReceive+0x4e>
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004960:	d106      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d102      	bne.n	8004970 <HAL_SPI_TransmitReceive+0x4a>
 800496a:	7ffb      	ldrb	r3, [r7, #31]
 800496c:	2b04      	cmp	r3, #4
 800496e:	d001      	beq.n	8004974 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004970:	2302      	movs	r3, #2
 8004972:	e1f3      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d005      	beq.n	8004986 <HAL_SPI_TransmitReceive+0x60>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d002      	beq.n	8004986 <HAL_SPI_TransmitReceive+0x60>
 8004980:	887b      	ldrh	r3, [r7, #2]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e1e8      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004990:	2b01      	cmp	r3, #1
 8004992:	d101      	bne.n	8004998 <HAL_SPI_TransmitReceive+0x72>
 8004994:	2302      	movs	r3, #2
 8004996:	e1e1      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x436>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d003      	beq.n	80049b4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	2205      	movs	r2, #5
 80049b0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	687a      	ldr	r2, [r7, #4]
 80049be:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	887a      	ldrh	r2, [r7, #2]
 80049c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	887a      	ldrh	r2, [r7, #2]
 80049cc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	887a      	ldrh	r2, [r7, #2]
 80049da:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	887a      	ldrh	r2, [r7, #2]
 80049e0:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80049f6:	d802      	bhi.n	80049fe <HAL_SPI_TransmitReceive+0xd8>
 80049f8:	8abb      	ldrh	r3, [r7, #20]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d908      	bls.n	8004a10 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	e007      	b.n	8004a20 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a1e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a2a:	2b40      	cmp	r3, #64	@ 0x40
 8004a2c:	d007      	beq.n	8004a3e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a46:	f240 8083 	bls.w	8004b50 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <HAL_SPI_TransmitReceive+0x132>
 8004a52:	8afb      	ldrh	r3, [r7, #22]
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d16f      	bne.n	8004b38 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	881a      	ldrh	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a68:	1c9a      	adds	r2, r3, #2
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a7c:	e05c      	b.n	8004b38 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b02      	cmp	r3, #2
 8004a8a:	d11b      	bne.n	8004ac4 <HAL_SPI_TransmitReceive+0x19e>
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d016      	beq.n	8004ac4 <HAL_SPI_TransmitReceive+0x19e>
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d113      	bne.n	8004ac4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa0:	881a      	ldrh	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aac:	1c9a      	adds	r2, r3, #2
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	3b01      	subs	r3, #1
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d11c      	bne.n	8004b0c <HAL_SPI_TransmitReceive+0x1e6>
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d016      	beq.n	8004b0c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	b292      	uxth	r2, r2
 8004aea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af0:	1c9a      	adds	r2, r3, #2
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b0c:	f7fe fa24 	bl	8002f58 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d80d      	bhi.n	8004b38 <HAL_SPI_TransmitReceive+0x212>
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b22:	d009      	beq.n	8004b38 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004b34:	2303      	movs	r3, #3
 8004b36:	e111      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d19d      	bne.n	8004a7e <HAL_SPI_TransmitReceive+0x158>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d197      	bne.n	8004a7e <HAL_SPI_TransmitReceive+0x158>
 8004b4e:	e0e5      	b.n	8004d1c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_SPI_TransmitReceive+0x23a>
 8004b58:	8afb      	ldrh	r3, [r7, #22]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	f040 80d1 	bne.w	8004d02 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d912      	bls.n	8004b90 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6e:	881a      	ldrh	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b7a:	1c9a      	adds	r2, r3, #2
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	3b02      	subs	r3, #2
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b8e:	e0b8      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	7812      	ldrb	r2, [r2, #0]
 8004b9c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba2:	1c5a      	adds	r2, r3, #1
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bac:	b29b      	uxth	r3, r3
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb6:	e0a4      	b.n	8004d02 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0302 	and.w	r3, r3, #2
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d134      	bne.n	8004c30 <HAL_SPI_TransmitReceive+0x30a>
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d02f      	beq.n	8004c30 <HAL_SPI_TransmitReceive+0x30a>
 8004bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d12c      	bne.n	8004c30 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d912      	bls.n	8004c06 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be4:	881a      	ldrh	r2, [r3, #0]
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	1c9a      	adds	r2, r3, #2
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b02      	subs	r3, #2
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c04:	e012      	b.n	8004c2c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	330c      	adds	r3, #12
 8004c10:	7812      	ldrb	r2, [r2, #0]
 8004c12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c18:	1c5a      	adds	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0301 	and.w	r3, r3, #1
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d148      	bne.n	8004cd0 <HAL_SPI_TransmitReceive+0x3aa>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c44:	b29b      	uxth	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d042      	beq.n	8004cd0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d923      	bls.n	8004c9e <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68da      	ldr	r2, [r3, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	b292      	uxth	r2, r2
 8004c62:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c68:	1c9a      	adds	r2, r3, #2
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	3b02      	subs	r3, #2
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004c86:	b29b      	uxth	r3, r3
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d81f      	bhi.n	8004ccc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	685a      	ldr	r2, [r3, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004c9a:	605a      	str	r2, [r3, #4]
 8004c9c:	e016      	b.n	8004ccc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f103 020c 	add.w	r2, r3, #12
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004caa:	7812      	ldrb	r2, [r2, #0]
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	b29a      	uxth	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004cd0:	f7fe f942 	bl	8002f58 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d803      	bhi.n	8004ce8 <HAL_SPI_TransmitReceive+0x3c2>
 8004ce0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce6:	d102      	bne.n	8004cee <HAL_SPI_TransmitReceive+0x3c8>
 8004ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d109      	bne.n	8004d02 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e02c      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d06:	b29b      	uxth	r3, r3
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f47f af55 	bne.w	8004bb8 <HAL_SPI_TransmitReceive+0x292>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	f47f af4e 	bne.w	8004bb8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d1c:	6a3a      	ldr	r2, [r7, #32]
 8004d1e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f995 	bl	8005050 <SPI_EndRxTxTransaction>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d008      	beq.n	8004d3e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2220      	movs	r2, #32
 8004d30:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e00e      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d001      	beq.n	8004d5a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e000      	b.n	8004d5c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
  }
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3728      	adds	r7, #40	@ 0x28
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d74:	f7fe f8f0 	bl	8002f58 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7c:	1a9b      	subs	r3, r3, r2
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	4413      	add	r3, r2
 8004d82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d84:	f7fe f8e8 	bl	8002f58 <HAL_GetTick>
 8004d88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d8a:	4b39      	ldr	r3, [pc, #228]	@ (8004e70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	015b      	lsls	r3, r3, #5
 8004d90:	0d1b      	lsrs	r3, r3, #20
 8004d92:	69fa      	ldr	r2, [r7, #28]
 8004d94:	fb02 f303 	mul.w	r3, r2, r3
 8004d98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d9a:	e054      	b.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d050      	beq.n	8004e46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004da4:	f7fe f8d8 	bl	8002f58 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	69fa      	ldr	r2, [r7, #28]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d902      	bls.n	8004dba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d13d      	bne.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004dd2:	d111      	bne.n	8004df8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ddc:	d004      	beq.n	8004de8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004de6:	d107      	bne.n	8004df8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e00:	d10f      	bne.n	8004e22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2201      	movs	r2, #1
 8004e26:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e017      	b.n	8004e66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	3b01      	subs	r3, #1
 8004e44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	689a      	ldr	r2, [r3, #8]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d19b      	bne.n	8004d9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3720      	adds	r7, #32
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	200000b8 	.word	0x200000b8

08004e74 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	@ 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
 8004e80:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004e82:	2300      	movs	r3, #0
 8004e84:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004e86:	f7fe f867 	bl	8002f58 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e8e:	1a9b      	subs	r3, r3, r2
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	4413      	add	r3, r2
 8004e94:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004e96:	f7fe f85f 	bl	8002f58 <HAL_GetTick>
 8004e9a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	330c      	adds	r3, #12
 8004ea2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ea4:	4b3d      	ldr	r3, [pc, #244]	@ (8004f9c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	4413      	add	r3, r2
 8004eae:	00da      	lsls	r2, r3, #3
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	0d1b      	lsrs	r3, r3, #20
 8004eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eb6:	fb02 f303 	mul.w	r3, r2, r3
 8004eba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004ebc:	e060      	b.n	8004f80 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004ec4:	d107      	bne.n	8004ed6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d104      	bne.n	8004ed6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004ecc:	69fb      	ldr	r3, [r7, #28]
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004ed4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004edc:	d050      	beq.n	8004f80 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ede:	f7fe f83b 	bl	8002f58 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d902      	bls.n	8004ef4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d13d      	bne.n	8004f70 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f02:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f0c:	d111      	bne.n	8004f32 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f16:	d004      	beq.n	8004f22 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f20:	d107      	bne.n	8004f32 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f30:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f3a:	d10f      	bne.n	8004f5c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004f5a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e010      	b.n	8004f92 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	3b01      	subs	r3, #1
 8004f7e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d196      	bne.n	8004ebe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3728      	adds	r7, #40	@ 0x28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	200000b8 	.word	0x200000b8

08004fa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af02      	add	r7, sp, #8
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fb4:	d111      	bne.n	8004fda <SPI_EndRxTransaction+0x3a>
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004fbe:	d004      	beq.n	8004fca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fc8:	d107      	bne.n	8004fda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	681a      	ldr	r2, [r3, #0]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fd8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	2180      	movs	r1, #128	@ 0x80
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f7ff febd 	bl	8004d64 <SPI_WaitFlagStateUntilTimeout>
 8004fea:	4603      	mov	r3, r0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d007      	beq.n	8005000 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ff4:	f043 0220 	orr.w	r2, r3, #32
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e023      	b.n	8005048 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005008:	d11d      	bne.n	8005046 <SPI_EndRxTransaction+0xa6>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005012:	d004      	beq.n	800501e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800501c:	d113      	bne.n	8005046 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2200      	movs	r2, #0
 8005026:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800502a:	68f8      	ldr	r0, [r7, #12]
 800502c:	f7ff ff22 	bl	8004e74 <SPI_WaitFifoStateUntilTimeout>
 8005030:	4603      	mov	r3, r0
 8005032:	2b00      	cmp	r3, #0
 8005034:	d007      	beq.n	8005046 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800503a:	f043 0220 	orr.w	r2, r3, #32
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e000      	b.n	8005048 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8005046:	2300      	movs	r3, #0
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af02      	add	r7, sp, #8
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	2200      	movs	r2, #0
 8005064:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005068:	68f8      	ldr	r0, [r7, #12]
 800506a:	f7ff ff03 	bl	8004e74 <SPI_WaitFifoStateUntilTimeout>
 800506e:	4603      	mov	r3, r0
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005078:	f043 0220 	orr.w	r2, r3, #32
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005080:	2303      	movs	r3, #3
 8005082:	e027      	b.n	80050d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	9300      	str	r3, [sp, #0]
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	2200      	movs	r2, #0
 800508c:	2180      	movs	r1, #128	@ 0x80
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	f7ff fe68 	bl	8004d64 <SPI_WaitFlagStateUntilTimeout>
 8005094:	4603      	mov	r3, r0
 8005096:	2b00      	cmp	r3, #0
 8005098:	d007      	beq.n	80050aa <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e014      	b.n	80050d4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050b6:	68f8      	ldr	r0, [r7, #12]
 80050b8:	f7ff fedc 	bl	8004e74 <SPI_WaitFifoStateUntilTimeout>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d007      	beq.n	80050d2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c6:	f043 0220 	orr.w	r2, r3, #32
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e000      	b.n	80050d4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050d2:	2300      	movs	r3, #0
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <__assert_func>:
 80050dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050de:	4614      	mov	r4, r2
 80050e0:	461a      	mov	r2, r3
 80050e2:	4b09      	ldr	r3, [pc, #36]	@ (8005108 <__assert_func+0x2c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4605      	mov	r5, r0
 80050e8:	68d8      	ldr	r0, [r3, #12]
 80050ea:	b954      	cbnz	r4, 8005102 <__assert_func+0x26>
 80050ec:	4b07      	ldr	r3, [pc, #28]	@ (800510c <__assert_func+0x30>)
 80050ee:	461c      	mov	r4, r3
 80050f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050f4:	9100      	str	r1, [sp, #0]
 80050f6:	462b      	mov	r3, r5
 80050f8:	4905      	ldr	r1, [pc, #20]	@ (8005110 <__assert_func+0x34>)
 80050fa:	f000 f8b1 	bl	8005260 <fiprintf>
 80050fe:	f000 f9ce 	bl	800549e <abort>
 8005102:	4b04      	ldr	r3, [pc, #16]	@ (8005114 <__assert_func+0x38>)
 8005104:	e7f4      	b.n	80050f0 <__assert_func+0x14>
 8005106:	bf00      	nop
 8005108:	200001d0 	.word	0x200001d0
 800510c:	08006442 	.word	0x08006442
 8005110:	08006414 	.word	0x08006414
 8005114:	08006407 	.word	0x08006407

08005118 <std>:
 8005118:	2300      	movs	r3, #0
 800511a:	b510      	push	{r4, lr}
 800511c:	4604      	mov	r4, r0
 800511e:	e9c0 3300 	strd	r3, r3, [r0]
 8005122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005126:	6083      	str	r3, [r0, #8]
 8005128:	8181      	strh	r1, [r0, #12]
 800512a:	6643      	str	r3, [r0, #100]	@ 0x64
 800512c:	81c2      	strh	r2, [r0, #14]
 800512e:	6183      	str	r3, [r0, #24]
 8005130:	4619      	mov	r1, r3
 8005132:	2208      	movs	r2, #8
 8005134:	305c      	adds	r0, #92	@ 0x5c
 8005136:	f000 f928 	bl	800538a <memset>
 800513a:	4b0d      	ldr	r3, [pc, #52]	@ (8005170 <std+0x58>)
 800513c:	6263      	str	r3, [r4, #36]	@ 0x24
 800513e:	4b0d      	ldr	r3, [pc, #52]	@ (8005174 <std+0x5c>)
 8005140:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005142:	4b0d      	ldr	r3, [pc, #52]	@ (8005178 <std+0x60>)
 8005144:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005146:	4b0d      	ldr	r3, [pc, #52]	@ (800517c <std+0x64>)
 8005148:	6323      	str	r3, [r4, #48]	@ 0x30
 800514a:	4b0d      	ldr	r3, [pc, #52]	@ (8005180 <std+0x68>)
 800514c:	6224      	str	r4, [r4, #32]
 800514e:	429c      	cmp	r4, r3
 8005150:	d006      	beq.n	8005160 <std+0x48>
 8005152:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005156:	4294      	cmp	r4, r2
 8005158:	d002      	beq.n	8005160 <std+0x48>
 800515a:	33d0      	adds	r3, #208	@ 0xd0
 800515c:	429c      	cmp	r4, r3
 800515e:	d105      	bne.n	800516c <std+0x54>
 8005160:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005168:	f000 b988 	b.w	800547c <__retarget_lock_init_recursive>
 800516c:	bd10      	pop	{r4, pc}
 800516e:	bf00      	nop
 8005170:	080052e5 	.word	0x080052e5
 8005174:	08005307 	.word	0x08005307
 8005178:	0800533f 	.word	0x0800533f
 800517c:	08005363 	.word	0x08005363
 8005180:	200002b8 	.word	0x200002b8

08005184 <stdio_exit_handler>:
 8005184:	4a02      	ldr	r2, [pc, #8]	@ (8005190 <stdio_exit_handler+0xc>)
 8005186:	4903      	ldr	r1, [pc, #12]	@ (8005194 <stdio_exit_handler+0x10>)
 8005188:	4803      	ldr	r0, [pc, #12]	@ (8005198 <stdio_exit_handler+0x14>)
 800518a:	f000 b87b 	b.w	8005284 <_fwalk_sglue>
 800518e:	bf00      	nop
 8005190:	200001c4 	.word	0x200001c4
 8005194:	08005d45 	.word	0x08005d45
 8005198:	200001d4 	.word	0x200001d4

0800519c <cleanup_stdio>:
 800519c:	6841      	ldr	r1, [r0, #4]
 800519e:	4b0c      	ldr	r3, [pc, #48]	@ (80051d0 <cleanup_stdio+0x34>)
 80051a0:	4299      	cmp	r1, r3
 80051a2:	b510      	push	{r4, lr}
 80051a4:	4604      	mov	r4, r0
 80051a6:	d001      	beq.n	80051ac <cleanup_stdio+0x10>
 80051a8:	f000 fdcc 	bl	8005d44 <_fflush_r>
 80051ac:	68a1      	ldr	r1, [r4, #8]
 80051ae:	4b09      	ldr	r3, [pc, #36]	@ (80051d4 <cleanup_stdio+0x38>)
 80051b0:	4299      	cmp	r1, r3
 80051b2:	d002      	beq.n	80051ba <cleanup_stdio+0x1e>
 80051b4:	4620      	mov	r0, r4
 80051b6:	f000 fdc5 	bl	8005d44 <_fflush_r>
 80051ba:	68e1      	ldr	r1, [r4, #12]
 80051bc:	4b06      	ldr	r3, [pc, #24]	@ (80051d8 <cleanup_stdio+0x3c>)
 80051be:	4299      	cmp	r1, r3
 80051c0:	d004      	beq.n	80051cc <cleanup_stdio+0x30>
 80051c2:	4620      	mov	r0, r4
 80051c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051c8:	f000 bdbc 	b.w	8005d44 <_fflush_r>
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	bf00      	nop
 80051d0:	200002b8 	.word	0x200002b8
 80051d4:	20000320 	.word	0x20000320
 80051d8:	20000388 	.word	0x20000388

080051dc <global_stdio_init.part.0>:
 80051dc:	b510      	push	{r4, lr}
 80051de:	4b0b      	ldr	r3, [pc, #44]	@ (800520c <global_stdio_init.part.0+0x30>)
 80051e0:	4c0b      	ldr	r4, [pc, #44]	@ (8005210 <global_stdio_init.part.0+0x34>)
 80051e2:	4a0c      	ldr	r2, [pc, #48]	@ (8005214 <global_stdio_init.part.0+0x38>)
 80051e4:	601a      	str	r2, [r3, #0]
 80051e6:	4620      	mov	r0, r4
 80051e8:	2200      	movs	r2, #0
 80051ea:	2104      	movs	r1, #4
 80051ec:	f7ff ff94 	bl	8005118 <std>
 80051f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051f4:	2201      	movs	r2, #1
 80051f6:	2109      	movs	r1, #9
 80051f8:	f7ff ff8e 	bl	8005118 <std>
 80051fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005200:	2202      	movs	r2, #2
 8005202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005206:	2112      	movs	r1, #18
 8005208:	f7ff bf86 	b.w	8005118 <std>
 800520c:	200003f0 	.word	0x200003f0
 8005210:	200002b8 	.word	0x200002b8
 8005214:	08005185 	.word	0x08005185

08005218 <__sfp_lock_acquire>:
 8005218:	4801      	ldr	r0, [pc, #4]	@ (8005220 <__sfp_lock_acquire+0x8>)
 800521a:	f000 b930 	b.w	800547e <__retarget_lock_acquire_recursive>
 800521e:	bf00      	nop
 8005220:	200003f9 	.word	0x200003f9

08005224 <__sfp_lock_release>:
 8005224:	4801      	ldr	r0, [pc, #4]	@ (800522c <__sfp_lock_release+0x8>)
 8005226:	f000 b92b 	b.w	8005480 <__retarget_lock_release_recursive>
 800522a:	bf00      	nop
 800522c:	200003f9 	.word	0x200003f9

08005230 <__sinit>:
 8005230:	b510      	push	{r4, lr}
 8005232:	4604      	mov	r4, r0
 8005234:	f7ff fff0 	bl	8005218 <__sfp_lock_acquire>
 8005238:	6a23      	ldr	r3, [r4, #32]
 800523a:	b11b      	cbz	r3, 8005244 <__sinit+0x14>
 800523c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005240:	f7ff bff0 	b.w	8005224 <__sfp_lock_release>
 8005244:	4b04      	ldr	r3, [pc, #16]	@ (8005258 <__sinit+0x28>)
 8005246:	6223      	str	r3, [r4, #32]
 8005248:	4b04      	ldr	r3, [pc, #16]	@ (800525c <__sinit+0x2c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d1f5      	bne.n	800523c <__sinit+0xc>
 8005250:	f7ff ffc4 	bl	80051dc <global_stdio_init.part.0>
 8005254:	e7f2      	b.n	800523c <__sinit+0xc>
 8005256:	bf00      	nop
 8005258:	0800519d 	.word	0x0800519d
 800525c:	200003f0 	.word	0x200003f0

08005260 <fiprintf>:
 8005260:	b40e      	push	{r1, r2, r3}
 8005262:	b503      	push	{r0, r1, lr}
 8005264:	4601      	mov	r1, r0
 8005266:	ab03      	add	r3, sp, #12
 8005268:	4805      	ldr	r0, [pc, #20]	@ (8005280 <fiprintf+0x20>)
 800526a:	f853 2b04 	ldr.w	r2, [r3], #4
 800526e:	6800      	ldr	r0, [r0, #0]
 8005270:	9301      	str	r3, [sp, #4]
 8005272:	f000 fa3d 	bl	80056f0 <_vfiprintf_r>
 8005276:	b002      	add	sp, #8
 8005278:	f85d eb04 	ldr.w	lr, [sp], #4
 800527c:	b003      	add	sp, #12
 800527e:	4770      	bx	lr
 8005280:	200001d0 	.word	0x200001d0

08005284 <_fwalk_sglue>:
 8005284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005288:	4607      	mov	r7, r0
 800528a:	4688      	mov	r8, r1
 800528c:	4614      	mov	r4, r2
 800528e:	2600      	movs	r6, #0
 8005290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005294:	f1b9 0901 	subs.w	r9, r9, #1
 8005298:	d505      	bpl.n	80052a6 <_fwalk_sglue+0x22>
 800529a:	6824      	ldr	r4, [r4, #0]
 800529c:	2c00      	cmp	r4, #0
 800529e:	d1f7      	bne.n	8005290 <_fwalk_sglue+0xc>
 80052a0:	4630      	mov	r0, r6
 80052a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052a6:	89ab      	ldrh	r3, [r5, #12]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d907      	bls.n	80052bc <_fwalk_sglue+0x38>
 80052ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80052b0:	3301      	adds	r3, #1
 80052b2:	d003      	beq.n	80052bc <_fwalk_sglue+0x38>
 80052b4:	4629      	mov	r1, r5
 80052b6:	4638      	mov	r0, r7
 80052b8:	47c0      	blx	r8
 80052ba:	4306      	orrs	r6, r0
 80052bc:	3568      	adds	r5, #104	@ 0x68
 80052be:	e7e9      	b.n	8005294 <_fwalk_sglue+0x10>

080052c0 <iprintf>:
 80052c0:	b40f      	push	{r0, r1, r2, r3}
 80052c2:	b507      	push	{r0, r1, r2, lr}
 80052c4:	4906      	ldr	r1, [pc, #24]	@ (80052e0 <iprintf+0x20>)
 80052c6:	ab04      	add	r3, sp, #16
 80052c8:	6808      	ldr	r0, [r1, #0]
 80052ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80052ce:	6881      	ldr	r1, [r0, #8]
 80052d0:	9301      	str	r3, [sp, #4]
 80052d2:	f000 fa0d 	bl	80056f0 <_vfiprintf_r>
 80052d6:	b003      	add	sp, #12
 80052d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80052dc:	b004      	add	sp, #16
 80052de:	4770      	bx	lr
 80052e0:	200001d0 	.word	0x200001d0

080052e4 <__sread>:
 80052e4:	b510      	push	{r4, lr}
 80052e6:	460c      	mov	r4, r1
 80052e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ec:	f000 f878 	bl	80053e0 <_read_r>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	bfab      	itete	ge
 80052f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80052f6:	89a3      	ldrhlt	r3, [r4, #12]
 80052f8:	181b      	addge	r3, r3, r0
 80052fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80052fe:	bfac      	ite	ge
 8005300:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005302:	81a3      	strhlt	r3, [r4, #12]
 8005304:	bd10      	pop	{r4, pc}

08005306 <__swrite>:
 8005306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530a:	461f      	mov	r7, r3
 800530c:	898b      	ldrh	r3, [r1, #12]
 800530e:	05db      	lsls	r3, r3, #23
 8005310:	4605      	mov	r5, r0
 8005312:	460c      	mov	r4, r1
 8005314:	4616      	mov	r6, r2
 8005316:	d505      	bpl.n	8005324 <__swrite+0x1e>
 8005318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800531c:	2302      	movs	r3, #2
 800531e:	2200      	movs	r2, #0
 8005320:	f000 f84c 	bl	80053bc <_lseek_r>
 8005324:	89a3      	ldrh	r3, [r4, #12]
 8005326:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800532a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800532e:	81a3      	strh	r3, [r4, #12]
 8005330:	4632      	mov	r2, r6
 8005332:	463b      	mov	r3, r7
 8005334:	4628      	mov	r0, r5
 8005336:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800533a:	f000 b863 	b.w	8005404 <_write_r>

0800533e <__sseek>:
 800533e:	b510      	push	{r4, lr}
 8005340:	460c      	mov	r4, r1
 8005342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005346:	f000 f839 	bl	80053bc <_lseek_r>
 800534a:	1c43      	adds	r3, r0, #1
 800534c:	89a3      	ldrh	r3, [r4, #12]
 800534e:	bf15      	itete	ne
 8005350:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005352:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005356:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800535a:	81a3      	strheq	r3, [r4, #12]
 800535c:	bf18      	it	ne
 800535e:	81a3      	strhne	r3, [r4, #12]
 8005360:	bd10      	pop	{r4, pc}

08005362 <__sclose>:
 8005362:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005366:	f000 b819 	b.w	800539c <_close_r>

0800536a <memcmp>:
 800536a:	b510      	push	{r4, lr}
 800536c:	3901      	subs	r1, #1
 800536e:	4402      	add	r2, r0
 8005370:	4290      	cmp	r0, r2
 8005372:	d101      	bne.n	8005378 <memcmp+0xe>
 8005374:	2000      	movs	r0, #0
 8005376:	e005      	b.n	8005384 <memcmp+0x1a>
 8005378:	7803      	ldrb	r3, [r0, #0]
 800537a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800537e:	42a3      	cmp	r3, r4
 8005380:	d001      	beq.n	8005386 <memcmp+0x1c>
 8005382:	1b18      	subs	r0, r3, r4
 8005384:	bd10      	pop	{r4, pc}
 8005386:	3001      	adds	r0, #1
 8005388:	e7f2      	b.n	8005370 <memcmp+0x6>

0800538a <memset>:
 800538a:	4402      	add	r2, r0
 800538c:	4603      	mov	r3, r0
 800538e:	4293      	cmp	r3, r2
 8005390:	d100      	bne.n	8005394 <memset+0xa>
 8005392:	4770      	bx	lr
 8005394:	f803 1b01 	strb.w	r1, [r3], #1
 8005398:	e7f9      	b.n	800538e <memset+0x4>
	...

0800539c <_close_r>:
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4d06      	ldr	r5, [pc, #24]	@ (80053b8 <_close_r+0x1c>)
 80053a0:	2300      	movs	r3, #0
 80053a2:	4604      	mov	r4, r0
 80053a4:	4608      	mov	r0, r1
 80053a6:	602b      	str	r3, [r5, #0]
 80053a8:	f7fb fbc4 	bl	8000b34 <_close>
 80053ac:	1c43      	adds	r3, r0, #1
 80053ae:	d102      	bne.n	80053b6 <_close_r+0x1a>
 80053b0:	682b      	ldr	r3, [r5, #0]
 80053b2:	b103      	cbz	r3, 80053b6 <_close_r+0x1a>
 80053b4:	6023      	str	r3, [r4, #0]
 80053b6:	bd38      	pop	{r3, r4, r5, pc}
 80053b8:	200003f4 	.word	0x200003f4

080053bc <_lseek_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4d07      	ldr	r5, [pc, #28]	@ (80053dc <_lseek_r+0x20>)
 80053c0:	4604      	mov	r4, r0
 80053c2:	4608      	mov	r0, r1
 80053c4:	4611      	mov	r1, r2
 80053c6:	2200      	movs	r2, #0
 80053c8:	602a      	str	r2, [r5, #0]
 80053ca:	461a      	mov	r2, r3
 80053cc:	f7fb fbd9 	bl	8000b82 <_lseek>
 80053d0:	1c43      	adds	r3, r0, #1
 80053d2:	d102      	bne.n	80053da <_lseek_r+0x1e>
 80053d4:	682b      	ldr	r3, [r5, #0]
 80053d6:	b103      	cbz	r3, 80053da <_lseek_r+0x1e>
 80053d8:	6023      	str	r3, [r4, #0]
 80053da:	bd38      	pop	{r3, r4, r5, pc}
 80053dc:	200003f4 	.word	0x200003f4

080053e0 <_read_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	4d07      	ldr	r5, [pc, #28]	@ (8005400 <_read_r+0x20>)
 80053e4:	4604      	mov	r4, r0
 80053e6:	4608      	mov	r0, r1
 80053e8:	4611      	mov	r1, r2
 80053ea:	2200      	movs	r2, #0
 80053ec:	602a      	str	r2, [r5, #0]
 80053ee:	461a      	mov	r2, r3
 80053f0:	f7fb fb67 	bl	8000ac2 <_read>
 80053f4:	1c43      	adds	r3, r0, #1
 80053f6:	d102      	bne.n	80053fe <_read_r+0x1e>
 80053f8:	682b      	ldr	r3, [r5, #0]
 80053fa:	b103      	cbz	r3, 80053fe <_read_r+0x1e>
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	bd38      	pop	{r3, r4, r5, pc}
 8005400:	200003f4 	.word	0x200003f4

08005404 <_write_r>:
 8005404:	b538      	push	{r3, r4, r5, lr}
 8005406:	4d07      	ldr	r5, [pc, #28]	@ (8005424 <_write_r+0x20>)
 8005408:	4604      	mov	r4, r0
 800540a:	4608      	mov	r0, r1
 800540c:	4611      	mov	r1, r2
 800540e:	2200      	movs	r2, #0
 8005410:	602a      	str	r2, [r5, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f7fb fb72 	bl	8000afc <_write>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <_write_r+0x1e>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	b103      	cbz	r3, 8005422 <_write_r+0x1e>
 8005420:	6023      	str	r3, [r4, #0]
 8005422:	bd38      	pop	{r3, r4, r5, pc}
 8005424:	200003f4 	.word	0x200003f4

08005428 <__errno>:
 8005428:	4b01      	ldr	r3, [pc, #4]	@ (8005430 <__errno+0x8>)
 800542a:	6818      	ldr	r0, [r3, #0]
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	200001d0 	.word	0x200001d0

08005434 <__libc_init_array>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	4d0d      	ldr	r5, [pc, #52]	@ (800546c <__libc_init_array+0x38>)
 8005438:	4c0d      	ldr	r4, [pc, #52]	@ (8005470 <__libc_init_array+0x3c>)
 800543a:	1b64      	subs	r4, r4, r5
 800543c:	10a4      	asrs	r4, r4, #2
 800543e:	2600      	movs	r6, #0
 8005440:	42a6      	cmp	r6, r4
 8005442:	d109      	bne.n	8005458 <__libc_init_array+0x24>
 8005444:	4d0b      	ldr	r5, [pc, #44]	@ (8005474 <__libc_init_array+0x40>)
 8005446:	4c0c      	ldr	r4, [pc, #48]	@ (8005478 <__libc_init_array+0x44>)
 8005448:	f000 fe10 	bl	800606c <_init>
 800544c:	1b64      	subs	r4, r4, r5
 800544e:	10a4      	asrs	r4, r4, #2
 8005450:	2600      	movs	r6, #0
 8005452:	42a6      	cmp	r6, r4
 8005454:	d105      	bne.n	8005462 <__libc_init_array+0x2e>
 8005456:	bd70      	pop	{r4, r5, r6, pc}
 8005458:	f855 3b04 	ldr.w	r3, [r5], #4
 800545c:	4798      	blx	r3
 800545e:	3601      	adds	r6, #1
 8005460:	e7ee      	b.n	8005440 <__libc_init_array+0xc>
 8005462:	f855 3b04 	ldr.w	r3, [r5], #4
 8005466:	4798      	blx	r3
 8005468:	3601      	adds	r6, #1
 800546a:	e7f2      	b.n	8005452 <__libc_init_array+0x1e>
 800546c:	08006480 	.word	0x08006480
 8005470:	08006480 	.word	0x08006480
 8005474:	08006480 	.word	0x08006480
 8005478:	08006484 	.word	0x08006484

0800547c <__retarget_lock_init_recursive>:
 800547c:	4770      	bx	lr

0800547e <__retarget_lock_acquire_recursive>:
 800547e:	4770      	bx	lr

08005480 <__retarget_lock_release_recursive>:
 8005480:	4770      	bx	lr

08005482 <memcpy>:
 8005482:	440a      	add	r2, r1
 8005484:	4291      	cmp	r1, r2
 8005486:	f100 33ff 	add.w	r3, r0, #4294967295
 800548a:	d100      	bne.n	800548e <memcpy+0xc>
 800548c:	4770      	bx	lr
 800548e:	b510      	push	{r4, lr}
 8005490:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005494:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005498:	4291      	cmp	r1, r2
 800549a:	d1f9      	bne.n	8005490 <memcpy+0xe>
 800549c:	bd10      	pop	{r4, pc}

0800549e <abort>:
 800549e:	b508      	push	{r3, lr}
 80054a0:	2006      	movs	r0, #6
 80054a2:	f000 fd33 	bl	8005f0c <raise>
 80054a6:	2001      	movs	r0, #1
 80054a8:	f7fb fb00 	bl	8000aac <_exit>

080054ac <_free_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4605      	mov	r5, r0
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d041      	beq.n	8005538 <_free_r+0x8c>
 80054b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b8:	1f0c      	subs	r4, r1, #4
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bfb8      	it	lt
 80054be:	18e4      	addlt	r4, r4, r3
 80054c0:	f000 f8e0 	bl	8005684 <__malloc_lock>
 80054c4:	4a1d      	ldr	r2, [pc, #116]	@ (800553c <_free_r+0x90>)
 80054c6:	6813      	ldr	r3, [r2, #0]
 80054c8:	b933      	cbnz	r3, 80054d8 <_free_r+0x2c>
 80054ca:	6063      	str	r3, [r4, #4]
 80054cc:	6014      	str	r4, [r2, #0]
 80054ce:	4628      	mov	r0, r5
 80054d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054d4:	f000 b8dc 	b.w	8005690 <__malloc_unlock>
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d908      	bls.n	80054ee <_free_r+0x42>
 80054dc:	6820      	ldr	r0, [r4, #0]
 80054de:	1821      	adds	r1, r4, r0
 80054e0:	428b      	cmp	r3, r1
 80054e2:	bf01      	itttt	eq
 80054e4:	6819      	ldreq	r1, [r3, #0]
 80054e6:	685b      	ldreq	r3, [r3, #4]
 80054e8:	1809      	addeq	r1, r1, r0
 80054ea:	6021      	streq	r1, [r4, #0]
 80054ec:	e7ed      	b.n	80054ca <_free_r+0x1e>
 80054ee:	461a      	mov	r2, r3
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	b10b      	cbz	r3, 80054f8 <_free_r+0x4c>
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d9fa      	bls.n	80054ee <_free_r+0x42>
 80054f8:	6811      	ldr	r1, [r2, #0]
 80054fa:	1850      	adds	r0, r2, r1
 80054fc:	42a0      	cmp	r0, r4
 80054fe:	d10b      	bne.n	8005518 <_free_r+0x6c>
 8005500:	6820      	ldr	r0, [r4, #0]
 8005502:	4401      	add	r1, r0
 8005504:	1850      	adds	r0, r2, r1
 8005506:	4283      	cmp	r3, r0
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	d1e0      	bne.n	80054ce <_free_r+0x22>
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	6053      	str	r3, [r2, #4]
 8005512:	4408      	add	r0, r1
 8005514:	6010      	str	r0, [r2, #0]
 8005516:	e7da      	b.n	80054ce <_free_r+0x22>
 8005518:	d902      	bls.n	8005520 <_free_r+0x74>
 800551a:	230c      	movs	r3, #12
 800551c:	602b      	str	r3, [r5, #0]
 800551e:	e7d6      	b.n	80054ce <_free_r+0x22>
 8005520:	6820      	ldr	r0, [r4, #0]
 8005522:	1821      	adds	r1, r4, r0
 8005524:	428b      	cmp	r3, r1
 8005526:	bf04      	itt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	bf04      	itt	eq
 8005530:	1809      	addeq	r1, r1, r0
 8005532:	6021      	streq	r1, [r4, #0]
 8005534:	6054      	str	r4, [r2, #4]
 8005536:	e7ca      	b.n	80054ce <_free_r+0x22>
 8005538:	bd38      	pop	{r3, r4, r5, pc}
 800553a:	bf00      	nop
 800553c:	20000400 	.word	0x20000400

08005540 <sbrk_aligned>:
 8005540:	b570      	push	{r4, r5, r6, lr}
 8005542:	4e0f      	ldr	r6, [pc, #60]	@ (8005580 <sbrk_aligned+0x40>)
 8005544:	460c      	mov	r4, r1
 8005546:	6831      	ldr	r1, [r6, #0]
 8005548:	4605      	mov	r5, r0
 800554a:	b911      	cbnz	r1, 8005552 <sbrk_aligned+0x12>
 800554c:	f000 fcfa 	bl	8005f44 <_sbrk_r>
 8005550:	6030      	str	r0, [r6, #0]
 8005552:	4621      	mov	r1, r4
 8005554:	4628      	mov	r0, r5
 8005556:	f000 fcf5 	bl	8005f44 <_sbrk_r>
 800555a:	1c43      	adds	r3, r0, #1
 800555c:	d103      	bne.n	8005566 <sbrk_aligned+0x26>
 800555e:	f04f 34ff 	mov.w	r4, #4294967295
 8005562:	4620      	mov	r0, r4
 8005564:	bd70      	pop	{r4, r5, r6, pc}
 8005566:	1cc4      	adds	r4, r0, #3
 8005568:	f024 0403 	bic.w	r4, r4, #3
 800556c:	42a0      	cmp	r0, r4
 800556e:	d0f8      	beq.n	8005562 <sbrk_aligned+0x22>
 8005570:	1a21      	subs	r1, r4, r0
 8005572:	4628      	mov	r0, r5
 8005574:	f000 fce6 	bl	8005f44 <_sbrk_r>
 8005578:	3001      	adds	r0, #1
 800557a:	d1f2      	bne.n	8005562 <sbrk_aligned+0x22>
 800557c:	e7ef      	b.n	800555e <sbrk_aligned+0x1e>
 800557e:	bf00      	nop
 8005580:	200003fc 	.word	0x200003fc

08005584 <_malloc_r>:
 8005584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005588:	1ccd      	adds	r5, r1, #3
 800558a:	f025 0503 	bic.w	r5, r5, #3
 800558e:	3508      	adds	r5, #8
 8005590:	2d0c      	cmp	r5, #12
 8005592:	bf38      	it	cc
 8005594:	250c      	movcc	r5, #12
 8005596:	2d00      	cmp	r5, #0
 8005598:	4606      	mov	r6, r0
 800559a:	db01      	blt.n	80055a0 <_malloc_r+0x1c>
 800559c:	42a9      	cmp	r1, r5
 800559e:	d904      	bls.n	80055aa <_malloc_r+0x26>
 80055a0:	230c      	movs	r3, #12
 80055a2:	6033      	str	r3, [r6, #0]
 80055a4:	2000      	movs	r0, #0
 80055a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005680 <_malloc_r+0xfc>
 80055ae:	f000 f869 	bl	8005684 <__malloc_lock>
 80055b2:	f8d8 3000 	ldr.w	r3, [r8]
 80055b6:	461c      	mov	r4, r3
 80055b8:	bb44      	cbnz	r4, 800560c <_malloc_r+0x88>
 80055ba:	4629      	mov	r1, r5
 80055bc:	4630      	mov	r0, r6
 80055be:	f7ff ffbf 	bl	8005540 <sbrk_aligned>
 80055c2:	1c43      	adds	r3, r0, #1
 80055c4:	4604      	mov	r4, r0
 80055c6:	d158      	bne.n	800567a <_malloc_r+0xf6>
 80055c8:	f8d8 4000 	ldr.w	r4, [r8]
 80055cc:	4627      	mov	r7, r4
 80055ce:	2f00      	cmp	r7, #0
 80055d0:	d143      	bne.n	800565a <_malloc_r+0xd6>
 80055d2:	2c00      	cmp	r4, #0
 80055d4:	d04b      	beq.n	800566e <_malloc_r+0xea>
 80055d6:	6823      	ldr	r3, [r4, #0]
 80055d8:	4639      	mov	r1, r7
 80055da:	4630      	mov	r0, r6
 80055dc:	eb04 0903 	add.w	r9, r4, r3
 80055e0:	f000 fcb0 	bl	8005f44 <_sbrk_r>
 80055e4:	4581      	cmp	r9, r0
 80055e6:	d142      	bne.n	800566e <_malloc_r+0xea>
 80055e8:	6821      	ldr	r1, [r4, #0]
 80055ea:	1a6d      	subs	r5, r5, r1
 80055ec:	4629      	mov	r1, r5
 80055ee:	4630      	mov	r0, r6
 80055f0:	f7ff ffa6 	bl	8005540 <sbrk_aligned>
 80055f4:	3001      	adds	r0, #1
 80055f6:	d03a      	beq.n	800566e <_malloc_r+0xea>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	442b      	add	r3, r5
 80055fc:	6023      	str	r3, [r4, #0]
 80055fe:	f8d8 3000 	ldr.w	r3, [r8]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	bb62      	cbnz	r2, 8005660 <_malloc_r+0xdc>
 8005606:	f8c8 7000 	str.w	r7, [r8]
 800560a:	e00f      	b.n	800562c <_malloc_r+0xa8>
 800560c:	6822      	ldr	r2, [r4, #0]
 800560e:	1b52      	subs	r2, r2, r5
 8005610:	d420      	bmi.n	8005654 <_malloc_r+0xd0>
 8005612:	2a0b      	cmp	r2, #11
 8005614:	d917      	bls.n	8005646 <_malloc_r+0xc2>
 8005616:	1961      	adds	r1, r4, r5
 8005618:	42a3      	cmp	r3, r4
 800561a:	6025      	str	r5, [r4, #0]
 800561c:	bf18      	it	ne
 800561e:	6059      	strne	r1, [r3, #4]
 8005620:	6863      	ldr	r3, [r4, #4]
 8005622:	bf08      	it	eq
 8005624:	f8c8 1000 	streq.w	r1, [r8]
 8005628:	5162      	str	r2, [r4, r5]
 800562a:	604b      	str	r3, [r1, #4]
 800562c:	4630      	mov	r0, r6
 800562e:	f000 f82f 	bl	8005690 <__malloc_unlock>
 8005632:	f104 000b 	add.w	r0, r4, #11
 8005636:	1d23      	adds	r3, r4, #4
 8005638:	f020 0007 	bic.w	r0, r0, #7
 800563c:	1ac2      	subs	r2, r0, r3
 800563e:	bf1c      	itt	ne
 8005640:	1a1b      	subne	r3, r3, r0
 8005642:	50a3      	strne	r3, [r4, r2]
 8005644:	e7af      	b.n	80055a6 <_malloc_r+0x22>
 8005646:	6862      	ldr	r2, [r4, #4]
 8005648:	42a3      	cmp	r3, r4
 800564a:	bf0c      	ite	eq
 800564c:	f8c8 2000 	streq.w	r2, [r8]
 8005650:	605a      	strne	r2, [r3, #4]
 8005652:	e7eb      	b.n	800562c <_malloc_r+0xa8>
 8005654:	4623      	mov	r3, r4
 8005656:	6864      	ldr	r4, [r4, #4]
 8005658:	e7ae      	b.n	80055b8 <_malloc_r+0x34>
 800565a:	463c      	mov	r4, r7
 800565c:	687f      	ldr	r7, [r7, #4]
 800565e:	e7b6      	b.n	80055ce <_malloc_r+0x4a>
 8005660:	461a      	mov	r2, r3
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	42a3      	cmp	r3, r4
 8005666:	d1fb      	bne.n	8005660 <_malloc_r+0xdc>
 8005668:	2300      	movs	r3, #0
 800566a:	6053      	str	r3, [r2, #4]
 800566c:	e7de      	b.n	800562c <_malloc_r+0xa8>
 800566e:	230c      	movs	r3, #12
 8005670:	6033      	str	r3, [r6, #0]
 8005672:	4630      	mov	r0, r6
 8005674:	f000 f80c 	bl	8005690 <__malloc_unlock>
 8005678:	e794      	b.n	80055a4 <_malloc_r+0x20>
 800567a:	6005      	str	r5, [r0, #0]
 800567c:	e7d6      	b.n	800562c <_malloc_r+0xa8>
 800567e:	bf00      	nop
 8005680:	20000400 	.word	0x20000400

08005684 <__malloc_lock>:
 8005684:	4801      	ldr	r0, [pc, #4]	@ (800568c <__malloc_lock+0x8>)
 8005686:	f7ff befa 	b.w	800547e <__retarget_lock_acquire_recursive>
 800568a:	bf00      	nop
 800568c:	200003f8 	.word	0x200003f8

08005690 <__malloc_unlock>:
 8005690:	4801      	ldr	r0, [pc, #4]	@ (8005698 <__malloc_unlock+0x8>)
 8005692:	f7ff bef5 	b.w	8005480 <__retarget_lock_release_recursive>
 8005696:	bf00      	nop
 8005698:	200003f8 	.word	0x200003f8

0800569c <__sfputc_r>:
 800569c:	6893      	ldr	r3, [r2, #8]
 800569e:	3b01      	subs	r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	b410      	push	{r4}
 80056a4:	6093      	str	r3, [r2, #8]
 80056a6:	da08      	bge.n	80056ba <__sfputc_r+0x1e>
 80056a8:	6994      	ldr	r4, [r2, #24]
 80056aa:	42a3      	cmp	r3, r4
 80056ac:	db01      	blt.n	80056b2 <__sfputc_r+0x16>
 80056ae:	290a      	cmp	r1, #10
 80056b0:	d103      	bne.n	80056ba <__sfputc_r+0x1e>
 80056b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056b6:	f000 bb6d 	b.w	8005d94 <__swbuf_r>
 80056ba:	6813      	ldr	r3, [r2, #0]
 80056bc:	1c58      	adds	r0, r3, #1
 80056be:	6010      	str	r0, [r2, #0]
 80056c0:	7019      	strb	r1, [r3, #0]
 80056c2:	4608      	mov	r0, r1
 80056c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <__sfputs_r>:
 80056ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056cc:	4606      	mov	r6, r0
 80056ce:	460f      	mov	r7, r1
 80056d0:	4614      	mov	r4, r2
 80056d2:	18d5      	adds	r5, r2, r3
 80056d4:	42ac      	cmp	r4, r5
 80056d6:	d101      	bne.n	80056dc <__sfputs_r+0x12>
 80056d8:	2000      	movs	r0, #0
 80056da:	e007      	b.n	80056ec <__sfputs_r+0x22>
 80056dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056e0:	463a      	mov	r2, r7
 80056e2:	4630      	mov	r0, r6
 80056e4:	f7ff ffda 	bl	800569c <__sfputc_r>
 80056e8:	1c43      	adds	r3, r0, #1
 80056ea:	d1f3      	bne.n	80056d4 <__sfputs_r+0xa>
 80056ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080056f0 <_vfiprintf_r>:
 80056f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f4:	460d      	mov	r5, r1
 80056f6:	b09d      	sub	sp, #116	@ 0x74
 80056f8:	4614      	mov	r4, r2
 80056fa:	4698      	mov	r8, r3
 80056fc:	4606      	mov	r6, r0
 80056fe:	b118      	cbz	r0, 8005708 <_vfiprintf_r+0x18>
 8005700:	6a03      	ldr	r3, [r0, #32]
 8005702:	b90b      	cbnz	r3, 8005708 <_vfiprintf_r+0x18>
 8005704:	f7ff fd94 	bl	8005230 <__sinit>
 8005708:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800570a:	07d9      	lsls	r1, r3, #31
 800570c:	d405      	bmi.n	800571a <_vfiprintf_r+0x2a>
 800570e:	89ab      	ldrh	r3, [r5, #12]
 8005710:	059a      	lsls	r2, r3, #22
 8005712:	d402      	bmi.n	800571a <_vfiprintf_r+0x2a>
 8005714:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005716:	f7ff feb2 	bl	800547e <__retarget_lock_acquire_recursive>
 800571a:	89ab      	ldrh	r3, [r5, #12]
 800571c:	071b      	lsls	r3, r3, #28
 800571e:	d501      	bpl.n	8005724 <_vfiprintf_r+0x34>
 8005720:	692b      	ldr	r3, [r5, #16]
 8005722:	b99b      	cbnz	r3, 800574c <_vfiprintf_r+0x5c>
 8005724:	4629      	mov	r1, r5
 8005726:	4630      	mov	r0, r6
 8005728:	f000 fb72 	bl	8005e10 <__swsetup_r>
 800572c:	b170      	cbz	r0, 800574c <_vfiprintf_r+0x5c>
 800572e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005730:	07dc      	lsls	r4, r3, #31
 8005732:	d504      	bpl.n	800573e <_vfiprintf_r+0x4e>
 8005734:	f04f 30ff 	mov.w	r0, #4294967295
 8005738:	b01d      	add	sp, #116	@ 0x74
 800573a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573e:	89ab      	ldrh	r3, [r5, #12]
 8005740:	0598      	lsls	r0, r3, #22
 8005742:	d4f7      	bmi.n	8005734 <_vfiprintf_r+0x44>
 8005744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005746:	f7ff fe9b 	bl	8005480 <__retarget_lock_release_recursive>
 800574a:	e7f3      	b.n	8005734 <_vfiprintf_r+0x44>
 800574c:	2300      	movs	r3, #0
 800574e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005750:	2320      	movs	r3, #32
 8005752:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005756:	f8cd 800c 	str.w	r8, [sp, #12]
 800575a:	2330      	movs	r3, #48	@ 0x30
 800575c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800590c <_vfiprintf_r+0x21c>
 8005760:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005764:	f04f 0901 	mov.w	r9, #1
 8005768:	4623      	mov	r3, r4
 800576a:	469a      	mov	sl, r3
 800576c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005770:	b10a      	cbz	r2, 8005776 <_vfiprintf_r+0x86>
 8005772:	2a25      	cmp	r2, #37	@ 0x25
 8005774:	d1f9      	bne.n	800576a <_vfiprintf_r+0x7a>
 8005776:	ebba 0b04 	subs.w	fp, sl, r4
 800577a:	d00b      	beq.n	8005794 <_vfiprintf_r+0xa4>
 800577c:	465b      	mov	r3, fp
 800577e:	4622      	mov	r2, r4
 8005780:	4629      	mov	r1, r5
 8005782:	4630      	mov	r0, r6
 8005784:	f7ff ffa1 	bl	80056ca <__sfputs_r>
 8005788:	3001      	adds	r0, #1
 800578a:	f000 80a7 	beq.w	80058dc <_vfiprintf_r+0x1ec>
 800578e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005790:	445a      	add	r2, fp
 8005792:	9209      	str	r2, [sp, #36]	@ 0x24
 8005794:	f89a 3000 	ldrb.w	r3, [sl]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f000 809f 	beq.w	80058dc <_vfiprintf_r+0x1ec>
 800579e:	2300      	movs	r3, #0
 80057a0:	f04f 32ff 	mov.w	r2, #4294967295
 80057a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057a8:	f10a 0a01 	add.w	sl, sl, #1
 80057ac:	9304      	str	r3, [sp, #16]
 80057ae:	9307      	str	r3, [sp, #28]
 80057b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80057b6:	4654      	mov	r4, sl
 80057b8:	2205      	movs	r2, #5
 80057ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057be:	4853      	ldr	r0, [pc, #332]	@ (800590c <_vfiprintf_r+0x21c>)
 80057c0:	f7fa fd06 	bl	80001d0 <memchr>
 80057c4:	9a04      	ldr	r2, [sp, #16]
 80057c6:	b9d8      	cbnz	r0, 8005800 <_vfiprintf_r+0x110>
 80057c8:	06d1      	lsls	r1, r2, #27
 80057ca:	bf44      	itt	mi
 80057cc:	2320      	movmi	r3, #32
 80057ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057d2:	0713      	lsls	r3, r2, #28
 80057d4:	bf44      	itt	mi
 80057d6:	232b      	movmi	r3, #43	@ 0x2b
 80057d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057dc:	f89a 3000 	ldrb.w	r3, [sl]
 80057e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80057e2:	d015      	beq.n	8005810 <_vfiprintf_r+0x120>
 80057e4:	9a07      	ldr	r2, [sp, #28]
 80057e6:	4654      	mov	r4, sl
 80057e8:	2000      	movs	r0, #0
 80057ea:	f04f 0c0a 	mov.w	ip, #10
 80057ee:	4621      	mov	r1, r4
 80057f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80057f4:	3b30      	subs	r3, #48	@ 0x30
 80057f6:	2b09      	cmp	r3, #9
 80057f8:	d94b      	bls.n	8005892 <_vfiprintf_r+0x1a2>
 80057fa:	b1b0      	cbz	r0, 800582a <_vfiprintf_r+0x13a>
 80057fc:	9207      	str	r2, [sp, #28]
 80057fe:	e014      	b.n	800582a <_vfiprintf_r+0x13a>
 8005800:	eba0 0308 	sub.w	r3, r0, r8
 8005804:	fa09 f303 	lsl.w	r3, r9, r3
 8005808:	4313      	orrs	r3, r2
 800580a:	9304      	str	r3, [sp, #16]
 800580c:	46a2      	mov	sl, r4
 800580e:	e7d2      	b.n	80057b6 <_vfiprintf_r+0xc6>
 8005810:	9b03      	ldr	r3, [sp, #12]
 8005812:	1d19      	adds	r1, r3, #4
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	9103      	str	r1, [sp, #12]
 8005818:	2b00      	cmp	r3, #0
 800581a:	bfbb      	ittet	lt
 800581c:	425b      	neglt	r3, r3
 800581e:	f042 0202 	orrlt.w	r2, r2, #2
 8005822:	9307      	strge	r3, [sp, #28]
 8005824:	9307      	strlt	r3, [sp, #28]
 8005826:	bfb8      	it	lt
 8005828:	9204      	strlt	r2, [sp, #16]
 800582a:	7823      	ldrb	r3, [r4, #0]
 800582c:	2b2e      	cmp	r3, #46	@ 0x2e
 800582e:	d10a      	bne.n	8005846 <_vfiprintf_r+0x156>
 8005830:	7863      	ldrb	r3, [r4, #1]
 8005832:	2b2a      	cmp	r3, #42	@ 0x2a
 8005834:	d132      	bne.n	800589c <_vfiprintf_r+0x1ac>
 8005836:	9b03      	ldr	r3, [sp, #12]
 8005838:	1d1a      	adds	r2, r3, #4
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	9203      	str	r2, [sp, #12]
 800583e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005842:	3402      	adds	r4, #2
 8005844:	9305      	str	r3, [sp, #20]
 8005846:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800591c <_vfiprintf_r+0x22c>
 800584a:	7821      	ldrb	r1, [r4, #0]
 800584c:	2203      	movs	r2, #3
 800584e:	4650      	mov	r0, sl
 8005850:	f7fa fcbe 	bl	80001d0 <memchr>
 8005854:	b138      	cbz	r0, 8005866 <_vfiprintf_r+0x176>
 8005856:	9b04      	ldr	r3, [sp, #16]
 8005858:	eba0 000a 	sub.w	r0, r0, sl
 800585c:	2240      	movs	r2, #64	@ 0x40
 800585e:	4082      	lsls	r2, r0
 8005860:	4313      	orrs	r3, r2
 8005862:	3401      	adds	r4, #1
 8005864:	9304      	str	r3, [sp, #16]
 8005866:	f814 1b01 	ldrb.w	r1, [r4], #1
 800586a:	4829      	ldr	r0, [pc, #164]	@ (8005910 <_vfiprintf_r+0x220>)
 800586c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005870:	2206      	movs	r2, #6
 8005872:	f7fa fcad 	bl	80001d0 <memchr>
 8005876:	2800      	cmp	r0, #0
 8005878:	d03f      	beq.n	80058fa <_vfiprintf_r+0x20a>
 800587a:	4b26      	ldr	r3, [pc, #152]	@ (8005914 <_vfiprintf_r+0x224>)
 800587c:	bb1b      	cbnz	r3, 80058c6 <_vfiprintf_r+0x1d6>
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	3307      	adds	r3, #7
 8005882:	f023 0307 	bic.w	r3, r3, #7
 8005886:	3308      	adds	r3, #8
 8005888:	9303      	str	r3, [sp, #12]
 800588a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800588c:	443b      	add	r3, r7
 800588e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005890:	e76a      	b.n	8005768 <_vfiprintf_r+0x78>
 8005892:	fb0c 3202 	mla	r2, ip, r2, r3
 8005896:	460c      	mov	r4, r1
 8005898:	2001      	movs	r0, #1
 800589a:	e7a8      	b.n	80057ee <_vfiprintf_r+0xfe>
 800589c:	2300      	movs	r3, #0
 800589e:	3401      	adds	r4, #1
 80058a0:	9305      	str	r3, [sp, #20]
 80058a2:	4619      	mov	r1, r3
 80058a4:	f04f 0c0a 	mov.w	ip, #10
 80058a8:	4620      	mov	r0, r4
 80058aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058ae:	3a30      	subs	r2, #48	@ 0x30
 80058b0:	2a09      	cmp	r2, #9
 80058b2:	d903      	bls.n	80058bc <_vfiprintf_r+0x1cc>
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d0c6      	beq.n	8005846 <_vfiprintf_r+0x156>
 80058b8:	9105      	str	r1, [sp, #20]
 80058ba:	e7c4      	b.n	8005846 <_vfiprintf_r+0x156>
 80058bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80058c0:	4604      	mov	r4, r0
 80058c2:	2301      	movs	r3, #1
 80058c4:	e7f0      	b.n	80058a8 <_vfiprintf_r+0x1b8>
 80058c6:	ab03      	add	r3, sp, #12
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	462a      	mov	r2, r5
 80058cc:	4b12      	ldr	r3, [pc, #72]	@ (8005918 <_vfiprintf_r+0x228>)
 80058ce:	a904      	add	r1, sp, #16
 80058d0:	4630      	mov	r0, r6
 80058d2:	f3af 8000 	nop.w
 80058d6:	4607      	mov	r7, r0
 80058d8:	1c78      	adds	r0, r7, #1
 80058da:	d1d6      	bne.n	800588a <_vfiprintf_r+0x19a>
 80058dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058de:	07d9      	lsls	r1, r3, #31
 80058e0:	d405      	bmi.n	80058ee <_vfiprintf_r+0x1fe>
 80058e2:	89ab      	ldrh	r3, [r5, #12]
 80058e4:	059a      	lsls	r2, r3, #22
 80058e6:	d402      	bmi.n	80058ee <_vfiprintf_r+0x1fe>
 80058e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058ea:	f7ff fdc9 	bl	8005480 <__retarget_lock_release_recursive>
 80058ee:	89ab      	ldrh	r3, [r5, #12]
 80058f0:	065b      	lsls	r3, r3, #25
 80058f2:	f53f af1f 	bmi.w	8005734 <_vfiprintf_r+0x44>
 80058f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80058f8:	e71e      	b.n	8005738 <_vfiprintf_r+0x48>
 80058fa:	ab03      	add	r3, sp, #12
 80058fc:	9300      	str	r3, [sp, #0]
 80058fe:	462a      	mov	r2, r5
 8005900:	4b05      	ldr	r3, [pc, #20]	@ (8005918 <_vfiprintf_r+0x228>)
 8005902:	a904      	add	r1, sp, #16
 8005904:	4630      	mov	r0, r6
 8005906:	f000 f879 	bl	80059fc <_printf_i>
 800590a:	e7e4      	b.n	80058d6 <_vfiprintf_r+0x1e6>
 800590c:	08006443 	.word	0x08006443
 8005910:	0800644d 	.word	0x0800644d
 8005914:	00000000 	.word	0x00000000
 8005918:	080056cb 	.word	0x080056cb
 800591c:	08006449 	.word	0x08006449

08005920 <_printf_common>:
 8005920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005924:	4616      	mov	r6, r2
 8005926:	4698      	mov	r8, r3
 8005928:	688a      	ldr	r2, [r1, #8]
 800592a:	690b      	ldr	r3, [r1, #16]
 800592c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005930:	4293      	cmp	r3, r2
 8005932:	bfb8      	it	lt
 8005934:	4613      	movlt	r3, r2
 8005936:	6033      	str	r3, [r6, #0]
 8005938:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800593c:	4607      	mov	r7, r0
 800593e:	460c      	mov	r4, r1
 8005940:	b10a      	cbz	r2, 8005946 <_printf_common+0x26>
 8005942:	3301      	adds	r3, #1
 8005944:	6033      	str	r3, [r6, #0]
 8005946:	6823      	ldr	r3, [r4, #0]
 8005948:	0699      	lsls	r1, r3, #26
 800594a:	bf42      	ittt	mi
 800594c:	6833      	ldrmi	r3, [r6, #0]
 800594e:	3302      	addmi	r3, #2
 8005950:	6033      	strmi	r3, [r6, #0]
 8005952:	6825      	ldr	r5, [r4, #0]
 8005954:	f015 0506 	ands.w	r5, r5, #6
 8005958:	d106      	bne.n	8005968 <_printf_common+0x48>
 800595a:	f104 0a19 	add.w	sl, r4, #25
 800595e:	68e3      	ldr	r3, [r4, #12]
 8005960:	6832      	ldr	r2, [r6, #0]
 8005962:	1a9b      	subs	r3, r3, r2
 8005964:	42ab      	cmp	r3, r5
 8005966:	dc26      	bgt.n	80059b6 <_printf_common+0x96>
 8005968:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800596c:	6822      	ldr	r2, [r4, #0]
 800596e:	3b00      	subs	r3, #0
 8005970:	bf18      	it	ne
 8005972:	2301      	movne	r3, #1
 8005974:	0692      	lsls	r2, r2, #26
 8005976:	d42b      	bmi.n	80059d0 <_printf_common+0xb0>
 8005978:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800597c:	4641      	mov	r1, r8
 800597e:	4638      	mov	r0, r7
 8005980:	47c8      	blx	r9
 8005982:	3001      	adds	r0, #1
 8005984:	d01e      	beq.n	80059c4 <_printf_common+0xa4>
 8005986:	6823      	ldr	r3, [r4, #0]
 8005988:	6922      	ldr	r2, [r4, #16]
 800598a:	f003 0306 	and.w	r3, r3, #6
 800598e:	2b04      	cmp	r3, #4
 8005990:	bf02      	ittt	eq
 8005992:	68e5      	ldreq	r5, [r4, #12]
 8005994:	6833      	ldreq	r3, [r6, #0]
 8005996:	1aed      	subeq	r5, r5, r3
 8005998:	68a3      	ldr	r3, [r4, #8]
 800599a:	bf0c      	ite	eq
 800599c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059a0:	2500      	movne	r5, #0
 80059a2:	4293      	cmp	r3, r2
 80059a4:	bfc4      	itt	gt
 80059a6:	1a9b      	subgt	r3, r3, r2
 80059a8:	18ed      	addgt	r5, r5, r3
 80059aa:	2600      	movs	r6, #0
 80059ac:	341a      	adds	r4, #26
 80059ae:	42b5      	cmp	r5, r6
 80059b0:	d11a      	bne.n	80059e8 <_printf_common+0xc8>
 80059b2:	2000      	movs	r0, #0
 80059b4:	e008      	b.n	80059c8 <_printf_common+0xa8>
 80059b6:	2301      	movs	r3, #1
 80059b8:	4652      	mov	r2, sl
 80059ba:	4641      	mov	r1, r8
 80059bc:	4638      	mov	r0, r7
 80059be:	47c8      	blx	r9
 80059c0:	3001      	adds	r0, #1
 80059c2:	d103      	bne.n	80059cc <_printf_common+0xac>
 80059c4:	f04f 30ff 	mov.w	r0, #4294967295
 80059c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059cc:	3501      	adds	r5, #1
 80059ce:	e7c6      	b.n	800595e <_printf_common+0x3e>
 80059d0:	18e1      	adds	r1, r4, r3
 80059d2:	1c5a      	adds	r2, r3, #1
 80059d4:	2030      	movs	r0, #48	@ 0x30
 80059d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059da:	4422      	add	r2, r4
 80059dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059e4:	3302      	adds	r3, #2
 80059e6:	e7c7      	b.n	8005978 <_printf_common+0x58>
 80059e8:	2301      	movs	r3, #1
 80059ea:	4622      	mov	r2, r4
 80059ec:	4641      	mov	r1, r8
 80059ee:	4638      	mov	r0, r7
 80059f0:	47c8      	blx	r9
 80059f2:	3001      	adds	r0, #1
 80059f4:	d0e6      	beq.n	80059c4 <_printf_common+0xa4>
 80059f6:	3601      	adds	r6, #1
 80059f8:	e7d9      	b.n	80059ae <_printf_common+0x8e>
	...

080059fc <_printf_i>:
 80059fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a00:	7e0f      	ldrb	r7, [r1, #24]
 8005a02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a04:	2f78      	cmp	r7, #120	@ 0x78
 8005a06:	4691      	mov	r9, r2
 8005a08:	4680      	mov	r8, r0
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	469a      	mov	sl, r3
 8005a0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a12:	d807      	bhi.n	8005a24 <_printf_i+0x28>
 8005a14:	2f62      	cmp	r7, #98	@ 0x62
 8005a16:	d80a      	bhi.n	8005a2e <_printf_i+0x32>
 8005a18:	2f00      	cmp	r7, #0
 8005a1a:	f000 80d2 	beq.w	8005bc2 <_printf_i+0x1c6>
 8005a1e:	2f58      	cmp	r7, #88	@ 0x58
 8005a20:	f000 80b9 	beq.w	8005b96 <_printf_i+0x19a>
 8005a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a2c:	e03a      	b.n	8005aa4 <_printf_i+0xa8>
 8005a2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a32:	2b15      	cmp	r3, #21
 8005a34:	d8f6      	bhi.n	8005a24 <_printf_i+0x28>
 8005a36:	a101      	add	r1, pc, #4	@ (adr r1, 8005a3c <_printf_i+0x40>)
 8005a38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a3c:	08005a95 	.word	0x08005a95
 8005a40:	08005aa9 	.word	0x08005aa9
 8005a44:	08005a25 	.word	0x08005a25
 8005a48:	08005a25 	.word	0x08005a25
 8005a4c:	08005a25 	.word	0x08005a25
 8005a50:	08005a25 	.word	0x08005a25
 8005a54:	08005aa9 	.word	0x08005aa9
 8005a58:	08005a25 	.word	0x08005a25
 8005a5c:	08005a25 	.word	0x08005a25
 8005a60:	08005a25 	.word	0x08005a25
 8005a64:	08005a25 	.word	0x08005a25
 8005a68:	08005ba9 	.word	0x08005ba9
 8005a6c:	08005ad3 	.word	0x08005ad3
 8005a70:	08005b63 	.word	0x08005b63
 8005a74:	08005a25 	.word	0x08005a25
 8005a78:	08005a25 	.word	0x08005a25
 8005a7c:	08005bcb 	.word	0x08005bcb
 8005a80:	08005a25 	.word	0x08005a25
 8005a84:	08005ad3 	.word	0x08005ad3
 8005a88:	08005a25 	.word	0x08005a25
 8005a8c:	08005a25 	.word	0x08005a25
 8005a90:	08005b6b 	.word	0x08005b6b
 8005a94:	6833      	ldr	r3, [r6, #0]
 8005a96:	1d1a      	adds	r2, r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6032      	str	r2, [r6, #0]
 8005a9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005aa0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e09d      	b.n	8005be4 <_printf_i+0x1e8>
 8005aa8:	6833      	ldr	r3, [r6, #0]
 8005aaa:	6820      	ldr	r0, [r4, #0]
 8005aac:	1d19      	adds	r1, r3, #4
 8005aae:	6031      	str	r1, [r6, #0]
 8005ab0:	0606      	lsls	r6, r0, #24
 8005ab2:	d501      	bpl.n	8005ab8 <_printf_i+0xbc>
 8005ab4:	681d      	ldr	r5, [r3, #0]
 8005ab6:	e003      	b.n	8005ac0 <_printf_i+0xc4>
 8005ab8:	0645      	lsls	r5, r0, #25
 8005aba:	d5fb      	bpl.n	8005ab4 <_printf_i+0xb8>
 8005abc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ac0:	2d00      	cmp	r5, #0
 8005ac2:	da03      	bge.n	8005acc <_printf_i+0xd0>
 8005ac4:	232d      	movs	r3, #45	@ 0x2d
 8005ac6:	426d      	negs	r5, r5
 8005ac8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005acc:	4859      	ldr	r0, [pc, #356]	@ (8005c34 <_printf_i+0x238>)
 8005ace:	230a      	movs	r3, #10
 8005ad0:	e011      	b.n	8005af6 <_printf_i+0xfa>
 8005ad2:	6821      	ldr	r1, [r4, #0]
 8005ad4:	6833      	ldr	r3, [r6, #0]
 8005ad6:	0608      	lsls	r0, r1, #24
 8005ad8:	f853 5b04 	ldr.w	r5, [r3], #4
 8005adc:	d402      	bmi.n	8005ae4 <_printf_i+0xe8>
 8005ade:	0649      	lsls	r1, r1, #25
 8005ae0:	bf48      	it	mi
 8005ae2:	b2ad      	uxthmi	r5, r5
 8005ae4:	2f6f      	cmp	r7, #111	@ 0x6f
 8005ae6:	4853      	ldr	r0, [pc, #332]	@ (8005c34 <_printf_i+0x238>)
 8005ae8:	6033      	str	r3, [r6, #0]
 8005aea:	bf14      	ite	ne
 8005aec:	230a      	movne	r3, #10
 8005aee:	2308      	moveq	r3, #8
 8005af0:	2100      	movs	r1, #0
 8005af2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005af6:	6866      	ldr	r6, [r4, #4]
 8005af8:	60a6      	str	r6, [r4, #8]
 8005afa:	2e00      	cmp	r6, #0
 8005afc:	bfa2      	ittt	ge
 8005afe:	6821      	ldrge	r1, [r4, #0]
 8005b00:	f021 0104 	bicge.w	r1, r1, #4
 8005b04:	6021      	strge	r1, [r4, #0]
 8005b06:	b90d      	cbnz	r5, 8005b0c <_printf_i+0x110>
 8005b08:	2e00      	cmp	r6, #0
 8005b0a:	d04b      	beq.n	8005ba4 <_printf_i+0x1a8>
 8005b0c:	4616      	mov	r6, r2
 8005b0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b12:	fb03 5711 	mls	r7, r3, r1, r5
 8005b16:	5dc7      	ldrb	r7, [r0, r7]
 8005b18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b1c:	462f      	mov	r7, r5
 8005b1e:	42bb      	cmp	r3, r7
 8005b20:	460d      	mov	r5, r1
 8005b22:	d9f4      	bls.n	8005b0e <_printf_i+0x112>
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d10b      	bne.n	8005b40 <_printf_i+0x144>
 8005b28:	6823      	ldr	r3, [r4, #0]
 8005b2a:	07df      	lsls	r7, r3, #31
 8005b2c:	d508      	bpl.n	8005b40 <_printf_i+0x144>
 8005b2e:	6923      	ldr	r3, [r4, #16]
 8005b30:	6861      	ldr	r1, [r4, #4]
 8005b32:	4299      	cmp	r1, r3
 8005b34:	bfde      	ittt	le
 8005b36:	2330      	movle	r3, #48	@ 0x30
 8005b38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b40:	1b92      	subs	r2, r2, r6
 8005b42:	6122      	str	r2, [r4, #16]
 8005b44:	f8cd a000 	str.w	sl, [sp]
 8005b48:	464b      	mov	r3, r9
 8005b4a:	aa03      	add	r2, sp, #12
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	4640      	mov	r0, r8
 8005b50:	f7ff fee6 	bl	8005920 <_printf_common>
 8005b54:	3001      	adds	r0, #1
 8005b56:	d14a      	bne.n	8005bee <_printf_i+0x1f2>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	b004      	add	sp, #16
 8005b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b62:	6823      	ldr	r3, [r4, #0]
 8005b64:	f043 0320 	orr.w	r3, r3, #32
 8005b68:	6023      	str	r3, [r4, #0]
 8005b6a:	4833      	ldr	r0, [pc, #204]	@ (8005c38 <_printf_i+0x23c>)
 8005b6c:	2778      	movs	r7, #120	@ 0x78
 8005b6e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	6831      	ldr	r1, [r6, #0]
 8005b76:	061f      	lsls	r7, r3, #24
 8005b78:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b7c:	d402      	bmi.n	8005b84 <_printf_i+0x188>
 8005b7e:	065f      	lsls	r7, r3, #25
 8005b80:	bf48      	it	mi
 8005b82:	b2ad      	uxthmi	r5, r5
 8005b84:	6031      	str	r1, [r6, #0]
 8005b86:	07d9      	lsls	r1, r3, #31
 8005b88:	bf44      	itt	mi
 8005b8a:	f043 0320 	orrmi.w	r3, r3, #32
 8005b8e:	6023      	strmi	r3, [r4, #0]
 8005b90:	b11d      	cbz	r5, 8005b9a <_printf_i+0x19e>
 8005b92:	2310      	movs	r3, #16
 8005b94:	e7ac      	b.n	8005af0 <_printf_i+0xf4>
 8005b96:	4827      	ldr	r0, [pc, #156]	@ (8005c34 <_printf_i+0x238>)
 8005b98:	e7e9      	b.n	8005b6e <_printf_i+0x172>
 8005b9a:	6823      	ldr	r3, [r4, #0]
 8005b9c:	f023 0320 	bic.w	r3, r3, #32
 8005ba0:	6023      	str	r3, [r4, #0]
 8005ba2:	e7f6      	b.n	8005b92 <_printf_i+0x196>
 8005ba4:	4616      	mov	r6, r2
 8005ba6:	e7bd      	b.n	8005b24 <_printf_i+0x128>
 8005ba8:	6833      	ldr	r3, [r6, #0]
 8005baa:	6825      	ldr	r5, [r4, #0]
 8005bac:	6961      	ldr	r1, [r4, #20]
 8005bae:	1d18      	adds	r0, r3, #4
 8005bb0:	6030      	str	r0, [r6, #0]
 8005bb2:	062e      	lsls	r6, r5, #24
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	d501      	bpl.n	8005bbc <_printf_i+0x1c0>
 8005bb8:	6019      	str	r1, [r3, #0]
 8005bba:	e002      	b.n	8005bc2 <_printf_i+0x1c6>
 8005bbc:	0668      	lsls	r0, r5, #25
 8005bbe:	d5fb      	bpl.n	8005bb8 <_printf_i+0x1bc>
 8005bc0:	8019      	strh	r1, [r3, #0]
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	6123      	str	r3, [r4, #16]
 8005bc6:	4616      	mov	r6, r2
 8005bc8:	e7bc      	b.n	8005b44 <_printf_i+0x148>
 8005bca:	6833      	ldr	r3, [r6, #0]
 8005bcc:	1d1a      	adds	r2, r3, #4
 8005bce:	6032      	str	r2, [r6, #0]
 8005bd0:	681e      	ldr	r6, [r3, #0]
 8005bd2:	6862      	ldr	r2, [r4, #4]
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f7fa fafa 	bl	80001d0 <memchr>
 8005bdc:	b108      	cbz	r0, 8005be2 <_printf_i+0x1e6>
 8005bde:	1b80      	subs	r0, r0, r6
 8005be0:	6060      	str	r0, [r4, #4]
 8005be2:	6863      	ldr	r3, [r4, #4]
 8005be4:	6123      	str	r3, [r4, #16]
 8005be6:	2300      	movs	r3, #0
 8005be8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bec:	e7aa      	b.n	8005b44 <_printf_i+0x148>
 8005bee:	6923      	ldr	r3, [r4, #16]
 8005bf0:	4632      	mov	r2, r6
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	47d0      	blx	sl
 8005bf8:	3001      	adds	r0, #1
 8005bfa:	d0ad      	beq.n	8005b58 <_printf_i+0x15c>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	079b      	lsls	r3, r3, #30
 8005c00:	d413      	bmi.n	8005c2a <_printf_i+0x22e>
 8005c02:	68e0      	ldr	r0, [r4, #12]
 8005c04:	9b03      	ldr	r3, [sp, #12]
 8005c06:	4298      	cmp	r0, r3
 8005c08:	bfb8      	it	lt
 8005c0a:	4618      	movlt	r0, r3
 8005c0c:	e7a6      	b.n	8005b5c <_printf_i+0x160>
 8005c0e:	2301      	movs	r3, #1
 8005c10:	4632      	mov	r2, r6
 8005c12:	4649      	mov	r1, r9
 8005c14:	4640      	mov	r0, r8
 8005c16:	47d0      	blx	sl
 8005c18:	3001      	adds	r0, #1
 8005c1a:	d09d      	beq.n	8005b58 <_printf_i+0x15c>
 8005c1c:	3501      	adds	r5, #1
 8005c1e:	68e3      	ldr	r3, [r4, #12]
 8005c20:	9903      	ldr	r1, [sp, #12]
 8005c22:	1a5b      	subs	r3, r3, r1
 8005c24:	42ab      	cmp	r3, r5
 8005c26:	dcf2      	bgt.n	8005c0e <_printf_i+0x212>
 8005c28:	e7eb      	b.n	8005c02 <_printf_i+0x206>
 8005c2a:	2500      	movs	r5, #0
 8005c2c:	f104 0619 	add.w	r6, r4, #25
 8005c30:	e7f5      	b.n	8005c1e <_printf_i+0x222>
 8005c32:	bf00      	nop
 8005c34:	08006454 	.word	0x08006454
 8005c38:	08006465 	.word	0x08006465

08005c3c <__sflush_r>:
 8005c3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c44:	0716      	lsls	r6, r2, #28
 8005c46:	4605      	mov	r5, r0
 8005c48:	460c      	mov	r4, r1
 8005c4a:	d454      	bmi.n	8005cf6 <__sflush_r+0xba>
 8005c4c:	684b      	ldr	r3, [r1, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	dc02      	bgt.n	8005c58 <__sflush_r+0x1c>
 8005c52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	dd48      	ble.n	8005cea <__sflush_r+0xae>
 8005c58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c5a:	2e00      	cmp	r6, #0
 8005c5c:	d045      	beq.n	8005cea <__sflush_r+0xae>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c64:	682f      	ldr	r7, [r5, #0]
 8005c66:	6a21      	ldr	r1, [r4, #32]
 8005c68:	602b      	str	r3, [r5, #0]
 8005c6a:	d030      	beq.n	8005cce <__sflush_r+0x92>
 8005c6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005c6e:	89a3      	ldrh	r3, [r4, #12]
 8005c70:	0759      	lsls	r1, r3, #29
 8005c72:	d505      	bpl.n	8005c80 <__sflush_r+0x44>
 8005c74:	6863      	ldr	r3, [r4, #4]
 8005c76:	1ad2      	subs	r2, r2, r3
 8005c78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005c7a:	b10b      	cbz	r3, 8005c80 <__sflush_r+0x44>
 8005c7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005c7e:	1ad2      	subs	r2, r2, r3
 8005c80:	2300      	movs	r3, #0
 8005c82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c84:	6a21      	ldr	r1, [r4, #32]
 8005c86:	4628      	mov	r0, r5
 8005c88:	47b0      	blx	r6
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	d106      	bne.n	8005c9e <__sflush_r+0x62>
 8005c90:	6829      	ldr	r1, [r5, #0]
 8005c92:	291d      	cmp	r1, #29
 8005c94:	d82b      	bhi.n	8005cee <__sflush_r+0xb2>
 8005c96:	4a2a      	ldr	r2, [pc, #168]	@ (8005d40 <__sflush_r+0x104>)
 8005c98:	410a      	asrs	r2, r1
 8005c9a:	07d6      	lsls	r6, r2, #31
 8005c9c:	d427      	bmi.n	8005cee <__sflush_r+0xb2>
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	6062      	str	r2, [r4, #4]
 8005ca2:	04d9      	lsls	r1, r3, #19
 8005ca4:	6922      	ldr	r2, [r4, #16]
 8005ca6:	6022      	str	r2, [r4, #0]
 8005ca8:	d504      	bpl.n	8005cb4 <__sflush_r+0x78>
 8005caa:	1c42      	adds	r2, r0, #1
 8005cac:	d101      	bne.n	8005cb2 <__sflush_r+0x76>
 8005cae:	682b      	ldr	r3, [r5, #0]
 8005cb0:	b903      	cbnz	r3, 8005cb4 <__sflush_r+0x78>
 8005cb2:	6560      	str	r0, [r4, #84]	@ 0x54
 8005cb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cb6:	602f      	str	r7, [r5, #0]
 8005cb8:	b1b9      	cbz	r1, 8005cea <__sflush_r+0xae>
 8005cba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cbe:	4299      	cmp	r1, r3
 8005cc0:	d002      	beq.n	8005cc8 <__sflush_r+0x8c>
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f7ff fbf2 	bl	80054ac <_free_r>
 8005cc8:	2300      	movs	r3, #0
 8005cca:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ccc:	e00d      	b.n	8005cea <__sflush_r+0xae>
 8005cce:	2301      	movs	r3, #1
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	47b0      	blx	r6
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	1c50      	adds	r0, r2, #1
 8005cd8:	d1c9      	bne.n	8005c6e <__sflush_r+0x32>
 8005cda:	682b      	ldr	r3, [r5, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d0c6      	beq.n	8005c6e <__sflush_r+0x32>
 8005ce0:	2b1d      	cmp	r3, #29
 8005ce2:	d001      	beq.n	8005ce8 <__sflush_r+0xac>
 8005ce4:	2b16      	cmp	r3, #22
 8005ce6:	d11e      	bne.n	8005d26 <__sflush_r+0xea>
 8005ce8:	602f      	str	r7, [r5, #0]
 8005cea:	2000      	movs	r0, #0
 8005cec:	e022      	b.n	8005d34 <__sflush_r+0xf8>
 8005cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cf2:	b21b      	sxth	r3, r3
 8005cf4:	e01b      	b.n	8005d2e <__sflush_r+0xf2>
 8005cf6:	690f      	ldr	r7, [r1, #16]
 8005cf8:	2f00      	cmp	r7, #0
 8005cfa:	d0f6      	beq.n	8005cea <__sflush_r+0xae>
 8005cfc:	0793      	lsls	r3, r2, #30
 8005cfe:	680e      	ldr	r6, [r1, #0]
 8005d00:	bf08      	it	eq
 8005d02:	694b      	ldreq	r3, [r1, #20]
 8005d04:	600f      	str	r7, [r1, #0]
 8005d06:	bf18      	it	ne
 8005d08:	2300      	movne	r3, #0
 8005d0a:	eba6 0807 	sub.w	r8, r6, r7
 8005d0e:	608b      	str	r3, [r1, #8]
 8005d10:	f1b8 0f00 	cmp.w	r8, #0
 8005d14:	dde9      	ble.n	8005cea <__sflush_r+0xae>
 8005d16:	6a21      	ldr	r1, [r4, #32]
 8005d18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d1a:	4643      	mov	r3, r8
 8005d1c:	463a      	mov	r2, r7
 8005d1e:	4628      	mov	r0, r5
 8005d20:	47b0      	blx	r6
 8005d22:	2800      	cmp	r0, #0
 8005d24:	dc08      	bgt.n	8005d38 <__sflush_r+0xfc>
 8005d26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d2e:	81a3      	strh	r3, [r4, #12]
 8005d30:	f04f 30ff 	mov.w	r0, #4294967295
 8005d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d38:	4407      	add	r7, r0
 8005d3a:	eba8 0800 	sub.w	r8, r8, r0
 8005d3e:	e7e7      	b.n	8005d10 <__sflush_r+0xd4>
 8005d40:	dfbffffe 	.word	0xdfbffffe

08005d44 <_fflush_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	690b      	ldr	r3, [r1, #16]
 8005d48:	4605      	mov	r5, r0
 8005d4a:	460c      	mov	r4, r1
 8005d4c:	b913      	cbnz	r3, 8005d54 <_fflush_r+0x10>
 8005d4e:	2500      	movs	r5, #0
 8005d50:	4628      	mov	r0, r5
 8005d52:	bd38      	pop	{r3, r4, r5, pc}
 8005d54:	b118      	cbz	r0, 8005d5e <_fflush_r+0x1a>
 8005d56:	6a03      	ldr	r3, [r0, #32]
 8005d58:	b90b      	cbnz	r3, 8005d5e <_fflush_r+0x1a>
 8005d5a:	f7ff fa69 	bl	8005230 <__sinit>
 8005d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f3      	beq.n	8005d4e <_fflush_r+0xa>
 8005d66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d68:	07d0      	lsls	r0, r2, #31
 8005d6a:	d404      	bmi.n	8005d76 <_fflush_r+0x32>
 8005d6c:	0599      	lsls	r1, r3, #22
 8005d6e:	d402      	bmi.n	8005d76 <_fflush_r+0x32>
 8005d70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d72:	f7ff fb84 	bl	800547e <__retarget_lock_acquire_recursive>
 8005d76:	4628      	mov	r0, r5
 8005d78:	4621      	mov	r1, r4
 8005d7a:	f7ff ff5f 	bl	8005c3c <__sflush_r>
 8005d7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005d80:	07da      	lsls	r2, r3, #31
 8005d82:	4605      	mov	r5, r0
 8005d84:	d4e4      	bmi.n	8005d50 <_fflush_r+0xc>
 8005d86:	89a3      	ldrh	r3, [r4, #12]
 8005d88:	059b      	lsls	r3, r3, #22
 8005d8a:	d4e1      	bmi.n	8005d50 <_fflush_r+0xc>
 8005d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005d8e:	f7ff fb77 	bl	8005480 <__retarget_lock_release_recursive>
 8005d92:	e7dd      	b.n	8005d50 <_fflush_r+0xc>

08005d94 <__swbuf_r>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	460e      	mov	r6, r1
 8005d98:	4614      	mov	r4, r2
 8005d9a:	4605      	mov	r5, r0
 8005d9c:	b118      	cbz	r0, 8005da6 <__swbuf_r+0x12>
 8005d9e:	6a03      	ldr	r3, [r0, #32]
 8005da0:	b90b      	cbnz	r3, 8005da6 <__swbuf_r+0x12>
 8005da2:	f7ff fa45 	bl	8005230 <__sinit>
 8005da6:	69a3      	ldr	r3, [r4, #24]
 8005da8:	60a3      	str	r3, [r4, #8]
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	071a      	lsls	r2, r3, #28
 8005dae:	d501      	bpl.n	8005db4 <__swbuf_r+0x20>
 8005db0:	6923      	ldr	r3, [r4, #16]
 8005db2:	b943      	cbnz	r3, 8005dc6 <__swbuf_r+0x32>
 8005db4:	4621      	mov	r1, r4
 8005db6:	4628      	mov	r0, r5
 8005db8:	f000 f82a 	bl	8005e10 <__swsetup_r>
 8005dbc:	b118      	cbz	r0, 8005dc6 <__swbuf_r+0x32>
 8005dbe:	f04f 37ff 	mov.w	r7, #4294967295
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	6922      	ldr	r2, [r4, #16]
 8005dca:	1a98      	subs	r0, r3, r2
 8005dcc:	6963      	ldr	r3, [r4, #20]
 8005dce:	b2f6      	uxtb	r6, r6
 8005dd0:	4283      	cmp	r3, r0
 8005dd2:	4637      	mov	r7, r6
 8005dd4:	dc05      	bgt.n	8005de2 <__swbuf_r+0x4e>
 8005dd6:	4621      	mov	r1, r4
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f7ff ffb3 	bl	8005d44 <_fflush_r>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d1ed      	bne.n	8005dbe <__swbuf_r+0x2a>
 8005de2:	68a3      	ldr	r3, [r4, #8]
 8005de4:	3b01      	subs	r3, #1
 8005de6:	60a3      	str	r3, [r4, #8]
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	6022      	str	r2, [r4, #0]
 8005dee:	701e      	strb	r6, [r3, #0]
 8005df0:	6962      	ldr	r2, [r4, #20]
 8005df2:	1c43      	adds	r3, r0, #1
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d004      	beq.n	8005e02 <__swbuf_r+0x6e>
 8005df8:	89a3      	ldrh	r3, [r4, #12]
 8005dfa:	07db      	lsls	r3, r3, #31
 8005dfc:	d5e1      	bpl.n	8005dc2 <__swbuf_r+0x2e>
 8005dfe:	2e0a      	cmp	r6, #10
 8005e00:	d1df      	bne.n	8005dc2 <__swbuf_r+0x2e>
 8005e02:	4621      	mov	r1, r4
 8005e04:	4628      	mov	r0, r5
 8005e06:	f7ff ff9d 	bl	8005d44 <_fflush_r>
 8005e0a:	2800      	cmp	r0, #0
 8005e0c:	d0d9      	beq.n	8005dc2 <__swbuf_r+0x2e>
 8005e0e:	e7d6      	b.n	8005dbe <__swbuf_r+0x2a>

08005e10 <__swsetup_r>:
 8005e10:	b538      	push	{r3, r4, r5, lr}
 8005e12:	4b29      	ldr	r3, [pc, #164]	@ (8005eb8 <__swsetup_r+0xa8>)
 8005e14:	4605      	mov	r5, r0
 8005e16:	6818      	ldr	r0, [r3, #0]
 8005e18:	460c      	mov	r4, r1
 8005e1a:	b118      	cbz	r0, 8005e24 <__swsetup_r+0x14>
 8005e1c:	6a03      	ldr	r3, [r0, #32]
 8005e1e:	b90b      	cbnz	r3, 8005e24 <__swsetup_r+0x14>
 8005e20:	f7ff fa06 	bl	8005230 <__sinit>
 8005e24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e28:	0719      	lsls	r1, r3, #28
 8005e2a:	d422      	bmi.n	8005e72 <__swsetup_r+0x62>
 8005e2c:	06da      	lsls	r2, r3, #27
 8005e2e:	d407      	bmi.n	8005e40 <__swsetup_r+0x30>
 8005e30:	2209      	movs	r2, #9
 8005e32:	602a      	str	r2, [r5, #0]
 8005e34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e38:	81a3      	strh	r3, [r4, #12]
 8005e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e3e:	e033      	b.n	8005ea8 <__swsetup_r+0x98>
 8005e40:	0758      	lsls	r0, r3, #29
 8005e42:	d512      	bpl.n	8005e6a <__swsetup_r+0x5a>
 8005e44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e46:	b141      	cbz	r1, 8005e5a <__swsetup_r+0x4a>
 8005e48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e4c:	4299      	cmp	r1, r3
 8005e4e:	d002      	beq.n	8005e56 <__swsetup_r+0x46>
 8005e50:	4628      	mov	r0, r5
 8005e52:	f7ff fb2b 	bl	80054ac <_free_r>
 8005e56:	2300      	movs	r3, #0
 8005e58:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e5a:	89a3      	ldrh	r3, [r4, #12]
 8005e5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e60:	81a3      	strh	r3, [r4, #12]
 8005e62:	2300      	movs	r3, #0
 8005e64:	6063      	str	r3, [r4, #4]
 8005e66:	6923      	ldr	r3, [r4, #16]
 8005e68:	6023      	str	r3, [r4, #0]
 8005e6a:	89a3      	ldrh	r3, [r4, #12]
 8005e6c:	f043 0308 	orr.w	r3, r3, #8
 8005e70:	81a3      	strh	r3, [r4, #12]
 8005e72:	6923      	ldr	r3, [r4, #16]
 8005e74:	b94b      	cbnz	r3, 8005e8a <__swsetup_r+0x7a>
 8005e76:	89a3      	ldrh	r3, [r4, #12]
 8005e78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e80:	d003      	beq.n	8005e8a <__swsetup_r+0x7a>
 8005e82:	4621      	mov	r1, r4
 8005e84:	4628      	mov	r0, r5
 8005e86:	f000 f893 	bl	8005fb0 <__smakebuf_r>
 8005e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8e:	f013 0201 	ands.w	r2, r3, #1
 8005e92:	d00a      	beq.n	8005eaa <__swsetup_r+0x9a>
 8005e94:	2200      	movs	r2, #0
 8005e96:	60a2      	str	r2, [r4, #8]
 8005e98:	6962      	ldr	r2, [r4, #20]
 8005e9a:	4252      	negs	r2, r2
 8005e9c:	61a2      	str	r2, [r4, #24]
 8005e9e:	6922      	ldr	r2, [r4, #16]
 8005ea0:	b942      	cbnz	r2, 8005eb4 <__swsetup_r+0xa4>
 8005ea2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ea6:	d1c5      	bne.n	8005e34 <__swsetup_r+0x24>
 8005ea8:	bd38      	pop	{r3, r4, r5, pc}
 8005eaa:	0799      	lsls	r1, r3, #30
 8005eac:	bf58      	it	pl
 8005eae:	6962      	ldrpl	r2, [r4, #20]
 8005eb0:	60a2      	str	r2, [r4, #8]
 8005eb2:	e7f4      	b.n	8005e9e <__swsetup_r+0x8e>
 8005eb4:	2000      	movs	r0, #0
 8005eb6:	e7f7      	b.n	8005ea8 <__swsetup_r+0x98>
 8005eb8:	200001d0 	.word	0x200001d0

08005ebc <_raise_r>:
 8005ebc:	291f      	cmp	r1, #31
 8005ebe:	b538      	push	{r3, r4, r5, lr}
 8005ec0:	4605      	mov	r5, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	d904      	bls.n	8005ed0 <_raise_r+0x14>
 8005ec6:	2316      	movs	r3, #22
 8005ec8:	6003      	str	r3, [r0, #0]
 8005eca:	f04f 30ff 	mov.w	r0, #4294967295
 8005ece:	bd38      	pop	{r3, r4, r5, pc}
 8005ed0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8005ed2:	b112      	cbz	r2, 8005eda <_raise_r+0x1e>
 8005ed4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005ed8:	b94b      	cbnz	r3, 8005eee <_raise_r+0x32>
 8005eda:	4628      	mov	r0, r5
 8005edc:	f000 f830 	bl	8005f40 <_getpid_r>
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005eea:	f000 b817 	b.w	8005f1c <_kill_r>
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d00a      	beq.n	8005f08 <_raise_r+0x4c>
 8005ef2:	1c59      	adds	r1, r3, #1
 8005ef4:	d103      	bne.n	8005efe <_raise_r+0x42>
 8005ef6:	2316      	movs	r3, #22
 8005ef8:	6003      	str	r3, [r0, #0]
 8005efa:	2001      	movs	r0, #1
 8005efc:	e7e7      	b.n	8005ece <_raise_r+0x12>
 8005efe:	2100      	movs	r1, #0
 8005f00:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8005f04:	4620      	mov	r0, r4
 8005f06:	4798      	blx	r3
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e7e0      	b.n	8005ece <_raise_r+0x12>

08005f0c <raise>:
 8005f0c:	4b02      	ldr	r3, [pc, #8]	@ (8005f18 <raise+0xc>)
 8005f0e:	4601      	mov	r1, r0
 8005f10:	6818      	ldr	r0, [r3, #0]
 8005f12:	f7ff bfd3 	b.w	8005ebc <_raise_r>
 8005f16:	bf00      	nop
 8005f18:	200001d0 	.word	0x200001d0

08005f1c <_kill_r>:
 8005f1c:	b538      	push	{r3, r4, r5, lr}
 8005f1e:	4d07      	ldr	r5, [pc, #28]	@ (8005f3c <_kill_r+0x20>)
 8005f20:	2300      	movs	r3, #0
 8005f22:	4604      	mov	r4, r0
 8005f24:	4608      	mov	r0, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	602b      	str	r3, [r5, #0]
 8005f2a:	f7fa fdaf 	bl	8000a8c <_kill>
 8005f2e:	1c43      	adds	r3, r0, #1
 8005f30:	d102      	bne.n	8005f38 <_kill_r+0x1c>
 8005f32:	682b      	ldr	r3, [r5, #0]
 8005f34:	b103      	cbz	r3, 8005f38 <_kill_r+0x1c>
 8005f36:	6023      	str	r3, [r4, #0]
 8005f38:	bd38      	pop	{r3, r4, r5, pc}
 8005f3a:	bf00      	nop
 8005f3c:	200003f4 	.word	0x200003f4

08005f40 <_getpid_r>:
 8005f40:	f7fa bd9c 	b.w	8000a7c <_getpid>

08005f44 <_sbrk_r>:
 8005f44:	b538      	push	{r3, r4, r5, lr}
 8005f46:	4d06      	ldr	r5, [pc, #24]	@ (8005f60 <_sbrk_r+0x1c>)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	4608      	mov	r0, r1
 8005f4e:	602b      	str	r3, [r5, #0]
 8005f50:	f7fa fe24 	bl	8000b9c <_sbrk>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_sbrk_r+0x1a>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_sbrk_r+0x1a>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	200003f4 	.word	0x200003f4

08005f64 <__swhatbuf_r>:
 8005f64:	b570      	push	{r4, r5, r6, lr}
 8005f66:	460c      	mov	r4, r1
 8005f68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f6c:	2900      	cmp	r1, #0
 8005f6e:	b096      	sub	sp, #88	@ 0x58
 8005f70:	4615      	mov	r5, r2
 8005f72:	461e      	mov	r6, r3
 8005f74:	da0d      	bge.n	8005f92 <__swhatbuf_r+0x2e>
 8005f76:	89a3      	ldrh	r3, [r4, #12]
 8005f78:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f7c:	f04f 0100 	mov.w	r1, #0
 8005f80:	bf14      	ite	ne
 8005f82:	2340      	movne	r3, #64	@ 0x40
 8005f84:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f88:	2000      	movs	r0, #0
 8005f8a:	6031      	str	r1, [r6, #0]
 8005f8c:	602b      	str	r3, [r5, #0]
 8005f8e:	b016      	add	sp, #88	@ 0x58
 8005f90:	bd70      	pop	{r4, r5, r6, pc}
 8005f92:	466a      	mov	r2, sp
 8005f94:	f000 f848 	bl	8006028 <_fstat_r>
 8005f98:	2800      	cmp	r0, #0
 8005f9a:	dbec      	blt.n	8005f76 <__swhatbuf_r+0x12>
 8005f9c:	9901      	ldr	r1, [sp, #4]
 8005f9e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005fa2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005fa6:	4259      	negs	r1, r3
 8005fa8:	4159      	adcs	r1, r3
 8005faa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fae:	e7eb      	b.n	8005f88 <__swhatbuf_r+0x24>

08005fb0 <__smakebuf_r>:
 8005fb0:	898b      	ldrh	r3, [r1, #12]
 8005fb2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fb4:	079d      	lsls	r5, r3, #30
 8005fb6:	4606      	mov	r6, r0
 8005fb8:	460c      	mov	r4, r1
 8005fba:	d507      	bpl.n	8005fcc <__smakebuf_r+0x1c>
 8005fbc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	6123      	str	r3, [r4, #16]
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	6163      	str	r3, [r4, #20]
 8005fc8:	b003      	add	sp, #12
 8005fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fcc:	ab01      	add	r3, sp, #4
 8005fce:	466a      	mov	r2, sp
 8005fd0:	f7ff ffc8 	bl	8005f64 <__swhatbuf_r>
 8005fd4:	9f00      	ldr	r7, [sp, #0]
 8005fd6:	4605      	mov	r5, r0
 8005fd8:	4639      	mov	r1, r7
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7ff fad2 	bl	8005584 <_malloc_r>
 8005fe0:	b948      	cbnz	r0, 8005ff6 <__smakebuf_r+0x46>
 8005fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fe6:	059a      	lsls	r2, r3, #22
 8005fe8:	d4ee      	bmi.n	8005fc8 <__smakebuf_r+0x18>
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	f043 0302 	orr.w	r3, r3, #2
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	e7e2      	b.n	8005fbc <__smakebuf_r+0xc>
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	6020      	str	r0, [r4, #0]
 8005ffa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ffe:	81a3      	strh	r3, [r4, #12]
 8006000:	9b01      	ldr	r3, [sp, #4]
 8006002:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006006:	b15b      	cbz	r3, 8006020 <__smakebuf_r+0x70>
 8006008:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800600c:	4630      	mov	r0, r6
 800600e:	f000 f81d 	bl	800604c <_isatty_r>
 8006012:	b128      	cbz	r0, 8006020 <__smakebuf_r+0x70>
 8006014:	89a3      	ldrh	r3, [r4, #12]
 8006016:	f023 0303 	bic.w	r3, r3, #3
 800601a:	f043 0301 	orr.w	r3, r3, #1
 800601e:	81a3      	strh	r3, [r4, #12]
 8006020:	89a3      	ldrh	r3, [r4, #12]
 8006022:	431d      	orrs	r5, r3
 8006024:	81a5      	strh	r5, [r4, #12]
 8006026:	e7cf      	b.n	8005fc8 <__smakebuf_r+0x18>

08006028 <_fstat_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d07      	ldr	r5, [pc, #28]	@ (8006048 <_fstat_r+0x20>)
 800602c:	2300      	movs	r3, #0
 800602e:	4604      	mov	r4, r0
 8006030:	4608      	mov	r0, r1
 8006032:	4611      	mov	r1, r2
 8006034:	602b      	str	r3, [r5, #0]
 8006036:	f7fa fd89 	bl	8000b4c <_fstat>
 800603a:	1c43      	adds	r3, r0, #1
 800603c:	d102      	bne.n	8006044 <_fstat_r+0x1c>
 800603e:	682b      	ldr	r3, [r5, #0]
 8006040:	b103      	cbz	r3, 8006044 <_fstat_r+0x1c>
 8006042:	6023      	str	r3, [r4, #0]
 8006044:	bd38      	pop	{r3, r4, r5, pc}
 8006046:	bf00      	nop
 8006048:	200003f4 	.word	0x200003f4

0800604c <_isatty_r>:
 800604c:	b538      	push	{r3, r4, r5, lr}
 800604e:	4d06      	ldr	r5, [pc, #24]	@ (8006068 <_isatty_r+0x1c>)
 8006050:	2300      	movs	r3, #0
 8006052:	4604      	mov	r4, r0
 8006054:	4608      	mov	r0, r1
 8006056:	602b      	str	r3, [r5, #0]
 8006058:	f7fa fd88 	bl	8000b6c <_isatty>
 800605c:	1c43      	adds	r3, r0, #1
 800605e:	d102      	bne.n	8006066 <_isatty_r+0x1a>
 8006060:	682b      	ldr	r3, [r5, #0]
 8006062:	b103      	cbz	r3, 8006066 <_isatty_r+0x1a>
 8006064:	6023      	str	r3, [r4, #0]
 8006066:	bd38      	pop	{r3, r4, r5, pc}
 8006068:	200003f4 	.word	0x200003f4

0800606c <_init>:
 800606c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800606e:	bf00      	nop
 8006070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006072:	bc08      	pop	{r3}
 8006074:	469e      	mov	lr, r3
 8006076:	4770      	bx	lr

08006078 <_fini>:
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	bf00      	nop
 800607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607e:	bc08      	pop	{r3}
 8006080:	469e      	mov	lr, r3
 8006082:	4770      	bx	lr
