
RFM95W_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b64  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08005cf4  08005cf4  00006cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005dac  08005dac  00007090  2**0
                  CONTENTS
  4 .ARM          00000008  08005dac  08005dac  00006dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005db4  08005db4  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005db4  08005db4  00006db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005db8  08005db8  00006db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08005dbc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000090  08005e4c  00007090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08005e4c  0000738c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e591  00000000  00000000  000070c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024d1  00000000  00000000  00015651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00017b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a2a  00000000  00000000  00018888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc32  00000000  00000000  000192b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001032f  00000000  00000000  00034ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4aa1  00000000  00000000  00045213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9cb4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e40  00000000  00000000  000e9cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000edb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005cdc 	.word	0x08005cdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08005cdc 	.word	0x08005cdc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*Overwrite _write function to allow printf to print to serial consle*/
int _write(int file, char *ptr, int len) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b086      	sub	sp, #24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	HAL_StatusTypeDef hstatus;

	if ( (file == 1) | (file == 2) ){/*Stout=1 or Sterr=2*/
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	bf0c      	ite	eq
 8000b8e:	2301      	moveq	r3, #1
 8000b90:	2300      	movne	r3, #0
 8000b92:	b2da      	uxtb	r2, r3
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	2b02      	cmp	r3, #2
 8000b98:	bf0c      	ite	eq
 8000b9a:	2301      	moveq	r3, #1
 8000b9c:	2300      	movne	r3, #0
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d011      	beq.n	8000bcc <_write+0x50>
		hstatus = HAL_UART_Transmit(&huart2, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb0:	68b9      	ldr	r1, [r7, #8]
 8000bb2:	4809      	ldr	r0, [pc, #36]	@ (8000bd8 <_write+0x5c>)
 8000bb4:	f003 fb2a 	bl	800420c <HAL_UART_Transmit>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	75fb      	strb	r3, [r7, #23]
		if (hstatus == HAL_OK)
 8000bbc:	7dfb      	ldrb	r3, [r7, #23]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <_write+0x4a>
			return len;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	e004      	b.n	8000bd0 <_write+0x54>
		else
			return -1;
 8000bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bca:	e001      	b.n	8000bd0 <_write+0x54>
	}
	return -1;
 8000bcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000198 	.word	0x20000198

08000bdc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0c2      	sub	sp, #264	@ 0x108
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	uint8_t LoRa_buff[RH_RF95_FIFO_SIZE] = {0};
 8000be2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000be6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	3304      	adds	r3, #4
 8000bf0:	22fb      	movs	r2, #251	@ 0xfb
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f004 fb99 	bl	800532c <memset>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfa:	f000 ff6f 	bl	8001adc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfe:	f000 f879 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c02:	f000 f95b 	bl	8000ebc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c06:	f000 f8bb 	bl	8000d80 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c0a:	f000 f927 	bl	8000e5c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000c0e:	f000 f8f5 	bl	8000dfc <MX_USART1_UART_Init>
  MX_FATFS_Init();
 8000c12:	f003 fffb 	bl	8004c0c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
	if(!RF95_Init()){
 8000c16:	f000 fc79 	bl	800150c <RF95_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f083 0301 	eor.w	r3, r3, #1
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d002      	beq.n	8000c2c <main+0x50>
		printf("RFM95 Init Failed\n");
 8000c26:	482d      	ldr	r0, [pc, #180]	@ (8000cdc <main+0x100>)
 8000c28:	f004 faa0 	bl	800516c <puts>
	}
	printf("RFM95 Init Success\n");
 8000c2c:	482c      	ldr	r0, [pc, #176]	@ (8000ce0 <main+0x104>)
 8000c2e:	f004 fa9d 	bl	800516c <puts>
	bool error = true;
 8000c32:	2301      	movs	r3, #1
 8000c34:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
		Clear_Buffer(LoRa_buff);
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 ff3d 	bl	8001aba <Clear_Buffer>
		if(RF95_waitCAD()){
 8000c40:	f000 fdd0 	bl	80017e4 <RF95_waitCAD>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d0f6      	beq.n	8000c38 <main+0x5c>
			HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2180      	movs	r1, #128	@ 0x80
 8000c4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c52:	f001 fa5f 	bl	8002114 <HAL_GPIO_WritePin>
			RF95_setModeRx_Continuous();
 8000c56:	f000 fe81 	bl	800195c <RF95_setModeRx_Continuous>
			error = RF95_receive_Timeout(LoRa_buff, 7000);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	f641 3158 	movw	r1, #7000	@ 0x1b58
 8000c60:	4618      	mov	r0, r3
 8000c62:	f000 fd79 	bl	8001758 <RF95_receive_Timeout>
 8000c66:	4603      	mov	r3, r0
 8000c68:	f887 3103 	strb.w	r3, [r7, #259]	@ 0x103
			HAL_Delay(1000);
 8000c6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c70:	f000 ffa8 	bl	8001bc4 <HAL_Delay>
			HAL_GPIO_WritePin(RX_LED_GPIO_Port, RX_LED_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2180      	movs	r1, #128	@ 0x80
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c7c:	f001 fa4a 	bl	8002114 <HAL_GPIO_WritePin>
			printf("Recieved: "); fflush(stdout);
 8000c80:	4818      	ldr	r0, [pc, #96]	@ (8000ce4 <main+0x108>)
 8000c82:	f004 fa0b 	bl	800509c <iprintf>
 8000c86:	4b18      	ldr	r3, [pc, #96]	@ (8000ce8 <main+0x10c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f004 f92f 	bl	8004ef0 <fflush>
			int n =0;
 8000c92:	2300      	movs	r3, #0
 8000c94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
			do
			{
				printf("%d ", LoRa_buff[n]); fflush(stdout);
 8000c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8000c9c:	f5a3 7282 	sub.w	r2, r3, #260	@ 0x104
 8000ca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4810      	ldr	r0, [pc, #64]	@ (8000cec <main+0x110>)
 8000cac:	f004 f9f6 	bl	800509c <iprintf>
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <main+0x10c>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	689b      	ldr	r3, [r3, #8]
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f004 f91a 	bl	8004ef0 <fflush>
//				n++;
			} while(n++<=RH_RF95_FIFO_SIZE);
 8000cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8000cc0:	1c5a      	adds	r2, r3, #1
 8000cc2:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8000cc6:	2bff      	cmp	r3, #255	@ 0xff
 8000cc8:	dde6      	ble.n	8000c98 <main+0xbc>
			printf("\r\n");
 8000cca:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <main+0x114>)
 8000ccc:	f004 fa4e 	bl	800516c <puts>
			HAL_Delay(1000);
 8000cd0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cd4:	f000 ff76 	bl	8001bc4 <HAL_Delay>
		Clear_Buffer(LoRa_buff);
 8000cd8:	e7ae      	b.n	8000c38 <main+0x5c>
 8000cda:	bf00      	nop
 8000cdc:	08005cf4 	.word	0x08005cf4
 8000ce0:	08005d08 	.word	0x08005d08
 8000ce4:	08005d1c 	.word	0x08005d1c
 8000ce8:	20000040 	.word	0x20000040
 8000cec:	08005d28 	.word	0x08005d28
 8000cf0:	08005d2c 	.word	0x08005d2c

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b096      	sub	sp, #88	@ 0x58
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	2244      	movs	r2, #68	@ 0x44
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f004 fb12 	bl	800532c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	463b      	mov	r3, r7
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	605a      	str	r2, [r3, #4]
 8000d10:	609a      	str	r2, [r3, #8]
 8000d12:	60da      	str	r2, [r3, #12]
 8000d14:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d16:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d1a:	f001 fa45 	bl	80021a8 <HAL_PWREx_ControlVoltageScaling>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d24:	f000 f93e 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d28:	2310      	movs	r3, #16
 8000d2a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8000d34:	23a0      	movs	r3, #160	@ 0xa0
 8000d36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 fa87 	bl	8002254 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000d4c:	f000 f92a 	bl	8000fa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	230f      	movs	r3, #15
 8000d52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000d54:	2300      	movs	r3, #0
 8000d56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	2101      	movs	r1, #1
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f001 fed5 	bl	8002b18 <HAL_RCC_ClockConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000d74:	f000 f916 	bl	8000fa4 <Error_Handler>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3758      	adds	r7, #88	@ 0x58
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	@ (8000df8 <MX_SPI1_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000d8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d92:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d98:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000d9a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000d9e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000dae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000db2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000dce:	2207      	movs	r2, #7
 8000dd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000dda:	2208      	movs	r2, #8
 8000ddc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_SPI1_Init+0x74>)
 8000de0:	f002 fa44 	bl	800326c <HAL_SPI_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 f8db 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200000ac 	.word	0x200000ac
 8000df8:	40013000 	.word	0x40013000

08000dfc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e00:	4b14      	ldr	r3, [pc, #80]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e02:	4a15      	ldr	r2, [pc, #84]	@ (8000e58 <MX_USART1_UART_Init+0x5c>)
 8000e04:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e06:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e08:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e0c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e22:	220c      	movs	r2, #12
 8000e24:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e38:	4b06      	ldr	r3, [pc, #24]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_USART1_UART_Init+0x58>)
 8000e40:	f003 f940 	bl	80040c4 <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e4a:	f000 f8ab 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	20000110 	.word	0x20000110
 8000e58:	40013800 	.word	0x40013800

08000e5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e60:	4b14      	ldr	r3, [pc, #80]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e62:	4a15      	ldr	r2, [pc, #84]	@ (8000eb8 <MX_USART2_UART_Init+0x5c>)
 8000e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e66:	4b13      	ldr	r3, [pc, #76]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e82:	220c      	movs	r2, #12
 8000e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	@ (8000eb4 <MX_USART2_UART_Init+0x58>)
 8000ea0:	f003 f95e 	bl	8004160 <HAL_HalfDuplex_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eaa:	f000 f87b 	bl	8000fa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000198 	.word	0x20000198
 8000eb8:	40004400 	.word	0x40004400

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b088      	sub	sp, #32
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 030c 	add.w	r3, r7, #12
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	4b32      	ldr	r3, [pc, #200]	@ (8000f9c <MX_GPIO_Init+0xe0>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ed6:	4a31      	ldr	r2, [pc, #196]	@ (8000f9c <MX_GPIO_Init+0xe0>)
 8000ed8:	f043 0304 	orr.w	r3, r3, #4
 8000edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ede:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <MX_GPIO_Init+0xe0>)
 8000ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ee2:	f003 0304 	and.w	r3, r3, #4
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eea:	4b2c      	ldr	r3, [pc, #176]	@ (8000f9c <MX_GPIO_Init+0xe0>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eee:	4a2b      	ldr	r2, [pc, #172]	@ (8000f9c <MX_GPIO_Init+0xe0>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ef6:	4b29      	ldr	r3, [pc, #164]	@ (8000f9c <MX_GPIO_Init+0xe0>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	f003 0301 	and.w	r3, r3, #1
 8000efe:	607b      	str	r3, [r7, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b26      	ldr	r3, [pc, #152]	@ (8000f9c <MX_GPIO_Init+0xe0>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	4a25      	ldr	r2, [pc, #148]	@ (8000f9c <MX_GPIO_Init+0xe0>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0e:	4b23      	ldr	r3, [pc, #140]	@ (8000f9c <MX_GPIO_Init+0xe0>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TX_LED_Pin|RX_LED_Pin, GPIO_PIN_RESET);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	21c0      	movs	r1, #192	@ 0xc0
 8000f1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f22:	f001 f8f7 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFM_CS_Pin|RFM_RST_Pin, GPIO_PIN_RESET);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2181      	movs	r1, #129	@ 0x81
 8000f2a:	481d      	ldr	r0, [pc, #116]	@ (8000fa0 <MX_GPIO_Init+0xe4>)
 8000f2c:	f001 f8f2 	bl	8002114 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TX_LED_Pin RX_LED_Pin */
  GPIO_InitStruct.Pin = TX_LED_Pin|RX_LED_Pin;
 8000f30:	23c0      	movs	r3, #192	@ 0xc0
 8000f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f34:	2301      	movs	r3, #1
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	4619      	mov	r1, r3
 8000f46:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f4a:	f000 ff71 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : RFM_CS_Pin RFM_RST_Pin */
  GPIO_InitStruct.Pin = RFM_CS_Pin|RFM_RST_Pin;
 8000f4e:	2381      	movs	r3, #129	@ 0x81
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	4619      	mov	r1, r3
 8000f64:	480e      	ldr	r0, [pc, #56]	@ (8000fa0 <MX_GPIO_Init+0xe4>)
 8000f66:	f000 ff63 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFM_INT0_Pin */
  GPIO_InitStruct.Pin = RFM_INT0_Pin;
 8000f6a:	2340      	movs	r3, #64	@ 0x40
 8000f6c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RFM_INT0_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 030c 	add.w	r3, r7, #12
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4808      	ldr	r0, [pc, #32]	@ (8000fa0 <MX_GPIO_Init+0xe4>)
 8000f80:	f000 ff56 	bl	8001e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2017      	movs	r0, #23
 8000f8a:	f000 ff1a 	bl	8001dc2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f8e:	2017      	movs	r0, #23
 8000f90:	f000 ff33 	bl	8001dfa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f94:	bf00      	nop
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	48000400 	.word	0x48000400

08000fa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa8:	b672      	cpsid	i
}
 8000faa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <Error_Handler+0x8>

08000fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b083      	sub	sp, #12
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fce:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd2:	4a08      	ldr	r2, [pc, #32]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fd4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fda:	4b06      	ldr	r3, [pc, #24]	@ (8000ff4 <HAL_MspInit+0x44>)
 8000fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	603b      	str	r3, [r7, #0]
 8000fe4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a17      	ldr	r2, [pc, #92]	@ (8001074 <HAL_SPI_MspInit+0x7c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d127      	bne.n	800106a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800101a:	4b17      	ldr	r3, [pc, #92]	@ (8001078 <HAL_SPI_MspInit+0x80>)
 800101c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800101e:	4a16      	ldr	r2, [pc, #88]	@ (8001078 <HAL_SPI_MspInit+0x80>)
 8001020:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001024:	6613      	str	r3, [r2, #96]	@ 0x60
 8001026:	4b14      	ldr	r3, [pc, #80]	@ (8001078 <HAL_SPI_MspInit+0x80>)
 8001028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800102a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001032:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_SPI_MspInit+0x80>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001036:	4a10      	ldr	r2, [pc, #64]	@ (8001078 <HAL_SPI_MspInit+0x80>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800103e:	4b0e      	ldr	r3, [pc, #56]	@ (8001078 <HAL_SPI_MspInit+0x80>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800104a:	2338      	movs	r3, #56	@ 0x38
 800104c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	2303      	movs	r3, #3
 8001058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800105a:	2305      	movs	r3, #5
 800105c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0314 	add.w	r3, r7, #20
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	@ (800107c <HAL_SPI_MspInit+0x84>)
 8001066:	f000 fee3 	bl	8001e30 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	@ 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40013000 	.word	0x40013000
 8001078:	40021000 	.word	0x40021000
 800107c:	48000400 	.word	0x48000400

08001080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b098      	sub	sp, #96	@ 0x60
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001088:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001098:	f107 0318 	add.w	r3, r7, #24
 800109c:	2234      	movs	r2, #52	@ 0x34
 800109e:	2100      	movs	r1, #0
 80010a0:	4618      	mov	r0, r3
 80010a2:	f004 f943 	bl	800532c <memset>
  if(huart->Instance==USART1)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a47      	ldr	r2, [pc, #284]	@ (80011c8 <HAL_UART_MspInit+0x148>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d138      	bne.n	8001122 <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b8:	f107 0318 	add.w	r3, r7, #24
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 ff4f 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010c8:	f7ff ff6c 	bl	8000fa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010cc:	4b3f      	ldr	r3, [pc, #252]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 80010ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d0:	4a3e      	ldr	r2, [pc, #248]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 80010d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d6:	6613      	str	r3, [r2, #96]	@ 0x60
 80010d8:	4b3c      	ldr	r3, [pc, #240]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 80010da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e4:	4b39      	ldr	r3, [pc, #228]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 80010e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e8:	4a38      	ldr	r2, [pc, #224]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010f0:	4b36      	ldr	r3, [pc, #216]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 80010f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f4:	f003 0301 	and.w	r3, r3, #1
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010fc:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001100:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110a:	2303      	movs	r3, #3
 800110c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800110e:	2307      	movs	r3, #7
 8001110:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800111c:	f000 fe88 	bl	8001e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001120:	e04d      	b.n	80011be <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a2a      	ldr	r2, [pc, #168]	@ (80011d0 <HAL_UART_MspInit+0x150>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d148      	bne.n	80011be <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800112c:	2302      	movs	r3, #2
 800112e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001134:	f107 0318 	add.w	r3, r7, #24
 8001138:	4618      	mov	r0, r3
 800113a:	f001 ff11 	bl	8002f60 <HAL_RCCEx_PeriphCLKConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 8001144:	f7ff ff2e 	bl	8000fa4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001148:	4b20      	ldr	r3, [pc, #128]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 800114a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800114c:	4a1f      	ldr	r2, [pc, #124]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 800114e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001152:	6593      	str	r3, [r2, #88]	@ 0x58
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 8001156:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001158:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001160:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	4a19      	ldr	r2, [pc, #100]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 8001166:	f043 0301 	orr.w	r3, r3, #1
 800116a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116c:	4b17      	ldr	r3, [pc, #92]	@ (80011cc <HAL_UART_MspInit+0x14c>)
 800116e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001178:	2304      	movs	r3, #4
 800117a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117c:	2312      	movs	r3, #18
 800117e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001180:	2301      	movs	r3, #1
 8001182:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001188:	2307      	movs	r3, #7
 800118a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001190:	4619      	mov	r1, r3
 8001192:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001196:	f000 fe4b 	bl	8001e30 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800119a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800119e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a0:	2302      	movs	r3, #2
 80011a2:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a4:	2300      	movs	r3, #0
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80011ac:	2303      	movs	r3, #3
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ba:	f000 fe39 	bl	8001e30 <HAL_GPIO_Init>
}
 80011be:	bf00      	nop
 80011c0:	3760      	adds	r7, #96	@ 0x60
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40013800 	.word	0x40013800
 80011cc:	40021000 	.word	0x40021000
 80011d0:	40004400 	.word	0x40004400

080011d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d8:	bf00      	nop
 80011da:	e7fd      	b.n	80011d8 <NMI_Handler+0x4>

080011dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <HardFault_Handler+0x4>

080011e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <MemManage_Handler+0x4>

080011ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <BusFault_Handler+0x4>

080011f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <UsageFault_Handler+0x4>

080011fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800120a:	b480      	push	{r7}
 800120c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr

08001218 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800121c:	bf00      	nop
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr

08001226 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122a:	f000 fcab 	bl	8001b84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}

08001232 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RFM_INT0_Pin);
 8001236:	2040      	movs	r0, #64	@ 0x40
 8001238:	f000 ff84 	bl	8002144 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e00a      	b.n	8001268 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001252:	f3af 8000 	nop.w
 8001256:	4601      	mov	r1, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	b2ca      	uxtb	r2, r1
 8001260:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf0      	blt.n	8001252 <_read+0x12>
  }

  return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_close>:
  }
  return len;
}

int _close(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a2:	605a      	str	r2, [r3, #4]
  return 0;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_isatty>:

int _isatty(int file)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b083      	sub	sp, #12
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	60f8      	str	r0, [r7, #12]
 80012d0:	60b9      	str	r1, [r7, #8]
 80012d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b086      	sub	sp, #24
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ec:	4a14      	ldr	r2, [pc, #80]	@ (8001340 <_sbrk+0x5c>)
 80012ee:	4b15      	ldr	r3, [pc, #84]	@ (8001344 <_sbrk+0x60>)
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f8:	4b13      	ldr	r3, [pc, #76]	@ (8001348 <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d102      	bne.n	8001306 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001300:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <_sbrk+0x64>)
 8001302:	4a12      	ldr	r2, [pc, #72]	@ (800134c <_sbrk+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001306:	4b10      	ldr	r3, [pc, #64]	@ (8001348 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	429a      	cmp	r2, r3
 8001312:	d207      	bcs.n	8001324 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001314:	f004 f858 	bl	80053c8 <__errno>
 8001318:	4603      	mov	r3, r0
 800131a:	220c      	movs	r2, #12
 800131c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800131e:	f04f 33ff 	mov.w	r3, #4294967295
 8001322:	e009      	b.n	8001338 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <_sbrk+0x64>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800132a:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <_sbrk+0x64>)
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4413      	add	r3, r2
 8001332:	4a05      	ldr	r2, [pc, #20]	@ (8001348 <_sbrk+0x64>)
 8001334:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001336:	68fb      	ldr	r3, [r7, #12]
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20008000 	.word	0x20008000
 8001344:	00000400 	.word	0x00000400
 8001348:	20000220 	.word	0x20000220
 800134c:	20000390 	.word	0x20000390

08001350 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001354:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <SystemInit+0x20>)
 8001356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800135a:	4a05      	ldr	r2, [pc, #20]	@ (8001370 <SystemInit+0x20>)
 800135c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001360:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001374:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013ac <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001378:	f7ff ffea 	bl	8001350 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800137c:	480c      	ldr	r0, [pc, #48]	@ (80013b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800137e:	490d      	ldr	r1, [pc, #52]	@ (80013b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001380:	4a0d      	ldr	r2, [pc, #52]	@ (80013b8 <LoopForever+0xe>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001384:	e002      	b.n	800138c <LoopCopyDataInit>

08001386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800138a:	3304      	adds	r3, #4

0800138c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800138c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800138e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001390:	d3f9      	bcc.n	8001386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001392:	4a0a      	ldr	r2, [pc, #40]	@ (80013bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001394:	4c0a      	ldr	r4, [pc, #40]	@ (80013c0 <LoopForever+0x16>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001398:	e001      	b.n	800139e <LoopFillZerobss>

0800139a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800139a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800139c:	3204      	adds	r2, #4

0800139e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800139e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013a0:	d3fb      	bcc.n	800139a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013a2:	f004 f817 	bl	80053d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013a6:	f7ff fc19 	bl	8000bdc <main>

080013aa <LoopForever>:

LoopForever:
    b LoopForever
 80013aa:	e7fe      	b.n	80013aa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013ac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80013b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013b4:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80013b8:	08005dbc 	.word	0x08005dbc
  ldr r2, =_sbss
 80013bc:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80013c0:	2000038c 	.word	0x2000038c

080013c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013c4:	e7fe      	b.n	80013c4 <ADC1_2_IRQHandler>
	...

080013c8 <RF95_write>:
		{ 0x73,   0x74,    0x00}, // IH_Bw125Cr45Sf128 (the chip default + Implicit header)
};

HAL_StatusTypeDef err;
HAL_StatusTypeDef RF95_write(char reg, char wValue)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	460a      	mov	r2, r1
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	71bb      	strb	r3, [r7, #6]
	char buff[2]={0};
 80013d8:	2300      	movs	r3, #0
 80013da:	81bb      	strh	r3, [r7, #12]

	buff[0] = W | reg;
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	733b      	strb	r3, [r7, #12]
	buff[1] = wValue;
 80013e6:	79bb      	ldrb	r3, [r7, #6]
 80013e8:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2101      	movs	r1, #1
 80013ee:	480c      	ldr	r0, [pc, #48]	@ (8001420 <RF95_write+0x58>)
 80013f0:	f000 fe90 	bl	8002114 <HAL_GPIO_WritePin>
	err = HAL_SPI_Transmit(&hspi1, (uint8_t*)&buff, 2, 100);
 80013f4:	f107 010c 	add.w	r1, r7, #12
 80013f8:	2364      	movs	r3, #100	@ 0x64
 80013fa:	2202      	movs	r2, #2
 80013fc:	4809      	ldr	r0, [pc, #36]	@ (8001424 <RF95_write+0x5c>)
 80013fe:	f001 ffd8 	bl	80033b2 <HAL_SPI_Transmit>
 8001402:	4603      	mov	r3, r0
 8001404:	461a      	mov	r2, r3
 8001406:	4b08      	ldr	r3, [pc, #32]	@ (8001428 <RF95_write+0x60>)
 8001408:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2101      	movs	r1, #1
 800140e:	4804      	ldr	r0, [pc, #16]	@ (8001420 <RF95_write+0x58>)
 8001410:	f000 fe80 	bl	8002114 <HAL_GPIO_WritePin>

	return err;
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <RF95_write+0x60>)
 8001416:	781b      	ldrb	r3, [r3, #0]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	48000400 	.word	0x48000400
 8001424:	200000ac 	.word	0x200000ac
 8001428:	20000225 	.word	0x20000225

0800142c <RF95_read>:
	return err;
}


char RF95_read(char reg)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b084      	sub	sp, #16
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
	char buff = R & reg;
 8001436:	79fb      	ldrb	r3, [r7, #7]
 8001438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800143c:	b2db      	uxtb	r3, r3
 800143e:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	2101      	movs	r1, #1
 8001444:	480d      	ldr	r0, [pc, #52]	@ (800147c <RF95_read+0x50>)
 8001446:	f000 fe65 	bl	8002114 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)&buff, 1, 100);
 800144a:	f107 010f 	add.w	r1, r7, #15
 800144e:	2364      	movs	r3, #100	@ 0x64
 8001450:	2201      	movs	r2, #1
 8001452:	480b      	ldr	r0, [pc, #44]	@ (8001480 <RF95_read+0x54>)
 8001454:	f001 ffad 	bl	80033b2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, (uint8_t*)&buff, 1, 100);
 8001458:	f107 010f 	add.w	r1, r7, #15
 800145c:	2364      	movs	r3, #100	@ 0x64
 800145e:	2201      	movs	r2, #1
 8001460:	4807      	ldr	r0, [pc, #28]	@ (8001480 <RF95_read+0x54>)
 8001462:	f002 f91c 	bl	800369e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2101      	movs	r1, #1
 800146a:	4804      	ldr	r0, [pc, #16]	@ (800147c <RF95_read+0x50>)
 800146c:	f000 fe52 	bl	8002114 <HAL_GPIO_WritePin>

	return buff;
 8001470:	7bfb      	ldrb	r3, [r7, #15]
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	48000400 	.word	0x48000400
 8001480:	200000ac 	.word	0x200000ac

08001484 <RF95_read_burst>:


HAL_StatusTypeDef RF95_read_burst(char reg, char* buffer, int length)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	73fb      	strb	r3, [r7, #15]
	buffer[0] = R & reg;
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001498:	b2da      	uxtb	r2, r3
 800149a:	68bb      	ldr	r3, [r7, #8]
 800149c:	701a      	strb	r2, [r3, #0]
	HAL_StatusTypeDef err;

	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_RESET);
 800149e:	2200      	movs	r2, #0
 80014a0:	2101      	movs	r1, #1
 80014a2:	480e      	ldr	r0, [pc, #56]	@ (80014dc <RF95_read_burst+0x58>)
 80014a4:	f000 fe36 	bl	8002114 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buffer, 1, 100);
 80014a8:	2364      	movs	r3, #100	@ 0x64
 80014aa:	2201      	movs	r2, #1
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <RF95_read_burst+0x5c>)
 80014b0:	f001 ff7f 	bl	80033b2 <HAL_SPI_Transmit>
	err = HAL_SPI_Receive(&hspi1, (uint8_t*)buffer, length, 100);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	b29a      	uxth	r2, r3
 80014b8:	2364      	movs	r3, #100	@ 0x64
 80014ba:	68b9      	ldr	r1, [r7, #8]
 80014bc:	4808      	ldr	r0, [pc, #32]	@ (80014e0 <RF95_read_burst+0x5c>)
 80014be:	f002 f8ee 	bl	800369e <HAL_SPI_Receive>
 80014c2:	4603      	mov	r3, r0
 80014c4:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(RFM_CS_GPIO_Port, RFM_CS_Pin, GPIO_PIN_SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2101      	movs	r1, #1
 80014ca:	4804      	ldr	r0, [pc, #16]	@ (80014dc <RF95_read_burst+0x58>)
 80014cc:	f000 fe22 	bl	8002114 <HAL_GPIO_WritePin>

	return err;
 80014d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	48000400 	.word	0x48000400
 80014e0:	200000ac 	.word	0x200000ac

080014e4 <RF95_Reset>:


void RF95_Reset(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_RESET);
 80014e8:	2200      	movs	r2, #0
 80014ea:	2180      	movs	r1, #128	@ 0x80
 80014ec:	4806      	ldr	r0, [pc, #24]	@ (8001508 <RF95_Reset+0x24>)
 80014ee:	f000 fe11 	bl	8002114 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80014f2:	2014      	movs	r0, #20
 80014f4:	f000 fb66 	bl	8001bc4 <HAL_Delay>
	HAL_GPIO_WritePin(RFM_RST_GPIO_Port, RFM_RST_Pin, GPIO_PIN_SET);
 80014f8:	2201      	movs	r2, #1
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	4802      	ldr	r0, [pc, #8]	@ (8001508 <RF95_Reset+0x24>)
 80014fe:	f000 fe09 	bl	8002114 <HAL_GPIO_WritePin>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	48000400 	.word	0x48000400

0800150c <RF95_Init>:

uint8_t rbuff = 0;
bool RF95_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	RF95_Reset();
 8001510:	f7ff ffe8 	bl	80014e4 <RF95_Reset>

	// Set sleep mode, so we can also set LORA mode:
	RF95_sleep();
 8001514:	f000 f9fa 	bl	800190c <RF95_sleep>

    RF95_write(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE);
 8001518:	2180      	movs	r1, #128	@ 0x80
 800151a:	2001      	movs	r0, #1
 800151c:	f7ff ff54 	bl	80013c8 <RF95_write>
    HAL_Delay(20); // Wait for sleep mode to take over from say, CAD
 8001520:	2014      	movs	r0, #20
 8001522:	f000 fb4f 	bl	8001bc4 <HAL_Delay>

    // Check we are in sleep mode, with LORA set
		rbuff = RF95_read(RH_RF95_REG_01_OP_MODE);
 8001526:	2001      	movs	r0, #1
 8001528:	f7ff ff80 	bl	800142c <RF95_read>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <RF95_Init+0x6c>)
 8001532:	701a      	strb	r2, [r3, #0]
    if (rbuff != (RH_RF95_MODE_SLEEP | RH_RF95_LONG_RANGE_MODE))
 8001534:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <RF95_Init+0x6c>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b80      	cmp	r3, #128	@ 0x80
 800153a:	d001      	beq.n	8001540 <RF95_Init+0x34>
    {
        return false; // No device present?
 800153c:	2300      	movs	r3, #0
 800153e:	e018      	b.n	8001572 <RF95_Init+0x66>
    }

    // Set up FIFO
    // We configure so that we can use the entire 256 byte FIFO for either receive
    // or transmit, but not both at the same time
    RF95_write(RH_RF95_REG_0E_FIFO_TX_BASE_ADDR, 0);
 8001540:	2100      	movs	r1, #0
 8001542:	200e      	movs	r0, #14
 8001544:	f7ff ff40 	bl	80013c8 <RF95_write>
    RF95_write(RH_RF95_REG_0F_FIFO_RX_BASE_ADDR, 0);
 8001548:	2100      	movs	r1, #0
 800154a:	200f      	movs	r0, #15
 800154c:	f7ff ff3c 	bl	80013c8 <RF95_write>
    // Explicit Header Mode
    // payload is TO + FROM + ID + FLAGS + message data
    // RX mode is implmented with RXCONTINUOUS
    // max message data length is 255 - 4 = 251 octets

    RF95_setModeIdle();
 8001550:	f000 f9b2 	bl	80018b8 <RF95_setModeIdle>

    // Set up default configuration
    // No Sync Words in LORA mode.
    RF95_setModemConfig(Bw125Cr45Sf128); // Radio default
 8001554:	2000      	movs	r0, #0
 8001556:	f000 f813 	bl	8001580 <RF95_setModemConfig>
    RF95_setPreambleLength(8); // Default is 8
 800155a:	2008      	movs	r0, #8
 800155c:	f000 f840 	bl	80015e0 <RF95_setPreambleLength>
    // An innocuous ISM frequency, same as RF22's
    RF95_setFrequency(915.0);
 8001560:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 800157c <RF95_Init+0x70>
 8001564:	f000 f854 	bl	8001610 <RF95_setFrequency>
    // Lowish power
    RF95_setTxPower(13, false);
 8001568:	2100      	movs	r1, #0
 800156a:	200d      	movs	r0, #13
 800156c:	f000 f8a2 	bl	80016b4 <RF95_setTxPower>

    return true;
 8001570:	2301      	movs	r3, #1
}
 8001572:	4618      	mov	r0, r3
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000226 	.word	0x20000226
 800157c:	4464c000 	.word	0x4464c000

08001580 <RF95_setModemConfig>:


bool RF95_setModemConfig(ModemConfigChoice index)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
	RF95_write(RH_RF95_REG_1D_MODEM_CONFIG1, MODEM_CONFIG_TABLE[index][0]);
 800158a:	79fa      	ldrb	r2, [r7, #7]
 800158c:	4913      	ldr	r1, [pc, #76]	@ (80015dc <RF95_setModemConfig+0x5c>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	440b      	add	r3, r1
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	201d      	movs	r0, #29
 800159c:	f7ff ff14 	bl	80013c8 <RF95_write>
	RF95_write(RH_RF95_REG_1E_MODEM_CONFIG2, MODEM_CONFIG_TABLE[index][1]);
 80015a0:	79fa      	ldrb	r2, [r7, #7]
 80015a2:	490e      	ldr	r1, [pc, #56]	@ (80015dc <RF95_setModemConfig+0x5c>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	440b      	add	r3, r1
 80015ac:	3301      	adds	r3, #1
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	201e      	movs	r0, #30
 80015b4:	f7ff ff08 	bl	80013c8 <RF95_write>
	RF95_write(RH_RF95_REG_26_MODEM_CONFIG3, MODEM_CONFIG_TABLE[index][2]);
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	4908      	ldr	r1, [pc, #32]	@ (80015dc <RF95_setModemConfig+0x5c>)
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	3302      	adds	r3, #2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	4619      	mov	r1, r3
 80015ca:	2026      	movs	r0, #38	@ 0x26
 80015cc:	f7ff fefc 	bl	80013c8 <RF95_write>

    return true;
 80015d0:	2301      	movs	r3, #1
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000008 	.word	0x20000008

080015e0 <RF95_setPreambleLength>:


void RF95_setPreambleLength(uint16_t bytes)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	80fb      	strh	r3, [r7, #6]
    RF95_write(RH_RF95_REG_20_PREAMBLE_MSB, bytes >> 8);
 80015ea:	88fb      	ldrh	r3, [r7, #6]
 80015ec:	0a1b      	lsrs	r3, r3, #8
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4619      	mov	r1, r3
 80015f4:	2020      	movs	r0, #32
 80015f6:	f7ff fee7 	bl	80013c8 <RF95_write>
    RF95_write(RH_RF95_REG_21_PREAMBLE_LSB, bytes & 0xff);
 80015fa:	88fb      	ldrh	r3, [r7, #6]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	4619      	mov	r1, r3
 8001600:	2021      	movs	r0, #33	@ 0x21
 8001602:	f7ff fee1 	bl	80013c8 <RF95_write>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <RF95_setFrequency>:


bool RF95_setFrequency(float centre)
{
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	ed87 0a01 	vstr	s0, [r7, #4]
    // Frf = FRF / FSTEP
    uint64_t frf = (uint32_t)((uint32_t)centre * 1000000.0) / (uint32_t)RH_RF95_FSTEP;
 800161a:	edd7 7a01 	vldr	s15, [r7, #4]
 800161e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001622:	ee17 0a90 	vmov	r0, s15
 8001626:	f7ff f897 	bl	8000758 <__aeabi_ui2d>
 800162a:	a320      	add	r3, pc, #128	@ (adr r3, 80016ac <RF95_setFrequency+0x9c>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7fe fe26 	bl	8000280 <__aeabi_dmul>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4610      	mov	r0, r2
 800163a:	4619      	mov	r1, r3
 800163c:	f7ff f906 	bl	800084c <__aeabi_d2uiz>
 8001640:	4603      	mov	r3, r0
 8001642:	4a19      	ldr	r2, [pc, #100]	@ (80016a8 <RF95_setFrequency+0x98>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	091b      	lsrs	r3, r3, #4
 800164a:	2200      	movs	r2, #0
 800164c:	461c      	mov	r4, r3
 800164e:	4615      	mov	r5, r2
 8001650:	e9c7 4502 	strd	r4, r5, [r7, #8]
    RF95_write(RH_RF95_REG_06_FRF_MSB, (frf >> 16) & 0xff);
 8001654:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	0c02      	lsrs	r2, r0, #16
 8001662:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001666:	0c0b      	lsrs	r3, r1, #16
 8001668:	b2d3      	uxtb	r3, r2
 800166a:	4619      	mov	r1, r3
 800166c:	2006      	movs	r0, #6
 800166e:	f7ff feab 	bl	80013c8 <RF95_write>
    RF95_write(RH_RF95_REG_07_FRF_MID, (frf >> 8) & 0xff);
 8001672:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001676:	f04f 0200 	mov.w	r2, #0
 800167a:	f04f 0300 	mov.w	r3, #0
 800167e:	0a02      	lsrs	r2, r0, #8
 8001680:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001684:	0a0b      	lsrs	r3, r1, #8
 8001686:	b2d3      	uxtb	r3, r2
 8001688:	4619      	mov	r1, r3
 800168a:	2007      	movs	r0, #7
 800168c:	f7ff fe9c 	bl	80013c8 <RF95_write>
    RF95_write(RH_RF95_REG_08_FRF_LSB, frf & 0xff);
 8001690:	7a3b      	ldrb	r3, [r7, #8]
 8001692:	4619      	mov	r1, r3
 8001694:	2008      	movs	r0, #8
 8001696:	f7ff fe97 	bl	80013c8 <RF95_write>

    return true;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bdb0      	pop	{r4, r5, r7, pc}
 80016a4:	f3af 8000 	nop.w
 80016a8:	4325c53f 	.word	0x4325c53f
 80016ac:	00000000 	.word	0x00000000
 80016b0:	412e8480 	.word	0x412e8480

080016b4 <RF95_setTxPower>:


void RF95_setTxPower(int8_t power, bool useRFO)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	4603      	mov	r3, r0
 80016bc:	460a      	mov	r2, r1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	4613      	mov	r3, r2
 80016c2:	71bb      	strb	r3, [r7, #6]
    // Sigh, different behaviours depending on whther the module use PA_BOOST or the RFO pin
    // for the transmitter output
    if (useRFO)
 80016c4:	79bb      	ldrb	r3, [r7, #6]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d019      	beq.n	80016fe <RF95_setTxPower+0x4a>
    {
        if (power > 14)power = 14;
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b0e      	cmp	r3, #14
 80016d0:	dd01      	ble.n	80016d6 <RF95_setTxPower+0x22>
 80016d2:	230e      	movs	r3, #14
 80016d4:	71fb      	strb	r3, [r7, #7]
        if (power < -1)power = -1;
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016de:	da01      	bge.n	80016e4 <RF95_setTxPower+0x30>
 80016e0:	23ff      	movs	r3, #255	@ 0xff
 80016e2:	71fb      	strb	r3, [r7, #7]
        RF95_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_MAX_POWER | (power + 1));
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	3301      	adds	r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	b25b      	sxtb	r3, r3
 80016ec:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80016f0:	b25b      	sxtb	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	4619      	mov	r1, r3
 80016f6:	2009      	movs	r0, #9
 80016f8:	f7ff fe66 	bl	80013c8 <RF95_write>
        // The documentation is pretty confusing on this topic: PaSelect says the max power is 20dBm,
        // but OutputPower claims it would be 17dBm.
        // My measurements show 20dBm is correct
        RF95_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
    }
}
 80016fc:	e028      	b.n	8001750 <RF95_setTxPower+0x9c>
        if (power > 23)power = 23;
 80016fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001702:	2b17      	cmp	r3, #23
 8001704:	dd01      	ble.n	800170a <RF95_setTxPower+0x56>
 8001706:	2317      	movs	r3, #23
 8001708:	71fb      	strb	r3, [r7, #7]
        if (power < 5)power = 5;
 800170a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170e:	2b04      	cmp	r3, #4
 8001710:	dc01      	bgt.n	8001716 <RF95_setTxPower+0x62>
 8001712:	2305      	movs	r3, #5
 8001714:	71fb      	strb	r3, [r7, #7]
        if (power > 20)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b14      	cmp	r3, #20
 800171c:	dd08      	ble.n	8001730 <RF95_setTxPower+0x7c>
            RF95_write(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_ENABLE);
 800171e:	2107      	movs	r1, #7
 8001720:	204d      	movs	r0, #77	@ 0x4d
 8001722:	f7ff fe51 	bl	80013c8 <RF95_write>
            power -= 3;
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	3b03      	subs	r3, #3
 800172a:	b2db      	uxtb	r3, r3
 800172c:	71fb      	strb	r3, [r7, #7]
 800172e:	e003      	b.n	8001738 <RF95_setTxPower+0x84>
            RF95_write(RH_RF95_REG_4D_PA_DAC, RH_RF95_PA_DAC_DISABLE);
 8001730:	2104      	movs	r1, #4
 8001732:	204d      	movs	r0, #77	@ 0x4d
 8001734:	f7ff fe48 	bl	80013c8 <RF95_write>
        RF95_write(RH_RF95_REG_09_PA_CONFIG, RH_RF95_PA_SELECT | (power-5));
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	3b05      	subs	r3, #5
 800173c:	b2db      	uxtb	r3, r3
 800173e:	b25b      	sxtb	r3, r3
 8001740:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001744:	b25b      	sxtb	r3, r3
 8001746:	b2db      	uxtb	r3, r3
 8001748:	4619      	mov	r1, r3
 800174a:	2009      	movs	r0, #9
 800174c:	f7ff fe3c 	bl	80013c8 <RF95_write>
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <RF95_receive_Timeout>:
		return false;
}


bool RF95_receive_Timeout(uint8_t* buf, uint16_t timeout)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	460b      	mov	r3, r1
 8001762:	807b      	strh	r3, [r7, #2]
	int len = 0;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]

	if(_mode == RHModeRx)
 8001768:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <RF95_receive_Timeout+0x88>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d131      	bne.n	80017d4 <RF95_receive_Timeout+0x7c>
	{
		if(!RF95_available_Timeout(timeout))
 8001770:	887b      	ldrh	r3, [r7, #2]
 8001772:	4618      	mov	r0, r3
 8001774:	f000 f860 	bl	8001838 <RF95_available_Timeout>
 8001778:	4603      	mov	r3, r0
 800177a:	f083 0301 	eor.w	r3, r3, #1
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <RF95_receive_Timeout+0x30>
		{
			return false;
 8001784:	2300      	movs	r3, #0
 8001786:	e026      	b.n	80017d6 <RF95_receive_Timeout+0x7e>
		}

		if(RF95_Check_PayloadCRCError())
 8001788:	f000 f930 	bl	80019ec <RF95_Check_PayloadCRCError>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <RF95_receive_Timeout+0x3e>
			return false;
 8001792:	2300      	movs	r3, #0
 8001794:	e01f      	b.n	80017d6 <RF95_receive_Timeout+0x7e>


		len = RF95_read(RH_RF95_REG_13_RX_NB_BYTES);
 8001796:	2013      	movs	r0, #19
 8001798:	f7ff fe48 	bl	800142c <RF95_read>
 800179c:	4603      	mov	r3, r0
 800179e:	60fb      	str	r3, [r7, #12]

		// Reset the fifo read ptr to the beginning of the packet
		RF95_write(RH_RF95_REG_0D_FIFO_ADDR_PTR, RF95_read(RH_RF95_REG_10_FIFO_RX_CURRENT_ADDR));
 80017a0:	2010      	movs	r0, #16
 80017a2:	f7ff fe43 	bl	800142c <RF95_read>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4619      	mov	r1, r3
 80017aa:	200d      	movs	r0, #13
 80017ac:	f7ff fe0c 	bl	80013c8 <RF95_write>

		RF95_read_burst(RH_RF95_REG_00_FIFO, (char*)buf, len);
 80017b0:	68fa      	ldr	r2, [r7, #12]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff fe65 	bl	8001484 <RF95_read_burst>

		RF95_setModeIdle();
 80017ba:	f000 f87d 	bl	80018b8 <RF95_setModeIdle>

		RF95_Clear_IRQ();
 80017be:	f000 f963 	bl	8001a88 <RF95_Clear_IRQ>

		if(RF95_Check_PayloadCRCError())
 80017c2:	f000 f913 	bl	80019ec <RF95_Check_PayloadCRCError>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <RF95_receive_Timeout+0x78>
		{
			return false;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e002      	b.n	80017d6 <RF95_receive_Timeout+0x7e>
		}
		else
		{
			return true;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e000      	b.n	80017d6 <RF95_receive_Timeout+0x7e>
		}
	}
	else
		return false;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3710      	adds	r7, #16
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	20000224 	.word	0x20000224

080017e4 <RF95_waitCAD>:
    return true;
}


bool RF95_waitCAD(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
	if (!_cad_timeout)
 80017ea:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <RF95_waitCAD+0x50>)
 80017ec:	881b      	ldrh	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d101      	bne.n	80017f6 <RF95_waitCAD+0x12>
		return true;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e019      	b.n	800182a <RF95_waitCAD+0x46>
    // Sophisticated DCF function...
    // DCF : BackoffTime = random() x aSlotTime
    // 100 - 1000 ms
    // 10 sec timeout

	RF95_setModeCAD();
 80017f6:	f000 f849 	bl	800188c <RF95_setModeCAD>

    unsigned long t = HAL_GetTick();
 80017fa:	f000 f9d7 	bl	8001bac <HAL_GetTick>
 80017fe:	6078      	str	r0, [r7, #4]
    while (!RF95_Check_CADDone())
 8001800:	e00a      	b.n	8001818 <RF95_waitCAD+0x34>
    {
      if (HAL_GetTick() - t > _cad_timeout)
 8001802:	f000 f9d3 	bl	8001bac <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	4a09      	ldr	r2, [pc, #36]	@ (8001834 <RF95_waitCAD+0x50>)
 800180e:	8812      	ldrh	r2, [r2, #0]
 8001810:	4293      	cmp	r3, r2
 8001812:	d901      	bls.n	8001818 <RF95_waitCAD+0x34>
	     return false;
 8001814:	2300      	movs	r3, #0
 8001816:	e008      	b.n	800182a <RF95_waitCAD+0x46>
    while (!RF95_Check_CADDone())
 8001818:	f000 f91c 	bl	8001a54 <RF95_Check_CADDone>
 800181c:	4603      	mov	r3, r0
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1ec      	bne.n	8001802 <RF95_waitCAD+0x1e>
    }

    return true;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	20000004 	.word	0x20000004

08001838 <RF95_available_Timeout>:
		return false;
}


bool RF95_available_Timeout(uint16_t timeout)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	unsigned long t = HAL_GetTick();
 8001842:	f000 f9b3 	bl	8001bac <HAL_GetTick>
 8001846:	60f8      	str	r0, [r7, #12]

	while(!RF95_Check_RxDone())
 8001848:	e009      	b.n	800185e <RF95_available_Timeout+0x26>
	{
		if (HAL_GetTick() - t > timeout)
 800184a:	f000 f9af 	bl	8001bac <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	1ad2      	subs	r2, r2, r3
 8001854:	88fb      	ldrh	r3, [r7, #6]
 8001856:	429a      	cmp	r2, r3
 8001858:	d901      	bls.n	800185e <RF95_available_Timeout+0x26>
			return false;
 800185a:	2300      	movs	r3, #0
 800185c:	e011      	b.n	8001882 <RF95_available_Timeout+0x4a>
	while(!RF95_Check_RxDone())
 800185e:	f000 f8ab 	bl	80019b8 <RF95_Check_RxDone>
 8001862:	4603      	mov	r3, r0
 8001864:	f083 0301 	eor.w	r3, r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	2b00      	cmp	r3, #0
 800186c:	d1ed      	bne.n	800184a <RF95_available_Timeout+0x12>
	}

	if(RF95_Check_ValidHeader())
 800186e:	f000 f8d7 	bl	8001a20 <RF95_Check_ValidHeader>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <RF95_available_Timeout+0x48>
	{
			RF95_Clear_IRQ();
 8001878:	f000 f906 	bl	8001a88 <RF95_Clear_IRQ>
			return true;
 800187c:	2301      	movs	r3, #1
 800187e:	e000      	b.n	8001882 <RF95_available_Timeout+0x4a>
	}
	else
		return false;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <RF95_setModeCAD>:


void RF95_setModeCAD(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
	if (_mode != RHModeCad)
 8001890:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <RF95_setModeCAD+0x28>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	2b05      	cmp	r3, #5
 8001896:	d00a      	beq.n	80018ae <RF95_setModeCAD+0x22>
	{
			RF95_write(RH_RF95_REG_01_OP_MODE, RH_RF95_MODE_CAD);
 8001898:	2107      	movs	r1, #7
 800189a:	2001      	movs	r0, #1
 800189c:	f7ff fd94 	bl	80013c8 <RF95_write>
			RF95_write(RH_RF95_REG_40_DIO_MAPPING1, 0x80); // Interrupt on CadDone
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	2040      	movs	r0, #64	@ 0x40
 80018a4:	f7ff fd90 	bl	80013c8 <RF95_write>
			_mode = RHModeCad;
 80018a8:	4b02      	ldr	r3, [pc, #8]	@ (80018b4 <RF95_setModeCAD+0x28>)
 80018aa:	2205      	movs	r2, #5
 80018ac:	701a      	strb	r2, [r3, #0]
	}
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000224 	.word	0x20000224

080018b8 <RF95_setModeIdle>:

uint8_t aux = 0;
void RF95_setModeIdle(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
//	uint8_t aux = 0;
    if (_mode != RHModeIdle)
 80018bc:	4b11      	ldr	r3, [pc, #68]	@ (8001904 <RF95_setModeIdle+0x4c>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d01d      	beq.n	8001900 <RF95_setModeIdle+0x48>
    {
				aux = RF95_read(RH_RF95_REG_01_OP_MODE);
 80018c4:	2001      	movs	r0, #1
 80018c6:	f7ff fdb1 	bl	800142c <RF95_read>
 80018ca:	4603      	mov	r3, r0
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <RF95_setModeIdle+0x50>)
 80018d0:	701a      	strb	r2, [r3, #0]
				aux &= 0xF8;
 80018d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001908 <RF95_setModeIdle+0x50>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	f023 0307 	bic.w	r3, r3, #7
 80018da:	b2da      	uxtb	r2, r3
 80018dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001908 <RF95_setModeIdle+0x50>)
 80018de:	701a      	strb	r2, [r3, #0]
				aux |= RH_RF95_MODE_STDBY;
 80018e0:	4b09      	ldr	r3, [pc, #36]	@ (8001908 <RF95_setModeIdle+0x50>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b07      	ldr	r3, [pc, #28]	@ (8001908 <RF95_setModeIdle+0x50>)
 80018ec:	701a      	strb	r2, [r3, #0]
        RF95_write(RH_RF95_REG_01_OP_MODE, aux);
 80018ee:	4b06      	ldr	r3, [pc, #24]	@ (8001908 <RF95_setModeIdle+0x50>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4619      	mov	r1, r3
 80018f4:	2001      	movs	r0, #1
 80018f6:	f7ff fd67 	bl	80013c8 <RF95_write>
        _mode = RHModeIdle;
 80018fa:	4b02      	ldr	r3, [pc, #8]	@ (8001904 <RF95_setModeIdle+0x4c>)
 80018fc:	2202      	movs	r2, #2
 80018fe:	701a      	strb	r2, [r3, #0]
    }
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000224 	.word	0x20000224
 8001908:	20000227 	.word	0x20000227

0800190c <RF95_sleep>:


bool RF95_sleep(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
//	uint8_t aux = 0;
    if (_mode != RHModeSleep)
 8001910:	4b10      	ldr	r3, [pc, #64]	@ (8001954 <RF95_sleep+0x48>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d01a      	beq.n	800194e <RF95_sleep+0x42>
    {
				aux = RF95_read(RH_RF95_REG_01_OP_MODE);
 8001918:	2001      	movs	r0, #1
 800191a:	f7ff fd87 	bl	800142c <RF95_read>
 800191e:	4603      	mov	r3, r0
 8001920:	461a      	mov	r2, r3
 8001922:	4b0d      	ldr	r3, [pc, #52]	@ (8001958 <RF95_sleep+0x4c>)
 8001924:	701a      	strb	r2, [r3, #0]
				aux &= 0xF8;
 8001926:	4b0c      	ldr	r3, [pc, #48]	@ (8001958 <RF95_sleep+0x4c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	f023 0307 	bic.w	r3, r3, #7
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b09      	ldr	r3, [pc, #36]	@ (8001958 <RF95_sleep+0x4c>)
 8001932:	701a      	strb	r2, [r3, #0]
				aux |= RH_RF95_MODE_SLEEP;
 8001934:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <RF95_sleep+0x4c>)
 8001936:	781a      	ldrb	r2, [r3, #0]
 8001938:	4b07      	ldr	r3, [pc, #28]	@ (8001958 <RF95_sleep+0x4c>)
 800193a:	701a      	strb	r2, [r3, #0]
        RF95_write(RH_RF95_REG_01_OP_MODE, aux);
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <RF95_sleep+0x4c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	2001      	movs	r0, #1
 8001944:	f7ff fd40 	bl	80013c8 <RF95_write>
        _mode = RHModeSleep;
 8001948:	4b02      	ldr	r3, [pc, #8]	@ (8001954 <RF95_sleep+0x48>)
 800194a:	2201      	movs	r2, #1
 800194c:	701a      	strb	r2, [r3, #0]
    }
    return true;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000224 	.word	0x20000224
 8001958:	20000227 	.word	0x20000227

0800195c <RF95_setModeRx_Continuous>:
    }
}


void RF95_setModeRx_Continuous(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
//	uint8_t aux = 0;
    if (_mode != RHModeRx)
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <RF95_setModeRx_Continuous+0x54>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b04      	cmp	r3, #4
 8001966:	d021      	beq.n	80019ac <RF95_setModeRx_Continuous+0x50>
    {
				aux = RF95_read(RH_RF95_REG_01_OP_MODE);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff fd5f 	bl	800142c <RF95_read>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <RF95_setModeRx_Continuous+0x58>)
 8001974:	701a      	strb	r2, [r3, #0]
				aux &= 0xF8;
 8001976:	4b0f      	ldr	r3, [pc, #60]	@ (80019b4 <RF95_setModeRx_Continuous+0x58>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	f023 0307 	bic.w	r3, r3, #7
 800197e:	b2da      	uxtb	r2, r3
 8001980:	4b0c      	ldr	r3, [pc, #48]	@ (80019b4 <RF95_setModeRx_Continuous+0x58>)
 8001982:	701a      	strb	r2, [r3, #0]
				aux |= RH_RF95_MODE_RXCONTINUOUS;
 8001984:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <RF95_setModeRx_Continuous+0x58>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	f043 0305 	orr.w	r3, r3, #5
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <RF95_setModeRx_Continuous+0x58>)
 8001990:	701a      	strb	r2, [r3, #0]
        RF95_write(RH_RF95_REG_01_OP_MODE, aux);
 8001992:	4b08      	ldr	r3, [pc, #32]	@ (80019b4 <RF95_setModeRx_Continuous+0x58>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	4619      	mov	r1, r3
 8001998:	2001      	movs	r0, #1
 800199a:	f7ff fd15 	bl	80013c8 <RF95_write>
        RF95_write(RH_RF95_REG_40_DIO_MAPPING1, 0x00); // Interrupt on RxDone
 800199e:	2100      	movs	r1, #0
 80019a0:	2040      	movs	r0, #64	@ 0x40
 80019a2:	f7ff fd11 	bl	80013c8 <RF95_write>
        _mode = RHModeRx;
 80019a6:	4b02      	ldr	r3, [pc, #8]	@ (80019b0 <RF95_setModeRx_Continuous+0x54>)
 80019a8:	2204      	movs	r2, #4
 80019aa:	701a      	strb	r2, [r3, #0]
    }
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000224 	.word	0x20000224
 80019b4:	20000227 	.word	0x20000227

080019b8 <RF95_Check_RxDone>:
	return reg_read;
}


bool RF95_Check_RxDone(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	char reg_read = 0;
 80019be:	2300      	movs	r3, #0
 80019c0:	71fb      	strb	r3, [r7, #7]
	reg_read = RF95_read(RH_RF95_REG_12_IRQ_FLAGS);
 80019c2:	2012      	movs	r0, #18
 80019c4:	f7ff fd32 	bl	800142c <RF95_read>
 80019c8:	4603      	mov	r3, r0
 80019ca:	71fb      	strb	r3, [r7, #7]
	reg_read = (reg_read & RH_RF95_RX_DONE) >> 6;
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	119b      	asrs	r3, r3, #6
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	71fb      	strb	r3, [r7, #7]

	return reg_read;
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	bf14      	ite	ne
 80019de:	2301      	movne	r3, #1
 80019e0:	2300      	moveq	r3, #0
 80019e2:	b2db      	uxtb	r3, r3
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3708      	adds	r7, #8
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <RF95_Check_PayloadCRCError>:


bool RF95_Check_PayloadCRCError(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
	char reg_read = 0;
 80019f2:	2300      	movs	r3, #0
 80019f4:	71fb      	strb	r3, [r7, #7]
	reg_read = RF95_read(RH_RF95_REG_12_IRQ_FLAGS);
 80019f6:	2012      	movs	r0, #18
 80019f8:	f7ff fd18 	bl	800142c <RF95_read>
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
	reg_read = (reg_read & RH_RF95_PAYLOAD_CRC_ERROR) >> 5;
 8001a00:	79fb      	ldrb	r3, [r7, #7]
 8001a02:	115b      	asrs	r3, r3, #5
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	71fb      	strb	r3, [r7, #7]

	return reg_read;
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	bf14      	ite	ne
 8001a12:	2301      	movne	r3, #1
 8001a14:	2300      	moveq	r3, #0
 8001a16:	b2db      	uxtb	r3, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <RF95_Check_ValidHeader>:


bool RF95_Check_ValidHeader(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
	char reg_read = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	71fb      	strb	r3, [r7, #7]
	reg_read = RF95_read(RH_RF95_REG_12_IRQ_FLAGS);
 8001a2a:	2012      	movs	r0, #18
 8001a2c:	f7ff fcfe 	bl	800142c <RF95_read>
 8001a30:	4603      	mov	r3, r0
 8001a32:	71fb      	strb	r3, [r7, #7]

	reg_read = (reg_read & RH_RF95_VALID_HEADER) >> 4;
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	111b      	asrs	r3, r3, #4
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	71fb      	strb	r3, [r7, #7]

	return reg_read;
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf14      	ite	ne
 8001a46:	2301      	movne	r3, #1
 8001a48:	2300      	moveq	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <RF95_Check_CADDone>:
	return reg_read;
}


bool RF95_Check_CADDone(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
	char reg_read = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	71fb      	strb	r3, [r7, #7]
	reg_read = RF95_read(RH_RF95_REG_12_IRQ_FLAGS);
 8001a5e:	2012      	movs	r0, #18
 8001a60:	f7ff fce4 	bl	800142c <RF95_read>
 8001a64:	4603      	mov	r3, r0
 8001a66:	71fb      	strb	r3, [r7, #7]
	reg_read = (reg_read & RH_RF95_CAD_DONE) >> 2;
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	109b      	asrs	r3, r3, #2
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	71fb      	strb	r3, [r7, #7]

	return reg_read;
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf14      	ite	ne
 8001a7a:	2301      	movne	r3, #1
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <RF95_Clear_IRQ>:
	return reg_read;
}


void RF95_Clear_IRQ(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
	uint8_t irq_flags = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	71fb      	strb	r3, [r7, #7]

	RF95_write(RH_RF95_REG_12_IRQ_FLAGS, 0xFF);
 8001a92:	21ff      	movs	r1, #255	@ 0xff
 8001a94:	2012      	movs	r0, #18
 8001a96:	f7ff fc97 	bl	80013c8 <RF95_write>

	irq_flags = RF95_read(RH_RF95_REG_12_IRQ_FLAGS);
 8001a9a:	2012      	movs	r0, #18
 8001a9c:	f7ff fcc6 	bl	800142c <RF95_read>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
	if(irq_flags != 0)
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <RF95_Clear_IRQ+0x2a>
		RF95_write(RH_RF95_REG_12_IRQ_FLAGS, 0xFF);
 8001aaa:	21ff      	movs	r1, #255	@ 0xff
 8001aac:	2012      	movs	r0, #18
 8001aae:	f7ff fc8b 	bl	80013c8 <RF95_write>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <Clear_Buffer>:
 * 		+ 'X' -> to say something has gone wrong or to stop
 * 	All of them are followed with the name of the node, which is only a number.
 */

void Clear_Buffer(uint8_t* buffer)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
	memset(buffer, 0, strlen((const char *)buffer));
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f7fe fb84 	bl	80001d0 <strlen>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	461a      	mov	r2, r3
 8001acc:	2100      	movs	r1, #0
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f003 fc2c 	bl	800532c <memset>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f000 f960 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001aec:	2000      	movs	r0, #0
 8001aee:	f000 f80d 	bl	8001b0c <HAL_InitTick>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d002      	beq.n	8001afe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	e001      	b.n	8001b02 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001afe:	f7ff fa57 	bl	8000fb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b02:	79fb      	ldrb	r3, [r7, #7]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b18:	4b17      	ldr	r3, [pc, #92]	@ (8001b78 <HAL_InitTick+0x6c>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d023      	beq.n	8001b68 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b20:	4b16      	ldr	r3, [pc, #88]	@ (8001b7c <HAL_InitTick+0x70>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b14      	ldr	r3, [pc, #80]	@ (8001b78 <HAL_InitTick+0x6c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b36:	4618      	mov	r0, r3
 8001b38:	f000 f96d 	bl	8001e16 <HAL_SYSTICK_Config>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2b0f      	cmp	r3, #15
 8001b46:	d809      	bhi.n	8001b5c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b48:	2200      	movs	r2, #0
 8001b4a:	6879      	ldr	r1, [r7, #4]
 8001b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b50:	f000 f937 	bl	8001dc2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <HAL_InitTick+0x74>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	e007      	b.n	8001b6c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e004      	b.n	8001b6c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
 8001b66:	e001      	b.n	8001b6c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	2000001c 	.word	0x2000001c
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	20000018 	.word	0x20000018

08001b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b88:	4b06      	ldr	r3, [pc, #24]	@ (8001ba4 <HAL_IncTick+0x20>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b06      	ldr	r3, [pc, #24]	@ (8001ba8 <HAL_IncTick+0x24>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4413      	add	r3, r2
 8001b94:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <HAL_IncTick+0x24>)
 8001b96:	6013      	str	r3, [r2, #0]
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	2000001c 	.word	0x2000001c
 8001ba8:	20000228 	.word	0x20000228

08001bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  return uwTick;
 8001bb0:	4b03      	ldr	r3, [pc, #12]	@ (8001bc0 <HAL_GetTick+0x14>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000228 	.word	0x20000228

08001bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bcc:	f7ff ffee 	bl	8001bac <HAL_GetTick>
 8001bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bdc:	d005      	beq.n	8001bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001bde:	4b0a      	ldr	r3, [pc, #40]	@ (8001c08 <HAL_Delay+0x44>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4413      	add	r3, r2
 8001be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001bea:	bf00      	nop
 8001bec:	f7ff ffde 	bl	8001bac <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d8f7      	bhi.n	8001bec <HAL_Delay+0x28>
  {
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	2000001c 	.word	0x2000001c

08001c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f003 0307 	and.w	r3, r3, #7
 8001c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c22:	68ba      	ldr	r2, [r7, #8]
 8001c24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c3e:	4a04      	ldr	r2, [pc, #16]	@ (8001c50 <__NVIC_SetPriorityGrouping+0x44>)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	60d3      	str	r3, [r2, #12]
}
 8001c44:	bf00      	nop
 8001c46:	3714      	adds	r7, #20
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c58:	4b04      	ldr	r3, [pc, #16]	@ (8001c6c <__NVIC_GetPriorityGrouping+0x18>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	0a1b      	lsrs	r3, r3, #8
 8001c5e:	f003 0307 	and.w	r3, r3, #7
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	db0b      	blt.n	8001c9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	f003 021f 	and.w	r2, r3, #31
 8001c88:	4907      	ldr	r1, [pc, #28]	@ (8001ca8 <__NVIC_EnableIRQ+0x38>)
 8001c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8e:	095b      	lsrs	r3, r3, #5
 8001c90:	2001      	movs	r0, #1
 8001c92:	fa00 f202 	lsl.w	r2, r0, r2
 8001c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000e100 	.word	0xe000e100

08001cac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	6039      	str	r1, [r7, #0]
 8001cb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	db0a      	blt.n	8001cd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	490c      	ldr	r1, [pc, #48]	@ (8001cf8 <__NVIC_SetPriority+0x4c>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	0112      	lsls	r2, r2, #4
 8001ccc:	b2d2      	uxtb	r2, r2
 8001cce:	440b      	add	r3, r1
 8001cd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd4:	e00a      	b.n	8001cec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4908      	ldr	r1, [pc, #32]	@ (8001cfc <__NVIC_SetPriority+0x50>)
 8001cdc:	79fb      	ldrb	r3, [r7, #7]
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	3b04      	subs	r3, #4
 8001ce4:	0112      	lsls	r2, r2, #4
 8001ce6:	b2d2      	uxtb	r2, r2
 8001ce8:	440b      	add	r3, r1
 8001cea:	761a      	strb	r2, [r3, #24]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000e100 	.word	0xe000e100
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b089      	sub	sp, #36	@ 0x24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f1c3 0307 	rsb	r3, r3, #7
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	bf28      	it	cs
 8001d1e:	2304      	movcs	r3, #4
 8001d20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	3304      	adds	r3, #4
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d902      	bls.n	8001d30 <NVIC_EncodePriority+0x30>
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3b03      	subs	r3, #3
 8001d2e:	e000      	b.n	8001d32 <NVIC_EncodePriority+0x32>
 8001d30:	2300      	movs	r3, #0
 8001d32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	f04f 32ff 	mov.w	r2, #4294967295
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	401a      	ands	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	43d9      	mvns	r1, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d58:	4313      	orrs	r3, r2
         );
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3724      	adds	r7, #36	@ 0x24
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff8e 	bl	8001cac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	@ (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff29 	bl	8001c0c <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff3e 	bl	8001c54 <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff8e 	bl	8001d00 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5d 	bl	8001cac <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff31 	bl	8001c70 <__NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffa2 	bl	8001d68 <SysTick_Config>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b087      	sub	sp, #28
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e3e:	e14e      	b.n	80020de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	2101      	movs	r1, #1
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	fa01 f303 	lsl.w	r3, r1, r3
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f000 8140 	beq.w	80020d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d005      	beq.n	8001e70 <HAL_GPIO_Init+0x40>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d130      	bne.n	8001ed2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	091b      	lsrs	r3, r3, #4
 8001ebc:	f003 0201 	and.w	r2, r3, #1
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b03      	cmp	r3, #3
 8001edc:	d017      	beq.n	8001f0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	2203      	movs	r2, #3
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	689a      	ldr	r2, [r3, #8]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d123      	bne.n	8001f62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	08da      	lsrs	r2, r3, #3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3208      	adds	r2, #8
 8001f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	220f      	movs	r2, #15
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	691a      	ldr	r2, [r3, #16]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	08da      	lsrs	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3208      	adds	r2, #8
 8001f5c:	6939      	ldr	r1, [r7, #16]
 8001f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	2203      	movs	r2, #3
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	43db      	mvns	r3, r3
 8001f74:	693a      	ldr	r2, [r7, #16]
 8001f76:	4013      	ands	r3, r2
 8001f78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 0203 	and.w	r2, r3, #3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	693a      	ldr	r2, [r7, #16]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 809a 	beq.w	80020d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa4:	4b55      	ldr	r3, [pc, #340]	@ (80020fc <HAL_GPIO_Init+0x2cc>)
 8001fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fa8:	4a54      	ldr	r2, [pc, #336]	@ (80020fc <HAL_GPIO_Init+0x2cc>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6613      	str	r3, [r2, #96]	@ 0x60
 8001fb0:	4b52      	ldr	r3, [pc, #328]	@ (80020fc <HAL_GPIO_Init+0x2cc>)
 8001fb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001fbc:	4a50      	ldr	r2, [pc, #320]	@ (8002100 <HAL_GPIO_Init+0x2d0>)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	089b      	lsrs	r3, r3, #2
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	220f      	movs	r2, #15
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001fe6:	d013      	beq.n	8002010 <HAL_GPIO_Init+0x1e0>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a46      	ldr	r2, [pc, #280]	@ (8002104 <HAL_GPIO_Init+0x2d4>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00d      	beq.n	800200c <HAL_GPIO_Init+0x1dc>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a45      	ldr	r2, [pc, #276]	@ (8002108 <HAL_GPIO_Init+0x2d8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <HAL_GPIO_Init+0x1d8>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a44      	ldr	r2, [pc, #272]	@ (800210c <HAL_GPIO_Init+0x2dc>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d101      	bne.n	8002004 <HAL_GPIO_Init+0x1d4>
 8002000:	2303      	movs	r3, #3
 8002002:	e006      	b.n	8002012 <HAL_GPIO_Init+0x1e2>
 8002004:	2307      	movs	r3, #7
 8002006:	e004      	b.n	8002012 <HAL_GPIO_Init+0x1e2>
 8002008:	2302      	movs	r3, #2
 800200a:	e002      	b.n	8002012 <HAL_GPIO_Init+0x1e2>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_GPIO_Init+0x1e2>
 8002010:	2300      	movs	r3, #0
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	f002 0203 	and.w	r2, r2, #3
 8002018:	0092      	lsls	r2, r2, #2
 800201a:	4093      	lsls	r3, r2
 800201c:	693a      	ldr	r2, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002022:	4937      	ldr	r1, [pc, #220]	@ (8002100 <HAL_GPIO_Init+0x2d0>)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	693a      	ldr	r2, [r7, #16]
 800202c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002030:	4b37      	ldr	r3, [pc, #220]	@ (8002110 <HAL_GPIO_Init+0x2e0>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	43db      	mvns	r3, r3
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	4013      	ands	r3, r2
 800203e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4313      	orrs	r3, r2
 8002052:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002054:	4a2e      	ldr	r2, [pc, #184]	@ (8002110 <HAL_GPIO_Init+0x2e0>)
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800205a:	4b2d      	ldr	r3, [pc, #180]	@ (8002110 <HAL_GPIO_Init+0x2e0>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	43db      	mvns	r3, r3
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	4013      	ands	r3, r2
 8002068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800207e:	4a24      	ldr	r2, [pc, #144]	@ (8002110 <HAL_GPIO_Init+0x2e0>)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002084:	4b22      	ldr	r3, [pc, #136]	@ (8002110 <HAL_GPIO_Init+0x2e0>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	43db      	mvns	r3, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4013      	ands	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020a8:	4a19      	ldr	r2, [pc, #100]	@ (8002110 <HAL_GPIO_Init+0x2e0>)
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <HAL_GPIO_Init+0x2e0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	43db      	mvns	r3, r3
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4013      	ands	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002110 <HAL_GPIO_Init+0x2e0>)
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	3301      	adds	r3, #1
 80020dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f47f aea9 	bne.w	8001e40 <HAL_GPIO_Init+0x10>
  }
}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	371c      	adds	r7, #28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	40021000 	.word	0x40021000
 8002100:	40010000 	.word	0x40010000
 8002104:	48000400 	.word	0x48000400
 8002108:	48000800 	.word	0x48000800
 800210c:	48000c00 	.word	0x48000c00
 8002110:	40010400 	.word	0x40010400

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002130:	e002      	b.n	8002138 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002132:	887a      	ldrh	r2, [r7, #2]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002138:	bf00      	nop
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800214e:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	4013      	ands	r3, r2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d006      	beq.n	8002168 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800215a:	4a05      	ldr	r2, [pc, #20]	@ (8002170 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002160:	88fb      	ldrh	r3, [r7, #6]
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f806 	bl	8002174 <HAL_GPIO_EXTI_Callback>
  }
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40010400 	.word	0x40010400

08002174 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	4603      	mov	r3, r0
 800217c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
	...

0800218c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002190:	4b04      	ldr	r3, [pc, #16]	@ (80021a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40007000 	.word	0x40007000

080021a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b085      	sub	sp, #20
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021b6:	d130      	bne.n	800221a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80021b8:	4b23      	ldr	r3, [pc, #140]	@ (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80021c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021c4:	d038      	beq.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80021c6:	4b20      	ldr	r3, [pc, #128]	@ (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80021ce:	4a1e      	ldr	r2, [pc, #120]	@ (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80021d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80021d6:	4b1d      	ldr	r3, [pc, #116]	@ (800224c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2232      	movs	r2, #50	@ 0x32
 80021dc:	fb02 f303 	mul.w	r3, r2, r3
 80021e0:	4a1b      	ldr	r2, [pc, #108]	@ (8002250 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	0c9b      	lsrs	r3, r3, #18
 80021e8:	3301      	adds	r3, #1
 80021ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ec:	e002      	b.n	80021f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	3b01      	subs	r3, #1
 80021f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021f4:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002200:	d102      	bne.n	8002208 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1f2      	bne.n	80021ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002208:	4b0f      	ldr	r3, [pc, #60]	@ (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002210:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002214:	d110      	bne.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002216:	2303      	movs	r3, #3
 8002218:	e00f      	b.n	800223a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800221a:	4b0b      	ldr	r3, [pc, #44]	@ (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002222:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002226:	d007      	beq.n	8002238 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002228:	4b07      	ldr	r3, [pc, #28]	@ (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002230:	4a05      	ldr	r2, [pc, #20]	@ (8002248 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002232:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002236:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40007000 	.word	0x40007000
 800224c:	20000000 	.word	0x20000000
 8002250:	431bde83 	.word	0x431bde83

08002254 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b08a      	sub	sp, #40	@ 0x28
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d102      	bne.n	8002268 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	f000 bc4f 	b.w	8002b06 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002268:	4b97      	ldr	r3, [pc, #604]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f003 030c 	and.w	r3, r3, #12
 8002270:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002272:	4b95      	ldr	r3, [pc, #596]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 80e6 	beq.w	8002456 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d007      	beq.n	80022a0 <HAL_RCC_OscConfig+0x4c>
 8002290:	6a3b      	ldr	r3, [r7, #32]
 8002292:	2b0c      	cmp	r3, #12
 8002294:	f040 808d 	bne.w	80023b2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	2b01      	cmp	r3, #1
 800229c:	f040 8089 	bne.w	80023b2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022a0:	4b89      	ldr	r3, [pc, #548]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d006      	beq.n	80022ba <HAL_RCC_OscConfig+0x66>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f000 bc26 	b.w	8002b06 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80022be:	4b82      	ldr	r3, [pc, #520]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <HAL_RCC_OscConfig+0x80>
 80022ca:	4b7f      	ldr	r3, [pc, #508]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022d2:	e005      	b.n	80022e0 <HAL_RCC_OscConfig+0x8c>
 80022d4:	4b7c      	ldr	r3, [pc, #496]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80022d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022da:	091b      	lsrs	r3, r3, #4
 80022dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d224      	bcs.n	800232e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fdd9 	bl	8002ea0 <RCC_SetFlashLatencyFromMSIRange>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d002      	beq.n	80022fa <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	f000 bc06 	b.w	8002b06 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022fa:	4b73      	ldr	r3, [pc, #460]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a72      	ldr	r2, [pc, #456]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	6013      	str	r3, [r2, #0]
 8002306:	4b70      	ldr	r3, [pc, #448]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	496d      	ldr	r1, [pc, #436]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002318:	4b6b      	ldr	r3, [pc, #428]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	4968      	ldr	r1, [pc, #416]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002328:	4313      	orrs	r3, r2
 800232a:	604b      	str	r3, [r1, #4]
 800232c:	e025      	b.n	800237a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800232e:	4b66      	ldr	r3, [pc, #408]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a65      	ldr	r2, [pc, #404]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b63      	ldr	r3, [pc, #396]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002346:	4960      	ldr	r1, [pc, #384]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800234c:	4b5e      	ldr	r3, [pc, #376]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	495b      	ldr	r1, [pc, #364]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 800235c:	4313      	orrs	r3, r2
 800235e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002360:	6a3b      	ldr	r3, [r7, #32]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d109      	bne.n	800237a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fd98 	bl	8002ea0 <RCC_SetFlashLatencyFromMSIRange>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e3c5      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800237a:	f000 fccd 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 800237e:	4602      	mov	r2, r0
 8002380:	4b51      	ldr	r3, [pc, #324]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	f003 030f 	and.w	r3, r3, #15
 800238a:	4950      	ldr	r1, [pc, #320]	@ (80024cc <HAL_RCC_OscConfig+0x278>)
 800238c:	5ccb      	ldrb	r3, [r1, r3]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	fa22 f303 	lsr.w	r3, r2, r3
 8002396:	4a4e      	ldr	r2, [pc, #312]	@ (80024d0 <HAL_RCC_OscConfig+0x27c>)
 8002398:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800239a:	4b4e      	ldr	r3, [pc, #312]	@ (80024d4 <HAL_RCC_OscConfig+0x280>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff fbb4 	bl	8001b0c <HAL_InitTick>
 80023a4:	4603      	mov	r3, r0
 80023a6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80023a8:	7dfb      	ldrb	r3, [r7, #23]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d052      	beq.n	8002454 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	e3a9      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d032      	beq.n	8002420 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80023ba:	4b43      	ldr	r3, [pc, #268]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a42      	ldr	r2, [pc, #264]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023c6:	f7ff fbf1 	bl	8001bac <HAL_GetTick>
 80023ca:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ce:	f7ff fbed 	bl	8001bac <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e392      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023e0:	4b39      	ldr	r3, [pc, #228]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023ec:	4b36      	ldr	r3, [pc, #216]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a35      	ldr	r2, [pc, #212]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80023f2:	f043 0308 	orr.w	r3, r3, #8
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b33      	ldr	r3, [pc, #204]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	4930      	ldr	r1, [pc, #192]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002406:	4313      	orrs	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800240a:	4b2f      	ldr	r3, [pc, #188]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	492b      	ldr	r1, [pc, #172]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 800241a:	4313      	orrs	r3, r2
 800241c:	604b      	str	r3, [r1, #4]
 800241e:	e01a      	b.n	8002456 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002420:	4b29      	ldr	r3, [pc, #164]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a28      	ldr	r2, [pc, #160]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002426:	f023 0301 	bic.w	r3, r3, #1
 800242a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800242c:	f7ff fbbe 	bl	8001bac <HAL_GetTick>
 8002430:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002434:	f7ff fbba 	bl	8001bac <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e35f      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002446:	4b20      	ldr	r3, [pc, #128]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x1e0>
 8002452:	e000      	b.n	8002456 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002454:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d073      	beq.n	800254a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002462:	6a3b      	ldr	r3, [r7, #32]
 8002464:	2b08      	cmp	r3, #8
 8002466:	d005      	beq.n	8002474 <HAL_RCC_OscConfig+0x220>
 8002468:	6a3b      	ldr	r3, [r7, #32]
 800246a:	2b0c      	cmp	r3, #12
 800246c:	d10e      	bne.n	800248c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	2b03      	cmp	r3, #3
 8002472:	d10b      	bne.n	800248c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002474:	4b14      	ldr	r3, [pc, #80]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d063      	beq.n	8002548 <HAL_RCC_OscConfig+0x2f4>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d15f      	bne.n	8002548 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e33c      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002494:	d106      	bne.n	80024a4 <HAL_RCC_OscConfig+0x250>
 8002496:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a0b      	ldr	r2, [pc, #44]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 800249c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a0:	6013      	str	r3, [r2, #0]
 80024a2:	e025      	b.n	80024f0 <HAL_RCC_OscConfig+0x29c>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ac:	d114      	bne.n	80024d8 <HAL_RCC_OscConfig+0x284>
 80024ae:	4b06      	ldr	r3, [pc, #24]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a05      	ldr	r2, [pc, #20]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80024b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b03      	ldr	r3, [pc, #12]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a02      	ldr	r2, [pc, #8]	@ (80024c8 <HAL_RCC_OscConfig+0x274>)
 80024c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c4:	6013      	str	r3, [r2, #0]
 80024c6:	e013      	b.n	80024f0 <HAL_RCC_OscConfig+0x29c>
 80024c8:	40021000 	.word	0x40021000
 80024cc:	08005d30 	.word	0x08005d30
 80024d0:	20000000 	.word	0x20000000
 80024d4:	20000018 	.word	0x20000018
 80024d8:	4b8f      	ldr	r3, [pc, #572]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a8e      	ldr	r2, [pc, #568]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80024de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e2:	6013      	str	r3, [r2, #0]
 80024e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a8b      	ldr	r2, [pc, #556]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80024ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d013      	beq.n	8002520 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7ff fb58 	bl	8001bac <HAL_GetTick>
 80024fc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002500:	f7ff fb54 	bl	8001bac <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b64      	cmp	r3, #100	@ 0x64
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e2f9      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002512:	4b81      	ldr	r3, [pc, #516]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x2ac>
 800251e:	e014      	b.n	800254a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002520:	f7ff fb44 	bl	8001bac <HAL_GetTick>
 8002524:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002526:	e008      	b.n	800253a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002528:	f7ff fb40 	bl	8001bac <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	2b64      	cmp	r3, #100	@ 0x64
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e2e5      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800253a:	4b77      	ldr	r3, [pc, #476]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1f0      	bne.n	8002528 <HAL_RCC_OscConfig+0x2d4>
 8002546:	e000      	b.n	800254a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002548:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	2b00      	cmp	r3, #0
 8002554:	d060      	beq.n	8002618 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d005      	beq.n	8002568 <HAL_RCC_OscConfig+0x314>
 800255c:	6a3b      	ldr	r3, [r7, #32]
 800255e:	2b0c      	cmp	r3, #12
 8002560:	d119      	bne.n	8002596 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d116      	bne.n	8002596 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002568:	4b6b      	ldr	r3, [pc, #428]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002570:	2b00      	cmp	r3, #0
 8002572:	d005      	beq.n	8002580 <HAL_RCC_OscConfig+0x32c>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e2c2      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	4b65      	ldr	r3, [pc, #404]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	061b      	lsls	r3, r3, #24
 800258e:	4962      	ldr	r1, [pc, #392]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002594:	e040      	b.n	8002618 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d023      	beq.n	80025e6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800259e:	4b5e      	ldr	r3, [pc, #376]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a5d      	ldr	r2, [pc, #372]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7ff faff 	bl	8001bac <HAL_GetTick>
 80025ae:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7ff fafb 	bl	8001bac <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e2a0      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025c4:	4b54      	ldr	r3, [pc, #336]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d0f0      	beq.n	80025b2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025d0:	4b51      	ldr	r3, [pc, #324]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	691b      	ldr	r3, [r3, #16]
 80025dc:	061b      	lsls	r3, r3, #24
 80025de:	494e      	ldr	r1, [pc, #312]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
 80025e4:	e018      	b.n	8002618 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a4b      	ldr	r2, [pc, #300]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80025f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f2:	f7ff fadb 	bl	8001bac <HAL_GetTick>
 80025f6:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025f8:	e008      	b.n	800260c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025fa:	f7ff fad7 	bl	8001bac <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d901      	bls.n	800260c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	e27c      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800260c:	4b42      	ldr	r3, [pc, #264]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1f0      	bne.n	80025fa <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 8082 	beq.w	800272a <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d05f      	beq.n	80026ee <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800262e:	4b3a      	ldr	r3, [pc, #232]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002634:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	f003 0310 	and.w	r3, r3, #16
 8002640:	429a      	cmp	r2, r3
 8002642:	d037      	beq.n	80026b4 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002654:	2b00      	cmp	r3, #0
 8002656:	d101      	bne.n	800265c <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e254      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0301 	and.w	r3, r3, #1
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01b      	beq.n	800269e <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8002666:	4b2c      	ldr	r3, [pc, #176]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002668:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266c:	4a2a      	ldr	r2, [pc, #168]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	f023 0301 	bic.w	r3, r3, #1
 8002672:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002676:	f7ff fa99 	bl	8001bac <HAL_GetTick>
 800267a:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800267e:	f7ff fa95 	bl	8001bac <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b11      	cmp	r3, #17
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e23a      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002690:	4b21      	ldr	r3, [pc, #132]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 8002692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002696:	f003 0302 	and.w	r3, r3, #2
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1ef      	bne.n	800267e <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 800269e:	4b1e      	ldr	r3, [pc, #120]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026a4:	f023 0210 	bic.w	r2, r3, #16
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	491a      	ldr	r1, [pc, #104]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b4:	4b18      	ldr	r3, [pc, #96]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ba:	4a17      	ldr	r2, [pc, #92]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7ff fa72 	bl	8001bac <HAL_GetTick>
 80026c8:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ca:	e008      	b.n	80026de <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026cc:	f7ff fa6e 	bl	8001bac <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b11      	cmp	r3, #17
 80026d8:	d901      	bls.n	80026de <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	e213      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026de:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80026e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <HAL_RCC_OscConfig+0x478>
 80026ec:	e01d      	b.n	800272a <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f4:	4a08      	ldr	r2, [pc, #32]	@ (8002718 <HAL_RCC_OscConfig+0x4c4>)
 80026f6:	f023 0301 	bic.w	r3, r3, #1
 80026fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fe:	f7ff fa55 	bl	8001bac <HAL_GetTick>
 8002702:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002706:	f7ff fa51 	bl	8001bac <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b11      	cmp	r3, #17
 8002712:	d903      	bls.n	800271c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1f6      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
 8002718:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800271c:	4ba9      	ldr	r3, [pc, #676]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 800271e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1ed      	bne.n	8002706 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80bd 	beq.w	80028b2 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002738:	2300      	movs	r3, #0
 800273a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800273e:	4ba1      	ldr	r3, [pc, #644]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002742:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d10e      	bne.n	8002768 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274a:	4b9e      	ldr	r3, [pc, #632]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800274e:	4a9d      	ldr	r2, [pc, #628]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002750:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002754:	6593      	str	r3, [r2, #88]	@ 0x58
 8002756:	4b9b      	ldr	r3, [pc, #620]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800275a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002762:	2301      	movs	r3, #1
 8002764:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002768:	4b97      	ldr	r3, [pc, #604]	@ (80029c8 <HAL_RCC_OscConfig+0x774>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d118      	bne.n	80027a6 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002774:	4b94      	ldr	r3, [pc, #592]	@ (80029c8 <HAL_RCC_OscConfig+0x774>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a93      	ldr	r2, [pc, #588]	@ (80029c8 <HAL_RCC_OscConfig+0x774>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002780:	f7ff fa14 	bl	8001bac <HAL_GetTick>
 8002784:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7ff fa10 	bl	8001bac <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1b5      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279a:	4b8b      	ldr	r3, [pc, #556]	@ (80029c8 <HAL_RCC_OscConfig+0x774>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d02c      	beq.n	800280c <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80027b2:	4b84      	ldr	r3, [pc, #528]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027b8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027c4:	497f      	ldr	r1, [pc, #508]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	f003 0304 	and.w	r3, r3, #4
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d010      	beq.n	80027fa <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80027d8:	4b7a      	ldr	r3, [pc, #488]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80027da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027de:	4a79      	ldr	r2, [pc, #484]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80027e0:	f043 0304 	orr.w	r3, r3, #4
 80027e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027e8:	4b76      	ldr	r3, [pc, #472]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ee:	4a75      	ldr	r2, [pc, #468]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f8:	e018      	b.n	800282c <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027fa:	4b72      	ldr	r3, [pc, #456]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80027fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002800:	4a70      	ldr	r2, [pc, #448]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002802:	f043 0301 	orr.w	r3, r3, #1
 8002806:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800280a:	e00f      	b.n	800282c <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800280c:	4b6d      	ldr	r3, [pc, #436]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002812:	4a6c      	ldr	r2, [pc, #432]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800281c:	4b69      	ldr	r3, [pc, #420]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 800281e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002822:	4a68      	ldr	r2, [pc, #416]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d016      	beq.n	8002862 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002834:	f7ff f9ba 	bl	8001bac <HAL_GetTick>
 8002838:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7ff f9b6 	bl	8001bac <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	69bb      	ldr	r3, [r7, #24]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e159      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002852:	4b5c      	ldr	r3, [pc, #368]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ed      	beq.n	800283c <HAL_RCC_OscConfig+0x5e8>
 8002860:	e01d      	b.n	800289e <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7ff f9a3 	bl	8001bac <HAL_GetTick>
 8002866:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7ff f99f 	bl	8001bac <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e142      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002880:	4b50      	ldr	r3, [pc, #320]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b00      	cmp	r3, #0
 800288c:	d1ed      	bne.n	800286a <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800288e:	4b4d      	ldr	r3, [pc, #308]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002894:	4a4b      	ldr	r2, [pc, #300]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002896:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800289a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800289e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d105      	bne.n	80028b2 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028a6:	4b47      	ldr	r3, [pc, #284]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80028a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028aa:	4a46      	ldr	r2, [pc, #280]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80028ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0320 	and.w	r3, r3, #32
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d03c      	beq.n	8002938 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d01c      	beq.n	8002900 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028c6:	4b3f      	ldr	r3, [pc, #252]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80028c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028cc:	4a3d      	ldr	r2, [pc, #244]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d6:	f7ff f969 	bl	8001bac <HAL_GetTick>
 80028da:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028dc:	e008      	b.n	80028f0 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028de:	f7ff f965 	bl	8001bac <HAL_GetTick>
 80028e2:	4602      	mov	r2, r0
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	1ad3      	subs	r3, r2, r3
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d901      	bls.n	80028f0 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e10a      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028f0:	4b34      	ldr	r3, [pc, #208]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80028f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0ef      	beq.n	80028de <HAL_RCC_OscConfig+0x68a>
 80028fe:	e01b      	b.n	8002938 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002900:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002902:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002906:	4a2f      	ldr	r2, [pc, #188]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002910:	f7ff f94c 	bl	8001bac <HAL_GetTick>
 8002914:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002916:	e008      	b.n	800292a <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002918:	f7ff f948 	bl	8001bac <HAL_GetTick>
 800291c:	4602      	mov	r2, r0
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	2b02      	cmp	r3, #2
 8002924:	d901      	bls.n	800292a <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e0ed      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800292a:	4b26      	ldr	r3, [pc, #152]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 800292c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1ef      	bne.n	8002918 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80e1 	beq.w	8002b04 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	2b02      	cmp	r3, #2
 8002948:	f040 80b5 	bne.w	8002ab6 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800294c:	4b1d      	ldr	r3, [pc, #116]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0203 	and.w	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295c:	429a      	cmp	r2, r3
 800295e:	d124      	bne.n	80029aa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296a:	3b01      	subs	r3, #1
 800296c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d11b      	bne.n	80029aa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800297c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d113      	bne.n	80029aa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	3b01      	subs	r3, #1
 8002990:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d109      	bne.n	80029aa <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	3b01      	subs	r3, #1
 80029a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d05f      	beq.n	8002a6a <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029aa:	6a3b      	ldr	r3, [r7, #32]
 80029ac:	2b0c      	cmp	r3, #12
 80029ae:	d05a      	beq.n	8002a66 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029b0:	4b04      	ldr	r3, [pc, #16]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a03      	ldr	r2, [pc, #12]	@ (80029c4 <HAL_RCC_OscConfig+0x770>)
 80029b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029ba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029bc:	f7ff f8f6 	bl	8001bac <HAL_GetTick>
 80029c0:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029c2:	e00c      	b.n	80029de <HAL_RCC_OscConfig+0x78a>
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029cc:	f7ff f8ee 	bl	8001bac <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e093      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029de:	4b4c      	ldr	r3, [pc, #304]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029ea:	4b49      	ldr	r3, [pc, #292]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 80029ec:	68da      	ldr	r2, [r3, #12]
 80029ee:	4b49      	ldr	r3, [pc, #292]	@ (8002b14 <HAL_RCC_OscConfig+0x8c0>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029fa:	3a01      	subs	r2, #1
 80029fc:	0112      	lsls	r2, r2, #4
 80029fe:	4311      	orrs	r1, r2
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a04:	0212      	lsls	r2, r2, #8
 8002a06:	4311      	orrs	r1, r2
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a0c:	0852      	lsrs	r2, r2, #1
 8002a0e:	3a01      	subs	r2, #1
 8002a10:	0552      	lsls	r2, r2, #21
 8002a12:	4311      	orrs	r1, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002a18:	0852      	lsrs	r2, r2, #1
 8002a1a:	3a01      	subs	r2, #1
 8002a1c:	0652      	lsls	r2, r2, #25
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	493b      	ldr	r1, [pc, #236]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a26:	4b3a      	ldr	r3, [pc, #232]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a39      	ldr	r2, [pc, #228]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a2c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a30:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a32:	4b37      	ldr	r3, [pc, #220]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	4a36      	ldr	r2, [pc, #216]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a3c:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a3e:	f7ff f8b5 	bl	8001bac <HAL_GetTick>
 8002a42:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a44:	e008      	b.n	8002a58 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a46:	f7ff f8b1 	bl	8001bac <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b02      	cmp	r3, #2
 8002a52:	d901      	bls.n	8002a58 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002a54:	2303      	movs	r3, #3
 8002a56:	e056      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a58:	4b2d      	ldr	r3, [pc, #180]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d0f0      	beq.n	8002a46 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a64:	e04e      	b.n	8002b04 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e04d      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6a:	4b29      	ldr	r3, [pc, #164]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d146      	bne.n	8002b04 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a76:	4b26      	ldr	r3, [pc, #152]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a25      	ldr	r2, [pc, #148]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a80:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a82:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	4a22      	ldr	r2, [pc, #136]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002a88:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a8c:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a8e:	f7ff f88d 	bl	8001bac <HAL_GetTick>
 8002a92:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a94:	e008      	b.n	8002aa8 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a96:	f7ff f889 	bl	8001bac <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d901      	bls.n	8002aa8 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	e02e      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0f0      	beq.n	8002a96 <HAL_RCC_OscConfig+0x842>
 8002ab4:	e026      	b.n	8002b04 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	2b0c      	cmp	r3, #12
 8002aba:	d021      	beq.n	8002b00 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a13      	ldr	r2, [pc, #76]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7ff f870 	bl	8001bac <HAL_GetTick>
 8002acc:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7ff f86c 	bl	8001bac <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e011      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002aee:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	4a07      	ldr	r2, [pc, #28]	@ (8002b10 <HAL_RCC_OscConfig+0x8bc>)
 8002af4:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8002af8:	f023 0303 	bic.w	r3, r3, #3
 8002afc:	60d3      	str	r3, [r2, #12]
 8002afe:	e001      	b.n	8002b04 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3728      	adds	r7, #40	@ 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
 8002b14:	f99f808c 	.word	0xf99f808c

08002b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e0e7      	b.n	8002cfc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b75      	ldr	r3, [pc, #468]	@ (8002d04 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d910      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b72      	ldr	r3, [pc, #456]	@ (8002d04 <HAL_RCC_ClockConfig+0x1ec>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0207 	bic.w	r2, r3, #7
 8002b42:	4970      	ldr	r1, [pc, #448]	@ (8002d04 <HAL_RCC_ClockConfig+0x1ec>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d04 <HAL_RCC_ClockConfig+0x1ec>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e0cf      	b.n	8002cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d010      	beq.n	8002b8a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	4b66      	ldr	r3, [pc, #408]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d908      	bls.n	8002b8a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b78:	4b63      	ldr	r3, [pc, #396]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	4960      	ldr	r1, [pc, #384]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d04c      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b9e:	4b5a      	ldr	r3, [pc, #360]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d121      	bne.n	8002bee <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e0a6      	b.n	8002cfc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d107      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb6:	4b54      	ldr	r3, [pc, #336]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d115      	bne.n	8002bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e09a      	b.n	8002cfc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bce:	4b4e      	ldr	r3, [pc, #312]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e08e      	b.n	8002cfc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bde:	4b4a      	ldr	r3, [pc, #296]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e086      	b.n	8002cfc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b46      	ldr	r3, [pc, #280]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4943      	ldr	r1, [pc, #268]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c00:	f7fe ffd4 	bl	8001bac <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7fe ffd0 	bl	8001bac <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e06e      	b.n	8002cfc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d010      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	4b31      	ldr	r3, [pc, #196]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d208      	bcs.n	8002c5e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b2e      	ldr	r3, [pc, #184]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	492b      	ldr	r1, [pc, #172]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5e:	4b29      	ldr	r3, [pc, #164]	@ (8002d04 <HAL_RCC_ClockConfig+0x1ec>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d210      	bcs.n	8002c8e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6c:	4b25      	ldr	r3, [pc, #148]	@ (8002d04 <HAL_RCC_ClockConfig+0x1ec>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f023 0207 	bic.w	r2, r3, #7
 8002c74:	4923      	ldr	r1, [pc, #140]	@ (8002d04 <HAL_RCC_ClockConfig+0x1ec>)
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7c:	4b21      	ldr	r3, [pc, #132]	@ (8002d04 <HAL_RCC_ClockConfig+0x1ec>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d001      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e036      	b.n	8002cfc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0304 	and.w	r3, r3, #4
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d008      	beq.n	8002cac <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4918      	ldr	r1, [pc, #96]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0308 	and.w	r3, r3, #8
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cb8:	4b13      	ldr	r3, [pc, #76]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	691b      	ldr	r3, [r3, #16]
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4910      	ldr	r1, [pc, #64]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ccc:	f000 f824 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d08 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 030f 	and.w	r3, r3, #15
 8002cdc:	490b      	ldr	r1, [pc, #44]	@ (8002d0c <HAL_RCC_ClockConfig+0x1f4>)
 8002cde:	5ccb      	ldrb	r3, [r1, r3]
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce8:	4a09      	ldr	r2, [pc, #36]	@ (8002d10 <HAL_RCC_ClockConfig+0x1f8>)
 8002cea:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002cec:	4b09      	ldr	r3, [pc, #36]	@ (8002d14 <HAL_RCC_ClockConfig+0x1fc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe ff0b 	bl	8001b0c <HAL_InitTick>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	72fb      	strb	r3, [r7, #11]

  return status;
 8002cfa:	7afb      	ldrb	r3, [r7, #11]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40022000 	.word	0x40022000
 8002d08:	40021000 	.word	0x40021000
 8002d0c:	08005d30 	.word	0x08005d30
 8002d10:	20000000 	.word	0x20000000
 8002d14:	20000018 	.word	0x20000018

08002d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b089      	sub	sp, #36	@ 0x24
 8002d1c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
 8002d22:	2300      	movs	r3, #0
 8002d24:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d26:	4b3e      	ldr	r3, [pc, #248]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 030c 	and.w	r3, r3, #12
 8002d2e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d30:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_RCC_GetSysClockFreq+0x34>
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b0c      	cmp	r3, #12
 8002d44:	d121      	bne.n	8002d8a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d11e      	bne.n	8002d8a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d4c:	4b34      	ldr	r3, [pc, #208]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 0308 	and.w	r3, r3, #8
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d107      	bne.n	8002d68 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d58:	4b31      	ldr	r3, [pc, #196]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	61fb      	str	r3, [r7, #28]
 8002d66:	e005      	b.n	8002d74 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d68:	4b2d      	ldr	r3, [pc, #180]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d74:	4a2b      	ldr	r2, [pc, #172]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10d      	bne.n	8002da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d102      	bne.n	8002d96 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d90:	4b25      	ldr	r3, [pc, #148]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e004      	b.n	8002da0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	2b08      	cmp	r3, #8
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d9c:	4b23      	ldr	r3, [pc, #140]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d9e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d134      	bne.n	8002e10 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002da6:	4b1e      	ldr	r3, [pc, #120]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d003      	beq.n	8002dbe <HAL_RCC_GetSysClockFreq+0xa6>
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	2b03      	cmp	r3, #3
 8002dba:	d003      	beq.n	8002dc4 <HAL_RCC_GetSysClockFreq+0xac>
 8002dbc:	e005      	b.n	8002dca <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc0:	617b      	str	r3, [r7, #20]
      break;
 8002dc2:	e005      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002dc4:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0x114>)
 8002dc6:	617b      	str	r3, [r7, #20]
      break;
 8002dc8:	e002      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	617b      	str	r3, [r7, #20]
      break;
 8002dce:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dd0:	4b13      	ldr	r3, [pc, #76]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	091b      	lsrs	r3, r3, #4
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	3301      	adds	r3, #1
 8002ddc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dde:	4b10      	ldr	r3, [pc, #64]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	0a1b      	lsrs	r3, r3, #8
 8002de4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	fb03 f202 	mul.w	r2, r3, r2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002df6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x108>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	0e5b      	lsrs	r3, r3, #25
 8002dfc:	f003 0303 	and.w	r3, r3, #3
 8002e00:	3301      	adds	r3, #1
 8002e02:	005b      	lsls	r3, r3, #1
 8002e04:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e06:	697a      	ldr	r2, [r7, #20]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e10:	69bb      	ldr	r3, [r7, #24]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	@ 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	40021000 	.word	0x40021000
 8002e24:	08005d48 	.word	0x08005d48
 8002e28:	00f42400 	.word	0x00f42400
 8002e2c:	007a1200 	.word	0x007a1200

08002e30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e34:	4b03      	ldr	r3, [pc, #12]	@ (8002e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e36:	681b      	ldr	r3, [r3, #0]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000000 	.word	0x20000000

08002e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e4c:	f7ff fff0 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e50:	4602      	mov	r2, r0
 8002e52:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	4904      	ldr	r1, [pc, #16]	@ (8002e70 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e5e:	5ccb      	ldrb	r3, [r1, r3]
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	08005d40 	.word	0x08005d40

08002e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e78:	f7ff ffda 	bl	8002e30 <HAL_RCC_GetHCLKFreq>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	0adb      	lsrs	r3, r3, #11
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	4904      	ldr	r1, [pc, #16]	@ (8002e9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e8a:	5ccb      	ldrb	r3, [r1, r3]
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	08005d40 	.word	0x08005d40

08002ea0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002eac:	4b2a      	ldr	r3, [pc, #168]	@ (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d003      	beq.n	8002ec0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002eb8:	f7ff f968 	bl	800218c <HAL_PWREx_GetVoltageRange>
 8002ebc:	6178      	str	r0, [r7, #20]
 8002ebe:	e014      	b.n	8002eea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec0:	4b25      	ldr	r3, [pc, #148]	@ (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ec4:	4a24      	ldr	r2, [pc, #144]	@ (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ec6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002eca:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ecc:	4b22      	ldr	r3, [pc, #136]	@ (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed4:	60fb      	str	r3, [r7, #12]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ed8:	f7ff f958 	bl	800218c <HAL_PWREx_GetVoltageRange>
 8002edc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ede:	4b1e      	ldr	r3, [pc, #120]	@ (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ee2:	4a1d      	ldr	r2, [pc, #116]	@ (8002f58 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ee8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ef0:	d10b      	bne.n	8002f0a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2b80      	cmp	r3, #128	@ 0x80
 8002ef6:	d919      	bls.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2ba0      	cmp	r3, #160	@ 0xa0
 8002efc:	d902      	bls.n	8002f04 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002efe:	2302      	movs	r3, #2
 8002f00:	613b      	str	r3, [r7, #16]
 8002f02:	e013      	b.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f04:	2301      	movs	r3, #1
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	e010      	b.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2b80      	cmp	r3, #128	@ 0x80
 8002f0e:	d902      	bls.n	8002f16 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f10:	2303      	movs	r3, #3
 8002f12:	613b      	str	r3, [r7, #16]
 8002f14:	e00a      	b.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b80      	cmp	r3, #128	@ 0x80
 8002f1a:	d102      	bne.n	8002f22 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	e004      	b.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2b70      	cmp	r3, #112	@ 0x70
 8002f26:	d101      	bne.n	8002f2c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f28:	2301      	movs	r3, #1
 8002f2a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f023 0207 	bic.w	r2, r3, #7
 8002f34:	4909      	ldr	r1, [pc, #36]	@ (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f3c:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d001      	beq.n	8002f4e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	40022000 	.word	0x40022000

08002f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f68:	2300      	movs	r3, #0
 8002f6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f000 809e 	beq.w	80030ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f82:	4b46      	ldr	r3, [pc, #280]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e000      	b.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002f92:	2300      	movs	r3, #0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00d      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f98:	4b40      	ldr	r3, [pc, #256]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f9c:	4a3f      	ldr	r2, [pc, #252]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fa2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fa4:	4b3d      	ldr	r3, [pc, #244]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fac:	60bb      	str	r3, [r7, #8]
 8002fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a39      	ldr	r2, [pc, #228]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002fc0:	f7fe fdf4 	bl	8001bac <HAL_GetTick>
 8002fc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fc6:	e009      	b.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc8:	f7fe fdf0 	bl	8001bac <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d902      	bls.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	74fb      	strb	r3, [r7, #19]
        break;
 8002fda:	e005      	b.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fdc:	4b30      	ldr	r3, [pc, #192]	@ (80030a0 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d0ef      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d15a      	bne.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fee:	4b2b      	ldr	r3, [pc, #172]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ff8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d01e      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	429a      	cmp	r2, r3
 8003008:	d019      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800300a:	4b24      	ldr	r3, [pc, #144]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800300c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003010:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003014:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003016:	4b21      	ldr	r3, [pc, #132]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800301c:	4a1f      	ldr	r2, [pc, #124]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800301e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003022:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003026:	4b1d      	ldr	r3, [pc, #116]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800302c:	4a1b      	ldr	r2, [pc, #108]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800302e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003032:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003036:	4a19      	ldr	r2, [pc, #100]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	f003 0301 	and.w	r3, r3, #1
 8003044:	2b00      	cmp	r3, #0
 8003046:	d016      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003048:	f7fe fdb0 	bl	8001bac <HAL_GetTick>
 800304c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800304e:	e00b      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe fdac 	bl	8001bac <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d902      	bls.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	74fb      	strb	r3, [r7, #19]
            break;
 8003066:	e006      	b.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003068:	4b0c      	ldr	r3, [pc, #48]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d0ec      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8003076:	7cfb      	ldrb	r3, [r7, #19]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800307c:	4b07      	ldr	r3, [pc, #28]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800307e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003082:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308a:	4904      	ldr	r1, [pc, #16]	@ (800309c <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003092:	e009      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003094:	7cfb      	ldrb	r3, [r7, #19]
 8003096:	74bb      	strb	r3, [r7, #18]
 8003098:	e006      	b.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x148>
 800309a:	bf00      	nop
 800309c:	40021000 	.word	0x40021000
 80030a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030a8:	7c7b      	ldrb	r3, [r7, #17]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d105      	bne.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ae:	4b6e      	ldr	r3, [pc, #440]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030c6:	4b68      	ldr	r3, [pc, #416]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030cc:	f023 0203 	bic.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	4964      	ldr	r1, [pc, #400]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030e8:	4b5f      	ldr	r3, [pc, #380]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ee:	f023 020c 	bic.w	r2, r3, #12
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	495c      	ldr	r1, [pc, #368]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800310a:	4b57      	ldr	r3, [pc, #348]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800310c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003110:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	4953      	ldr	r1, [pc, #332]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0320 	and.w	r3, r3, #32
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800312c:	4b4e      	ldr	r3, [pc, #312]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800312e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003132:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	494b      	ldr	r1, [pc, #300]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800314e:	4b46      	ldr	r3, [pc, #280]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003154:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	4942      	ldr	r1, [pc, #264]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003170:	4b3d      	ldr	r3, [pc, #244]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003176:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317e:	493a      	ldr	r1, [pc, #232]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003192:	4b35      	ldr	r3, [pc, #212]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003198:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	695b      	ldr	r3, [r3, #20]
 80031a0:	4931      	ldr	r1, [pc, #196]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ba:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	4929      	ldr	r1, [pc, #164]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031d6:	4b24      	ldr	r3, [pc, #144]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031dc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	4920      	ldr	r1, [pc, #128]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d015      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031fe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003206:	4918      	ldr	r1, [pc, #96]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003216:	d105      	bne.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003218:	4b13      	ldr	r3, [pc, #76]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a12      	ldr	r2, [pc, #72]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800321e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003222:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d015      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003230:	4b0d      	ldr	r3, [pc, #52]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003236:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800323e:	490a      	ldr	r1, [pc, #40]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800324a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800324e:	d105      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003250:	4b05      	ldr	r3, [pc, #20]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	4a04      	ldr	r2, [pc, #16]	@ (8003268 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8003256:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800325a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800325c:	7cbb      	ldrb	r3, [r7, #18]
}
 800325e:	4618      	mov	r0, r3
 8003260:	3718      	adds	r7, #24
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40021000 	.word	0x40021000

0800326c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d101      	bne.n	800327e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e095      	b.n	80033aa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003282:	2b00      	cmp	r3, #0
 8003284:	d108      	bne.n	8003298 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800328e:	d009      	beq.n	80032a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	61da      	str	r2, [r3, #28]
 8003296:	e005      	b.n	80032a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d106      	bne.n	80032c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f7fd fe9a 	bl	8000ff8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2202      	movs	r2, #2
 80032c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80032da:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	68db      	ldr	r3, [r3, #12]
 80032e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80032e4:	d902      	bls.n	80032ec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	e002      	b.n	80032f2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80032ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80032f0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80032fa:	d007      	beq.n	800330c <HAL_SPI_Init+0xa0>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003304:	d002      	beq.n	800330c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800331c:	431a      	orrs	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	431a      	orrs	r2, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800334e:	ea42 0103 	orr.w	r1, r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003356:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	0c1b      	lsrs	r3, r3, #16
 8003368:	f003 0204 	and.w	r2, r3, #4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	f003 0310 	and.w	r3, r3, #16
 8003374:	431a      	orrs	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8003388:	ea42 0103 	orr.w	r1, r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b088      	sub	sp, #32
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	603b      	str	r3, [r7, #0]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033c2:	f7fe fbf3 	bl	8001bac <HAL_GetTick>
 80033c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d001      	beq.n	80033dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80033d8:	2302      	movs	r3, #2
 80033da:	e15c      	b.n	8003696 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d002      	beq.n	80033e8 <HAL_SPI_Transmit+0x36>
 80033e2:	88fb      	ldrh	r3, [r7, #6]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d101      	bne.n	80033ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e154      	b.n	8003696 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_SPI_Transmit+0x48>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e14d      	b.n	8003696 <HAL_SPI_Transmit+0x2e4>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2203      	movs	r2, #3
 8003406:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	88fa      	ldrh	r2, [r7, #6]
 800341a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	88fa      	ldrh	r2, [r7, #6]
 8003420:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2200      	movs	r2, #0
 8003434:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800344c:	d10f      	bne.n	800346e <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800345c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800346c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003478:	2b40      	cmp	r3, #64	@ 0x40
 800347a:	d007      	beq.n	800348c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800348a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003494:	d952      	bls.n	800353c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_Transmit+0xf2>
 800349e:	8b7b      	ldrh	r3, [r7, #26]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d145      	bne.n	8003530 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a8:	881a      	ldrh	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b4:	1c9a      	adds	r2, r3, #2
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034be:	b29b      	uxth	r3, r3
 80034c0:	3b01      	subs	r3, #1
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034c8:	e032      	b.n	8003530 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d112      	bne.n	80034fe <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034dc:	881a      	ldrh	r2, [r3, #0]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034e8:	1c9a      	adds	r2, r3, #2
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80034fc:	e018      	b.n	8003530 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034fe:	f7fe fb55 	bl	8001bac <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	429a      	cmp	r2, r3
 800350c:	d803      	bhi.n	8003516 <HAL_SPI_Transmit+0x164>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003514:	d102      	bne.n	800351c <HAL_SPI_Transmit+0x16a>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d109      	bne.n	8003530 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e0b2      	b.n	8003696 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003534:	b29b      	uxth	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1c7      	bne.n	80034ca <HAL_SPI_Transmit+0x118>
 800353a:	e083      	b.n	8003644 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_SPI_Transmit+0x198>
 8003544:	8b7b      	ldrh	r3, [r7, #26]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d177      	bne.n	800363a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800354e:	b29b      	uxth	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d912      	bls.n	800357a <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003558:	881a      	ldrh	r2, [r3, #0]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003564:	1c9a      	adds	r2, r3, #2
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800356e:	b29b      	uxth	r3, r3
 8003570:	3b02      	subs	r3, #2
 8003572:	b29a      	uxth	r2, r3
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003578:	e05f      	b.n	800363a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	330c      	adds	r3, #12
 8003584:	7812      	ldrb	r2, [r2, #0]
 8003586:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80035a0:	e04b      	b.n	800363a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d12b      	bne.n	8003608 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d912      	bls.n	80035e0 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035be:	881a      	ldrh	r2, [r3, #0]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ca:	1c9a      	adds	r2, r3, #2
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	3b02      	subs	r3, #2
 80035d8:	b29a      	uxth	r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80035de:	e02c      	b.n	800363a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	330c      	adds	r3, #12
 80035ea:	7812      	ldrb	r2, [r2, #0]
 80035ec:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f2:	1c5a      	adds	r2, r3, #1
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	3b01      	subs	r3, #1
 8003600:	b29a      	uxth	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003606:	e018      	b.n	800363a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003608:	f7fe fad0 	bl	8001bac <HAL_GetTick>
 800360c:	4602      	mov	r2, r0
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	683a      	ldr	r2, [r7, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d803      	bhi.n	8003620 <HAL_SPI_Transmit+0x26e>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d102      	bne.n	8003626 <HAL_SPI_Transmit+0x274>
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e02d      	b.n	8003696 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800363e:	b29b      	uxth	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1ae      	bne.n	80035a2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	6839      	ldr	r1, [r7, #0]
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f000 fcf5 	bl	8004038 <SPI_EndRxTxTransaction>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d002      	beq.n	800365a <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10a      	bne.n	8003678 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003662:	2300      	movs	r3, #0
 8003664:	617b      	str	r3, [r7, #20]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	689b      	ldr	r3, [r3, #8]
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003694:	2300      	movs	r3, #0
  }
}
 8003696:	4618      	mov	r0, r3
 8003698:	3720      	adds	r7, #32
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b088      	sub	sp, #32
 80036a2:	af02      	add	r7, sp, #8
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4613      	mov	r3, r2
 80036ac:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d001      	beq.n	80036be <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80036ba:	2302      	movs	r3, #2
 80036bc:	e123      	b.n	8003906 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036c6:	d112      	bne.n	80036ee <HAL_SPI_Receive+0x50>
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10e      	bne.n	80036ee <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	2204      	movs	r2, #4
 80036d4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80036d8:	88fa      	ldrh	r2, [r7, #6]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	9300      	str	r3, [sp, #0]
 80036de:	4613      	mov	r3, r2
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	68b9      	ldr	r1, [r7, #8]
 80036e4:	68f8      	ldr	r0, [r7, #12]
 80036e6:	f000 f912 	bl	800390e <HAL_SPI_TransmitReceive>
 80036ea:	4603      	mov	r3, r0
 80036ec:	e10b      	b.n	8003906 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80036ee:	f7fe fa5d 	bl	8001bac <HAL_GetTick>
 80036f2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_SPI_Receive+0x62>
 80036fa:	88fb      	ldrh	r3, [r7, #6]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e100      	b.n	8003906 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_SPI_Receive+0x74>
 800370e:	2302      	movs	r3, #2
 8003710:	e0f9      	b.n	8003906 <HAL_SPI_Receive+0x268>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2204      	movs	r2, #4
 800371e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2200      	movs	r2, #0
 8003726:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	88fa      	ldrh	r2, [r7, #6]
 8003732:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	68db      	ldr	r3, [r3, #12]
 8003760:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003764:	d908      	bls.n	8003778 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685a      	ldr	r2, [r3, #4]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003774:	605a      	str	r2, [r3, #4]
 8003776:	e007      	b.n	8003788 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003786:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003790:	d10f      	bne.n	80037b2 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037b0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037bc:	2b40      	cmp	r3, #64	@ 0x40
 80037be:	d007      	beq.n	80037d0 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037ce:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037d8:	d875      	bhi.n	80038c6 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80037da:	e037      	b.n	800384c <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0301 	and.w	r3, r3, #1
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d117      	bne.n	800381a <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f103 020c 	add.w	r2, r3, #12
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	7812      	ldrb	r2, [r2, #0]
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003800:	1c5a      	adds	r2, r3, #1
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003818:	e018      	b.n	800384c <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800381a:	f7fe f9c7 	bl	8001bac <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	429a      	cmp	r2, r3
 8003828:	d803      	bhi.n	8003832 <HAL_SPI_Receive+0x194>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d102      	bne.n	8003838 <HAL_SPI_Receive+0x19a>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d109      	bne.n	800384c <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e05c      	b.n	8003906 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1c1      	bne.n	80037dc <HAL_SPI_Receive+0x13e>
 8003858:	e03b      	b.n	80038d2 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d115      	bne.n	8003894 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68da      	ldr	r2, [r3, #12]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003872:	b292      	uxth	r2, r2
 8003874:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	1c9a      	adds	r2, r3, #2
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003892:	e018      	b.n	80038c6 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003894:	f7fe f98a 	bl	8001bac <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d803      	bhi.n	80038ac <HAL_SPI_Receive+0x20e>
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038aa:	d102      	bne.n	80038b2 <HAL_SPI_Receive+0x214>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d109      	bne.n	80038c6 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e01f      	b.n	8003906 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1c3      	bne.n	800385a <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	6839      	ldr	r1, [r7, #0]
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fb56 	bl	8003f88 <SPI_EndRxTransaction>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e000      	b.n	8003906 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003904:	2300      	movs	r3, #0
  }
}
 8003906:	4618      	mov	r0, r3
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b08a      	sub	sp, #40	@ 0x28
 8003912:	af00      	add	r7, sp, #0
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	607a      	str	r2, [r7, #4]
 800391a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800391c:	2301      	movs	r3, #1
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003920:	f7fe f944 	bl	8001bac <HAL_GetTick>
 8003924:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800392c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003934:	887b      	ldrh	r3, [r7, #2]
 8003936:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003938:	887b      	ldrh	r3, [r7, #2]
 800393a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800393c:	7ffb      	ldrb	r3, [r7, #31]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d00c      	beq.n	800395c <HAL_SPI_TransmitReceive+0x4e>
 8003942:	69bb      	ldr	r3, [r7, #24]
 8003944:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003948:	d106      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d102      	bne.n	8003958 <HAL_SPI_TransmitReceive+0x4a>
 8003952:	7ffb      	ldrb	r3, [r7, #31]
 8003954:	2b04      	cmp	r3, #4
 8003956:	d001      	beq.n	800395c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003958:	2302      	movs	r3, #2
 800395a:	e1f3      	b.n	8003d44 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <HAL_SPI_TransmitReceive+0x60>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <HAL_SPI_TransmitReceive+0x60>
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e1e8      	b.n	8003d44 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_SPI_TransmitReceive+0x72>
 800397c:	2302      	movs	r3, #2
 800397e:	e1e1      	b.n	8003d44 <HAL_SPI_TransmitReceive+0x436>
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b04      	cmp	r3, #4
 8003992:	d003      	beq.n	800399c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2205      	movs	r2, #5
 8003998:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	687a      	ldr	r2, [r7, #4]
 80039a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	887a      	ldrh	r2, [r7, #2]
 80039b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	887a      	ldrh	r2, [r7, #2]
 80039c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	887a      	ldrh	r2, [r7, #2]
 80039c8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039de:	d802      	bhi.n	80039e6 <HAL_SPI_TransmitReceive+0xd8>
 80039e0:	8abb      	ldrh	r3, [r7, #20]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d908      	bls.n	80039f8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039f4:	605a      	str	r2, [r3, #4]
 80039f6:	e007      	b.n	8003a08 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	685a      	ldr	r2, [r3, #4]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003a06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a12:	2b40      	cmp	r3, #64	@ 0x40
 8003a14:	d007      	beq.n	8003a26 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a2e:	f240 8083 	bls.w	8003b38 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d002      	beq.n	8003a40 <HAL_SPI_TransmitReceive+0x132>
 8003a3a:	8afb      	ldrh	r3, [r7, #22]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d16f      	bne.n	8003b20 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a44:	881a      	ldrh	r2, [r3, #0]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a50:	1c9a      	adds	r2, r3, #2
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a64:	e05c      	b.n	8003b20 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d11b      	bne.n	8003aac <HAL_SPI_TransmitReceive+0x19e>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d016      	beq.n	8003aac <HAL_SPI_TransmitReceive+0x19e>
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d113      	bne.n	8003aac <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a88:	881a      	ldrh	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a94:	1c9a      	adds	r2, r3, #2
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	3b01      	subs	r3, #1
 8003aa2:	b29a      	uxth	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689b      	ldr	r3, [r3, #8]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d11c      	bne.n	8003af4 <HAL_SPI_TransmitReceive+0x1e6>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d016      	beq.n	8003af4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad0:	b292      	uxth	r2, r2
 8003ad2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad8:	1c9a      	adds	r2, r3, #2
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003af0:	2301      	movs	r3, #1
 8003af2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003af4:	f7fe f85a 	bl	8001bac <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d80d      	bhi.n	8003b20 <HAL_SPI_TransmitReceive+0x212>
 8003b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b0a:	d009      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e111      	b.n	8003d44 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d19d      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x158>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d197      	bne.n	8003a66 <HAL_SPI_TransmitReceive+0x158>
 8003b36:	e0e5      	b.n	8003d04 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <HAL_SPI_TransmitReceive+0x23a>
 8003b40:	8afb      	ldrh	r3, [r7, #22]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	f040 80d1 	bne.w	8003cea <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d912      	bls.n	8003b78 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b56:	881a      	ldrh	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b62:	1c9a      	adds	r2, r3, #2
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	3b02      	subs	r3, #2
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003b76:	e0b8      	b.n	8003cea <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	7812      	ldrb	r2, [r2, #0]
 8003b84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8a:	1c5a      	adds	r2, r3, #1
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b9e:	e0a4      	b.n	8003cea <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d134      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x30a>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d02f      	beq.n	8003c18 <HAL_SPI_TransmitReceive+0x30a>
 8003bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d12c      	bne.n	8003c18 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bc2:	b29b      	uxth	r3, r3
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d912      	bls.n	8003bee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bcc:	881a      	ldrh	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b02      	subs	r3, #2
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003bec:	e012      	b.n	8003c14 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	330c      	adds	r3, #12
 8003bf8:	7812      	ldrb	r2, [r2, #0]
 8003bfa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c14:	2300      	movs	r3, #0
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d148      	bne.n	8003cb8 <HAL_SPI_TransmitReceive+0x3aa>
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d042      	beq.n	8003cb8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c38:	b29b      	uxth	r3, r3
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d923      	bls.n	8003c86 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	1c9a      	adds	r2, r3, #2
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b02      	subs	r3, #2
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d81f      	bhi.n	8003cb4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c82:	605a      	str	r2, [r3, #4]
 8003c84:	e016      	b.n	8003cb4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f103 020c 	add.w	r2, r3, #12
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c92:	7812      	ldrb	r2, [r2, #0]
 8003c94:	b2d2      	uxtb	r2, r2
 8003c96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cb8:	f7fd ff78 	bl	8001bac <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d803      	bhi.n	8003cd0 <HAL_SPI_TransmitReceive+0x3c2>
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cce:	d102      	bne.n	8003cd6 <HAL_SPI_TransmitReceive+0x3c8>
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d109      	bne.n	8003cea <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e02c      	b.n	8003d44 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f47f af55 	bne.w	8003ba0 <HAL_SPI_TransmitReceive+0x292>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	f47f af4e 	bne.w	8003ba0 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f000 f995 	bl	8004038 <SPI_EndRxTxTransaction>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d008      	beq.n	8003d26 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2220      	movs	r2, #32
 8003d18:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e00e      	b.n	8003d44 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003d42:	2300      	movs	r3, #0
  }
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3728      	adds	r7, #40	@ 0x28
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d5c:	f7fd ff26 	bl	8001bac <HAL_GetTick>
 8003d60:	4602      	mov	r2, r0
 8003d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d64:	1a9b      	subs	r3, r3, r2
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	4413      	add	r3, r2
 8003d6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d6c:	f7fd ff1e 	bl	8001bac <HAL_GetTick>
 8003d70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d72:	4b39      	ldr	r3, [pc, #228]	@ (8003e58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	015b      	lsls	r3, r3, #5
 8003d78:	0d1b      	lsrs	r3, r3, #20
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	fb02 f303 	mul.w	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d82:	e054      	b.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d8a:	d050      	beq.n	8003e2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d8c:	f7fd ff0e 	bl	8001bac <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d902      	bls.n	8003da2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d13d      	bne.n	8003e1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003db0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003dba:	d111      	bne.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dc4:	d004      	beq.n	8003dd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dce:	d107      	bne.n	8003de0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003dde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003de8:	d10f      	bne.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e017      	b.n	8003e4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d101      	bne.n	8003e28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	4013      	ands	r3, r2
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	bf0c      	ite	eq
 8003e3e:	2301      	moveq	r3, #1
 8003e40:	2300      	movne	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	79fb      	ldrb	r3, [r7, #7]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d19b      	bne.n	8003d84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3720      	adds	r7, #32
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000000 	.word	0x20000000

08003e5c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	@ 0x28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003e6e:	f7fd fe9d 	bl	8001bac <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003e7e:	f7fd fe95 	bl	8001bac <HAL_GetTick>
 8003e82:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	330c      	adds	r3, #12
 8003e8a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003e8c:	4b3d      	ldr	r3, [pc, #244]	@ (8003f84 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	009b      	lsls	r3, r3, #2
 8003e94:	4413      	add	r3, r2
 8003e96:	00da      	lsls	r2, r3, #3
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	0d1b      	lsrs	r3, r3, #20
 8003e9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e9e:	fb02 f303 	mul.w	r3, r2, r3
 8003ea2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ea4:	e060      	b.n	8003f68 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003eac:	d107      	bne.n	8003ebe <SPI_WaitFifoStateUntilTimeout+0x62>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d104      	bne.n	8003ebe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d050      	beq.n	8003f68 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ec6:	f7fd fe71 	bl	8001bac <HAL_GetTick>
 8003eca:	4602      	mov	r2, r0
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d902      	bls.n	8003edc <SPI_WaitFifoStateUntilTimeout+0x80>
 8003ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d13d      	bne.n	8003f58 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003eea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ef4:	d111      	bne.n	8003f1a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003efe:	d004      	beq.n	8003f0a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f08:	d107      	bne.n	8003f1a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f18:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f22:	d10f      	bne.n	8003f44 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f42:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e010      	b.n	8003f7a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	3b01      	subs	r3, #1
 8003f66:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	4013      	ands	r3, r2
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d196      	bne.n	8003ea6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3728      	adds	r7, #40	@ 0x28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	20000000 	.word	0x20000000

08003f88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f9c:	d111      	bne.n	8003fc2 <SPI_EndRxTransaction+0x3a>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fa6:	d004      	beq.n	8003fb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb0:	d107      	bne.n	8003fc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fc0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2180      	movs	r1, #128	@ 0x80
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f7ff febd 	bl	8003d4c <SPI_WaitFlagStateUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003fdc:	f043 0220 	orr.w	r2, r3, #32
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e023      	b.n	8004030 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003ff0:	d11d      	bne.n	800402e <SPI_EndRxTransaction+0xa6>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ffa:	d004      	beq.n	8004006 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004004:	d113      	bne.n	800402e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	2200      	movs	r2, #0
 800400e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff ff22 	bl	8003e5c <SPI_WaitFifoStateUntilTimeout>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d007      	beq.n	800402e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004022:	f043 0220 	orr.w	r2, r3, #32
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e000      	b.n	8004030 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3710      	adds	r7, #16
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	2200      	movs	r2, #0
 800404c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7ff ff03 	bl	8003e5c <SPI_WaitFifoStateUntilTimeout>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004060:	f043 0220 	orr.w	r2, r3, #32
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004068:	2303      	movs	r3, #3
 800406a:	e027      	b.n	80040bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2200      	movs	r2, #0
 8004074:	2180      	movs	r1, #128	@ 0x80
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f7ff fe68 	bl	8003d4c <SPI_WaitFlagStateUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004086:	f043 0220 	orr.w	r2, r3, #32
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e014      	b.n	80040bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	2200      	movs	r2, #0
 800409a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f7ff fedc 	bl	8003e5c <SPI_WaitFifoStateUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d007      	beq.n	80040ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e000      	b.n	80040bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3710      	adds	r7, #16
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b082      	sub	sp, #8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d101      	bne.n	80040d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e040      	b.n	8004158 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d106      	bne.n	80040ec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7fc ffca 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2224      	movs	r2, #36	@ 0x24
 80040f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 0201 	bic.w	r2, r2, #1
 8004100:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004106:	2b00      	cmp	r3, #0
 8004108:	d002      	beq.n	8004110 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fb62 	bl	80047d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f905 	bl	8004320 <UART_SetConfig>
 8004116:	4603      	mov	r3, r0
 8004118:	2b01      	cmp	r3, #1
 800411a:	d101      	bne.n	8004120 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e01b      	b.n	8004158 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800412e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800413e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f042 0201 	orr.w	r2, r2, #1
 800414e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f000 fbe1 	bl	8004918 <UART_CheckIdleState>
 8004156:	4603      	mov	r3, r0
}
 8004158:	4618      	mov	r0, r3
 800415a:	3708      	adds	r7, #8
 800415c:	46bd      	mov	sp, r7
 800415e:	bd80      	pop	{r7, pc}

08004160 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d101      	bne.n	8004172 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e048      	b.n	8004204 <HAL_HalfDuplex_Init+0xa4>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004176:	2b00      	cmp	r3, #0
 8004178:	d106      	bne.n	8004188 <HAL_HalfDuplex_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f7fc ff7c 	bl	8001080 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2224      	movs	r2, #36	@ 0x24
 800418c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 0201 	bic.w	r2, r2, #1
 800419c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <HAL_HalfDuplex_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fb14 	bl	80047d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f8b7 	bl	8004320 <UART_SetConfig>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d101      	bne.n	80041bc <HAL_HalfDuplex_Init+0x5c>
  {
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e023      	b.n	8004204 <HAL_HalfDuplex_Init+0xa4>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0222 	bic.w	r2, r2, #34	@ 0x22
 80041da:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0208 	orr.w	r2, r2, #8
 80041ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 fb8b 	bl	8004918 <UART_CheckIdleState>
 8004202:	4603      	mov	r3, r0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b08a      	sub	sp, #40	@ 0x28
 8004210:	af02      	add	r7, sp, #8
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	4613      	mov	r3, r2
 800421a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004220:	2b20      	cmp	r3, #32
 8004222:	d177      	bne.n	8004314 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_UART_Transmit+0x24>
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e070      	b.n	8004316 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2221      	movs	r2, #33	@ 0x21
 8004240:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004242:	f7fd fcb3 	bl	8001bac <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	88fa      	ldrh	r2, [r7, #6]
 8004254:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004260:	d108      	bne.n	8004274 <HAL_UART_Transmit+0x68>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d104      	bne.n	8004274 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800426a:	2300      	movs	r3, #0
 800426c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e003      	b.n	800427c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004278:	2300      	movs	r3, #0
 800427a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800427c:	e02f      	b.n	80042de <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	2200      	movs	r2, #0
 8004286:	2180      	movs	r1, #128	@ 0x80
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f000 fbed 	bl	8004a68 <UART_WaitOnFlagUntilTimeout>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e03b      	b.n	8004316 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d10b      	bne.n	80042bc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	881a      	ldrh	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b0:	b292      	uxth	r2, r2
 80042b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	3302      	adds	r3, #2
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	e007      	b.n	80042cc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	781a      	ldrb	r2, [r3, #0]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	3301      	adds	r3, #1
 80042ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80042e4:	b29b      	uxth	r3, r3
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1c9      	bne.n	800427e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	9300      	str	r3, [sp, #0]
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	2200      	movs	r2, #0
 80042f2:	2140      	movs	r1, #64	@ 0x40
 80042f4:	68f8      	ldr	r0, [r7, #12]
 80042f6:	f000 fbb7 	bl	8004a68 <UART_WaitOnFlagUntilTimeout>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2220      	movs	r2, #32
 8004304:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e005      	b.n	8004316 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
	...

08004320 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004320:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004324:	b08a      	sub	sp, #40	@ 0x28
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	689a      	ldr	r2, [r3, #8]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	695b      	ldr	r3, [r3, #20]
 800433e:	431a      	orrs	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	4313      	orrs	r3, r2
 8004346:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	4b9e      	ldr	r3, [pc, #632]	@ (80045c8 <UART_SetConfig+0x2a8>)
 8004350:	4013      	ands	r3, r2
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	6812      	ldr	r2, [r2, #0]
 8004356:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004358:	430b      	orrs	r3, r1
 800435a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68da      	ldr	r2, [r3, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	430a      	orrs	r2, r1
 8004370:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a93      	ldr	r2, [pc, #588]	@ (80045cc <UART_SetConfig+0x2ac>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d004      	beq.n	800438c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004388:	4313      	orrs	r3, r2
 800438a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800439c:	430a      	orrs	r2, r1
 800439e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a8a      	ldr	r2, [pc, #552]	@ (80045d0 <UART_SetConfig+0x2b0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d126      	bne.n	80043f8 <UART_SetConfig+0xd8>
 80043aa:	4b8a      	ldr	r3, [pc, #552]	@ (80045d4 <UART_SetConfig+0x2b4>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b0:	f003 0303 	and.w	r3, r3, #3
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d81b      	bhi.n	80043f0 <UART_SetConfig+0xd0>
 80043b8:	a201      	add	r2, pc, #4	@ (adr r2, 80043c0 <UART_SetConfig+0xa0>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043d1 	.word	0x080043d1
 80043c4:	080043e1 	.word	0x080043e1
 80043c8:	080043d9 	.word	0x080043d9
 80043cc:	080043e9 	.word	0x080043e9
 80043d0:	2301      	movs	r3, #1
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d6:	e0ab      	b.n	8004530 <UART_SetConfig+0x210>
 80043d8:	2302      	movs	r3, #2
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043de:	e0a7      	b.n	8004530 <UART_SetConfig+0x210>
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e6:	e0a3      	b.n	8004530 <UART_SetConfig+0x210>
 80043e8:	2308      	movs	r3, #8
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ee:	e09f      	b.n	8004530 <UART_SetConfig+0x210>
 80043f0:	2310      	movs	r3, #16
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f6:	e09b      	b.n	8004530 <UART_SetConfig+0x210>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a76      	ldr	r2, [pc, #472]	@ (80045d8 <UART_SetConfig+0x2b8>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d138      	bne.n	8004474 <UART_SetConfig+0x154>
 8004402:	4b74      	ldr	r3, [pc, #464]	@ (80045d4 <UART_SetConfig+0x2b4>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004408:	f003 030c 	and.w	r3, r3, #12
 800440c:	2b0c      	cmp	r3, #12
 800440e:	d82d      	bhi.n	800446c <UART_SetConfig+0x14c>
 8004410:	a201      	add	r2, pc, #4	@ (adr r2, 8004418 <UART_SetConfig+0xf8>)
 8004412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004416:	bf00      	nop
 8004418:	0800444d 	.word	0x0800444d
 800441c:	0800446d 	.word	0x0800446d
 8004420:	0800446d 	.word	0x0800446d
 8004424:	0800446d 	.word	0x0800446d
 8004428:	0800445d 	.word	0x0800445d
 800442c:	0800446d 	.word	0x0800446d
 8004430:	0800446d 	.word	0x0800446d
 8004434:	0800446d 	.word	0x0800446d
 8004438:	08004455 	.word	0x08004455
 800443c:	0800446d 	.word	0x0800446d
 8004440:	0800446d 	.word	0x0800446d
 8004444:	0800446d 	.word	0x0800446d
 8004448:	08004465 	.word	0x08004465
 800444c:	2300      	movs	r3, #0
 800444e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004452:	e06d      	b.n	8004530 <UART_SetConfig+0x210>
 8004454:	2302      	movs	r3, #2
 8004456:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445a:	e069      	b.n	8004530 <UART_SetConfig+0x210>
 800445c:	2304      	movs	r3, #4
 800445e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004462:	e065      	b.n	8004530 <UART_SetConfig+0x210>
 8004464:	2308      	movs	r3, #8
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446a:	e061      	b.n	8004530 <UART_SetConfig+0x210>
 800446c:	2310      	movs	r3, #16
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004472:	e05d      	b.n	8004530 <UART_SetConfig+0x210>
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a58      	ldr	r2, [pc, #352]	@ (80045dc <UART_SetConfig+0x2bc>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d125      	bne.n	80044ca <UART_SetConfig+0x1aa>
 800447e:	4b55      	ldr	r3, [pc, #340]	@ (80045d4 <UART_SetConfig+0x2b4>)
 8004480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004484:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004488:	2b30      	cmp	r3, #48	@ 0x30
 800448a:	d016      	beq.n	80044ba <UART_SetConfig+0x19a>
 800448c:	2b30      	cmp	r3, #48	@ 0x30
 800448e:	d818      	bhi.n	80044c2 <UART_SetConfig+0x1a2>
 8004490:	2b20      	cmp	r3, #32
 8004492:	d00a      	beq.n	80044aa <UART_SetConfig+0x18a>
 8004494:	2b20      	cmp	r3, #32
 8004496:	d814      	bhi.n	80044c2 <UART_SetConfig+0x1a2>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <UART_SetConfig+0x182>
 800449c:	2b10      	cmp	r3, #16
 800449e:	d008      	beq.n	80044b2 <UART_SetConfig+0x192>
 80044a0:	e00f      	b.n	80044c2 <UART_SetConfig+0x1a2>
 80044a2:	2300      	movs	r3, #0
 80044a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a8:	e042      	b.n	8004530 <UART_SetConfig+0x210>
 80044aa:	2302      	movs	r3, #2
 80044ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b0:	e03e      	b.n	8004530 <UART_SetConfig+0x210>
 80044b2:	2304      	movs	r3, #4
 80044b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044b8:	e03a      	b.n	8004530 <UART_SetConfig+0x210>
 80044ba:	2308      	movs	r3, #8
 80044bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c0:	e036      	b.n	8004530 <UART_SetConfig+0x210>
 80044c2:	2310      	movs	r3, #16
 80044c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c8:	e032      	b.n	8004530 <UART_SetConfig+0x210>
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a3f      	ldr	r2, [pc, #252]	@ (80045cc <UART_SetConfig+0x2ac>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d12a      	bne.n	800452a <UART_SetConfig+0x20a>
 80044d4:	4b3f      	ldr	r3, [pc, #252]	@ (80045d4 <UART_SetConfig+0x2b4>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80044de:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044e2:	d01a      	beq.n	800451a <UART_SetConfig+0x1fa>
 80044e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80044e8:	d81b      	bhi.n	8004522 <UART_SetConfig+0x202>
 80044ea:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044ee:	d00c      	beq.n	800450a <UART_SetConfig+0x1ea>
 80044f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044f4:	d815      	bhi.n	8004522 <UART_SetConfig+0x202>
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <UART_SetConfig+0x1e2>
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	d008      	beq.n	8004512 <UART_SetConfig+0x1f2>
 8004500:	e00f      	b.n	8004522 <UART_SetConfig+0x202>
 8004502:	2300      	movs	r3, #0
 8004504:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004508:	e012      	b.n	8004530 <UART_SetConfig+0x210>
 800450a:	2302      	movs	r3, #2
 800450c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004510:	e00e      	b.n	8004530 <UART_SetConfig+0x210>
 8004512:	2304      	movs	r3, #4
 8004514:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004518:	e00a      	b.n	8004530 <UART_SetConfig+0x210>
 800451a:	2308      	movs	r3, #8
 800451c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004520:	e006      	b.n	8004530 <UART_SetConfig+0x210>
 8004522:	2310      	movs	r3, #16
 8004524:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004528:	e002      	b.n	8004530 <UART_SetConfig+0x210>
 800452a:	2310      	movs	r3, #16
 800452c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a25      	ldr	r2, [pc, #148]	@ (80045cc <UART_SetConfig+0x2ac>)
 8004536:	4293      	cmp	r3, r2
 8004538:	f040 808a 	bne.w	8004650 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800453c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004540:	2b08      	cmp	r3, #8
 8004542:	d824      	bhi.n	800458e <UART_SetConfig+0x26e>
 8004544:	a201      	add	r2, pc, #4	@ (adr r2, 800454c <UART_SetConfig+0x22c>)
 8004546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800454a:	bf00      	nop
 800454c:	08004571 	.word	0x08004571
 8004550:	0800458f 	.word	0x0800458f
 8004554:	08004579 	.word	0x08004579
 8004558:	0800458f 	.word	0x0800458f
 800455c:	0800457f 	.word	0x0800457f
 8004560:	0800458f 	.word	0x0800458f
 8004564:	0800458f 	.word	0x0800458f
 8004568:	0800458f 	.word	0x0800458f
 800456c:	08004587 	.word	0x08004587
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004570:	f7fe fc6a 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8004574:	61f8      	str	r0, [r7, #28]
        break;
 8004576:	e010      	b.n	800459a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004578:	4b19      	ldr	r3, [pc, #100]	@ (80045e0 <UART_SetConfig+0x2c0>)
 800457a:	61fb      	str	r3, [r7, #28]
        break;
 800457c:	e00d      	b.n	800459a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800457e:	f7fe fbcb 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8004582:	61f8      	str	r0, [r7, #28]
        break;
 8004584:	e009      	b.n	800459a <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004586:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800458a:	61fb      	str	r3, [r7, #28]
        break;
 800458c:	e005      	b.n	800459a <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800458e:	2300      	movs	r3, #0
 8004590:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004598:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8109 	beq.w	80047b4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	685a      	ldr	r2, [r3, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	4413      	add	r3, r2
 80045ac:	69fa      	ldr	r2, [r7, #28]
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d305      	bcc.n	80045be <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045b8:	69fa      	ldr	r2, [r7, #28]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d912      	bls.n	80045e4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80045c4:	e0f6      	b.n	80047b4 <UART_SetConfig+0x494>
 80045c6:	bf00      	nop
 80045c8:	efff69f3 	.word	0xefff69f3
 80045cc:	40008000 	.word	0x40008000
 80045d0:	40013800 	.word	0x40013800
 80045d4:	40021000 	.word	0x40021000
 80045d8:	40004400 	.word	0x40004400
 80045dc:	40004800 	.word	0x40004800
 80045e0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	2200      	movs	r2, #0
 80045e8:	461c      	mov	r4, r3
 80045ea:	4615      	mov	r5, r2
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	022b      	lsls	r3, r5, #8
 80045f6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045fa:	0222      	lsls	r2, r4, #8
 80045fc:	68f9      	ldr	r1, [r7, #12]
 80045fe:	6849      	ldr	r1, [r1, #4]
 8004600:	0849      	lsrs	r1, r1, #1
 8004602:	2000      	movs	r0, #0
 8004604:	4688      	mov	r8, r1
 8004606:	4681      	mov	r9, r0
 8004608:	eb12 0a08 	adds.w	sl, r2, r8
 800460c:	eb43 0b09 	adc.w	fp, r3, r9
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	2200      	movs	r2, #0
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461e:	4650      	mov	r0, sl
 8004620:	4659      	mov	r1, fp
 8004622:	f7fc f933 	bl	800088c <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4613      	mov	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800462e:	69bb      	ldr	r3, [r7, #24]
 8004630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004634:	d308      	bcc.n	8004648 <UART_SetConfig+0x328>
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800463c:	d204      	bcs.n	8004648 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	e0b5      	b.n	80047b4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800464e:	e0b1      	b.n	80047b4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004658:	d15d      	bne.n	8004716 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800465a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800465e:	2b08      	cmp	r3, #8
 8004660:	d827      	bhi.n	80046b2 <UART_SetConfig+0x392>
 8004662:	a201      	add	r2, pc, #4	@ (adr r2, 8004668 <UART_SetConfig+0x348>)
 8004664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004668:	0800468d 	.word	0x0800468d
 800466c:	08004695 	.word	0x08004695
 8004670:	0800469d 	.word	0x0800469d
 8004674:	080046b3 	.word	0x080046b3
 8004678:	080046a3 	.word	0x080046a3
 800467c:	080046b3 	.word	0x080046b3
 8004680:	080046b3 	.word	0x080046b3
 8004684:	080046b3 	.word	0x080046b3
 8004688:	080046ab 	.word	0x080046ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800468c:	f7fe fbdc 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 8004690:	61f8      	str	r0, [r7, #28]
        break;
 8004692:	e014      	b.n	80046be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004694:	f7fe fbee 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 8004698:	61f8      	str	r0, [r7, #28]
        break;
 800469a:	e010      	b.n	80046be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800469c:	4b4c      	ldr	r3, [pc, #304]	@ (80047d0 <UART_SetConfig+0x4b0>)
 800469e:	61fb      	str	r3, [r7, #28]
        break;
 80046a0:	e00d      	b.n	80046be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046a2:	f7fe fb39 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 80046a6:	61f8      	str	r0, [r7, #28]
        break;
 80046a8:	e009      	b.n	80046be <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ae:	61fb      	str	r3, [r7, #28]
        break;
 80046b0:	e005      	b.n	80046be <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d077      	beq.n	80047b4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	005a      	lsls	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	085b      	lsrs	r3, r3, #1
 80046ce:	441a      	add	r2, r3
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046d8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	2b0f      	cmp	r3, #15
 80046de:	d916      	bls.n	800470e <UART_SetConfig+0x3ee>
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e6:	d212      	bcs.n	800470e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	f023 030f 	bic.w	r3, r3, #15
 80046f0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	085b      	lsrs	r3, r3, #1
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	b29a      	uxth	r2, r3
 80046fe:	8afb      	ldrh	r3, [r7, #22]
 8004700:	4313      	orrs	r3, r2
 8004702:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	8afa      	ldrh	r2, [r7, #22]
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	e052      	b.n	80047b4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004714:	e04e      	b.n	80047b4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004716:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800471a:	2b08      	cmp	r3, #8
 800471c:	d827      	bhi.n	800476e <UART_SetConfig+0x44e>
 800471e:	a201      	add	r2, pc, #4	@ (adr r2, 8004724 <UART_SetConfig+0x404>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	08004749 	.word	0x08004749
 8004728:	08004751 	.word	0x08004751
 800472c:	08004759 	.word	0x08004759
 8004730:	0800476f 	.word	0x0800476f
 8004734:	0800475f 	.word	0x0800475f
 8004738:	0800476f 	.word	0x0800476f
 800473c:	0800476f 	.word	0x0800476f
 8004740:	0800476f 	.word	0x0800476f
 8004744:	08004767 	.word	0x08004767
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004748:	f7fe fb7e 	bl	8002e48 <HAL_RCC_GetPCLK1Freq>
 800474c:	61f8      	str	r0, [r7, #28]
        break;
 800474e:	e014      	b.n	800477a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004750:	f7fe fb90 	bl	8002e74 <HAL_RCC_GetPCLK2Freq>
 8004754:	61f8      	str	r0, [r7, #28]
        break;
 8004756:	e010      	b.n	800477a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004758:	4b1d      	ldr	r3, [pc, #116]	@ (80047d0 <UART_SetConfig+0x4b0>)
 800475a:	61fb      	str	r3, [r7, #28]
        break;
 800475c:	e00d      	b.n	800477a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475e:	f7fe fadb 	bl	8002d18 <HAL_RCC_GetSysClockFreq>
 8004762:	61f8      	str	r0, [r7, #28]
        break;
 8004764:	e009      	b.n	800477a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004766:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800476a:	61fb      	str	r3, [r7, #28]
        break;
 800476c:	e005      	b.n	800477a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800476e:	2300      	movs	r3, #0
 8004770:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004778:	bf00      	nop
    }

    if (pclk != 0U)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d019      	beq.n	80047b4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	085a      	lsrs	r2, r3, #1
 8004786:	69fb      	ldr	r3, [r7, #28]
 8004788:	441a      	add	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004792:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	2b0f      	cmp	r3, #15
 8004798:	d909      	bls.n	80047ae <UART_SetConfig+0x48e>
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047a0:	d205      	bcs.n	80047ae <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60da      	str	r2, [r3, #12]
 80047ac:	e002      	b.n	80047b4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2200      	movs	r2, #0
 80047be:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047c0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3728      	adds	r7, #40	@ 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ce:	bf00      	nop
 80047d0:	00f42400 	.word	0x00f42400

080047d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	f003 0308 	and.w	r3, r3, #8
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	f003 0302 	and.w	r3, r3, #2
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	f003 0310 	and.w	r3, r3, #16
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00a      	beq.n	8004886 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488a:	f003 0320 	and.w	r3, r3, #32
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d01a      	beq.n	80048ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	430a      	orrs	r2, r1
 80048c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048d2:	d10a      	bne.n	80048ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  }
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b098      	sub	sp, #96	@ 0x60
 800491c:	af02      	add	r7, sp, #8
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004928:	f7fd f940 	bl	8001bac <HAL_GetTick>
 800492c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f003 0308 	and.w	r3, r3, #8
 8004938:	2b08      	cmp	r3, #8
 800493a:	d12e      	bne.n	800499a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800493c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004944:	2200      	movs	r2, #0
 8004946:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f88c 	bl	8004a68 <UART_WaitOnFlagUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d021      	beq.n	800499a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495e:	e853 3f00 	ldrex	r3, [r3]
 8004962:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004966:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800496a:	653b      	str	r3, [r7, #80]	@ 0x50
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004974:	647b      	str	r3, [r7, #68]	@ 0x44
 8004976:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004978:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800497a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800497c:	e841 2300 	strex	r3, r2, [r1]
 8004980:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1e6      	bne.n	8004956 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e062      	b.n	8004a60 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d149      	bne.n	8004a3c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049ac:	9300      	str	r3, [sp, #0]
 80049ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049b0:	2200      	movs	r2, #0
 80049b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f856 	bl	8004a68 <UART_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d03c      	beq.n	8004a3c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	e853 3f00 	ldrex	r3, [r3]
 80049ce:	623b      	str	r3, [r7, #32]
   return(result);
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	461a      	mov	r2, r3
 80049de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80049e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e8:	e841 2300 	strex	r3, r2, [r1]
 80049ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1e6      	bne.n	80049c2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	3308      	adds	r3, #8
 80049fa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	e853 3f00 	ldrex	r3, [r3]
 8004a02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f023 0301 	bic.w	r3, r3, #1
 8004a0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	3308      	adds	r3, #8
 8004a12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a14:	61fa      	str	r2, [r7, #28]
 8004a16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a18:	69b9      	ldr	r1, [r7, #24]
 8004a1a:	69fa      	ldr	r2, [r7, #28]
 8004a1c:	e841 2300 	strex	r3, r2, [r1]
 8004a20:	617b      	str	r3, [r7, #20]
   return(result);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1e5      	bne.n	80049f4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e011      	b.n	8004a60 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2220      	movs	r2, #32
 8004a40:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3758      	adds	r7, #88	@ 0x58
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	603b      	str	r3, [r7, #0]
 8004a74:	4613      	mov	r3, r2
 8004a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a78:	e04f      	b.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a80:	d04b      	beq.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a82:	f7fd f893 	bl	8001bac <HAL_GetTick>
 8004a86:	4602      	mov	r2, r0
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d302      	bcc.n	8004a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e04e      	b.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d037      	beq.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b80      	cmp	r3, #128	@ 0x80
 8004aae:	d034      	beq.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b40      	cmp	r3, #64	@ 0x40
 8004ab4:	d031      	beq.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69db      	ldr	r3, [r3, #28]
 8004abc:	f003 0308 	and.w	r3, r3, #8
 8004ac0:	2b08      	cmp	r3, #8
 8004ac2:	d110      	bne.n	8004ae6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2208      	movs	r2, #8
 8004aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f838 	bl	8004b42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e029      	b.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004af4:	d111      	bne.n	8004b1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004afe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f81e 	bl	8004b42 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e00f      	b.n	8004b3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4013      	ands	r3, r2
 8004b24:	68ba      	ldr	r2, [r7, #8]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	bf0c      	ite	eq
 8004b2a:	2301      	moveq	r3, #1
 8004b2c:	2300      	movne	r3, #0
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	79fb      	ldrb	r3, [r7, #7]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d0a0      	beq.n	8004a7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b095      	sub	sp, #84	@ 0x54
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b52:	e853 3f00 	ldrex	r3, [r3]
 8004b56:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	461a      	mov	r2, r3
 8004b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b68:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b70:	e841 2300 	strex	r3, r2, [r1]
 8004b74:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1e6      	bne.n	8004b4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3308      	adds	r3, #8
 8004b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f023 0301 	bic.w	r3, r3, #1
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	3308      	adds	r3, #8
 8004b9a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b9c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d118      	bne.n	8004bea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	e853 3f00 	ldrex	r3, [r3]
 8004bc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f023 0310 	bic.w	r3, r3, #16
 8004bcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bd6:	61bb      	str	r3, [r7, #24]
 8004bd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6979      	ldr	r1, [r7, #20]
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	613b      	str	r3, [r7, #16]
   return(result);
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e6      	bne.n	8004bb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2220      	movs	r2, #32
 8004bee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004bfe:	bf00      	nop
 8004c00:	3754      	adds	r7, #84	@ 0x54
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
	...

08004c0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004c10:	4904      	ldr	r1, [pc, #16]	@ (8004c24 <MX_FATFS_Init+0x18>)
 8004c12:	4805      	ldr	r0, [pc, #20]	@ (8004c28 <MX_FATFS_Init+0x1c>)
 8004c14:	f000 f8b0 	bl	8004d78 <FATFS_LinkDriver>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	4b03      	ldr	r3, [pc, #12]	@ (8004c2c <MX_FATFS_Init+0x20>)
 8004c1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004c20:	bf00      	nop
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	20000230 	.word	0x20000230
 8004c28:	20000020 	.word	0x20000020
 8004c2c:	2000022c 	.word	0x2000022c

08004c30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	4603      	mov	r3, r0
 8004c38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8004c3a:	4b06      	ldr	r3, [pc, #24]	@ (8004c54 <USER_initialize+0x24>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004c40:	4b04      	ldr	r3, [pc, #16]	@ (8004c54 <USER_initialize+0x24>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	370c      	adds	r7, #12
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	2000001d 	.word	0x2000001d

08004c58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b083      	sub	sp, #12
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	4603      	mov	r3, r0
 8004c60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004c62:	4b06      	ldr	r3, [pc, #24]	@ (8004c7c <USER_status+0x24>)
 8004c64:	2201      	movs	r2, #1
 8004c66:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004c68:	4b04      	ldr	r3, [pc, #16]	@ (8004c7c <USER_status+0x24>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	370c      	adds	r7, #12
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	2000001d 	.word	0x2000001d

08004c80 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
 8004c8a:	603b      	str	r3, [r7, #0]
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004c90:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
 8004caa:	4603      	mov	r3, r0
 8004cac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8004cae:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	603a      	str	r2, [r7, #0]
 8004cc6:	71fb      	strb	r3, [r7, #7]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	73fb      	strb	r3, [r7, #15]
    return res;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
	...

08004ce0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b087      	sub	sp, #28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	4613      	mov	r3, r2
 8004cec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8004cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d74 <FATFS_LinkDriverEx+0x94>)
 8004cf8:	7a5b      	ldrb	r3, [r3, #9]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d131      	bne.n	8004d64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004d00:	4b1c      	ldr	r3, [pc, #112]	@ (8004d74 <FATFS_LinkDriverEx+0x94>)
 8004d02:	7a5b      	ldrb	r3, [r3, #9]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	461a      	mov	r2, r3
 8004d08:	4b1a      	ldr	r3, [pc, #104]	@ (8004d74 <FATFS_LinkDriverEx+0x94>)
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8004d0e:	4b19      	ldr	r3, [pc, #100]	@ (8004d74 <FATFS_LinkDriverEx+0x94>)
 8004d10:	7a5b      	ldrb	r3, [r3, #9]
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	4a17      	ldr	r2, [pc, #92]	@ (8004d74 <FATFS_LinkDriverEx+0x94>)
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8004d1e:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <FATFS_LinkDriverEx+0x94>)
 8004d20:	7a5b      	ldrb	r3, [r3, #9]
 8004d22:	b2db      	uxtb	r3, r3
 8004d24:	461a      	mov	r2, r3
 8004d26:	4b13      	ldr	r3, [pc, #76]	@ (8004d74 <FATFS_LinkDriverEx+0x94>)
 8004d28:	4413      	add	r3, r2
 8004d2a:	79fa      	ldrb	r2, [r7, #7]
 8004d2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8004d2e:	4b11      	ldr	r3, [pc, #68]	@ (8004d74 <FATFS_LinkDriverEx+0x94>)
 8004d30:	7a5b      	ldrb	r3, [r3, #9]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	b2d1      	uxtb	r1, r2
 8004d38:	4a0e      	ldr	r2, [pc, #56]	@ (8004d74 <FATFS_LinkDriverEx+0x94>)
 8004d3a:	7251      	strb	r1, [r2, #9]
 8004d3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8004d3e:	7dbb      	ldrb	r3, [r7, #22]
 8004d40:	3330      	adds	r3, #48	@ 0x30
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	223a      	movs	r2, #58	@ 0x3a
 8004d4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	3302      	adds	r3, #2
 8004d54:	222f      	movs	r2, #47	@ 0x2f
 8004d56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	3303      	adds	r3, #3
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004d60:	2300      	movs	r3, #0
 8004d62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	371c      	adds	r7, #28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000234 	.word	0x20000234

08004d78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8004d82:	2200      	movs	r2, #0
 8004d84:	6839      	ldr	r1, [r7, #0]
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f7ff ffaa 	bl	8004ce0 <FATFS_LinkDriverEx>
 8004d8c:	4603      	mov	r3, r0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3708      	adds	r7, #8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <__sflush_r>:
 8004d98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da0:	0716      	lsls	r6, r2, #28
 8004da2:	4605      	mov	r5, r0
 8004da4:	460c      	mov	r4, r1
 8004da6:	d454      	bmi.n	8004e52 <__sflush_r+0xba>
 8004da8:	684b      	ldr	r3, [r1, #4]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	dc02      	bgt.n	8004db4 <__sflush_r+0x1c>
 8004dae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	dd48      	ble.n	8004e46 <__sflush_r+0xae>
 8004db4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004db6:	2e00      	cmp	r6, #0
 8004db8:	d045      	beq.n	8004e46 <__sflush_r+0xae>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004dc0:	682f      	ldr	r7, [r5, #0]
 8004dc2:	6a21      	ldr	r1, [r4, #32]
 8004dc4:	602b      	str	r3, [r5, #0]
 8004dc6:	d030      	beq.n	8004e2a <__sflush_r+0x92>
 8004dc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004dca:	89a3      	ldrh	r3, [r4, #12]
 8004dcc:	0759      	lsls	r1, r3, #29
 8004dce:	d505      	bpl.n	8004ddc <__sflush_r+0x44>
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	1ad2      	subs	r2, r2, r3
 8004dd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004dd6:	b10b      	cbz	r3, 8004ddc <__sflush_r+0x44>
 8004dd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004dda:	1ad2      	subs	r2, r2, r3
 8004ddc:	2300      	movs	r3, #0
 8004dde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004de0:	6a21      	ldr	r1, [r4, #32]
 8004de2:	4628      	mov	r0, r5
 8004de4:	47b0      	blx	r6
 8004de6:	1c43      	adds	r3, r0, #1
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	d106      	bne.n	8004dfa <__sflush_r+0x62>
 8004dec:	6829      	ldr	r1, [r5, #0]
 8004dee:	291d      	cmp	r1, #29
 8004df0:	d82b      	bhi.n	8004e4a <__sflush_r+0xb2>
 8004df2:	4a2a      	ldr	r2, [pc, #168]	@ (8004e9c <__sflush_r+0x104>)
 8004df4:	410a      	asrs	r2, r1
 8004df6:	07d6      	lsls	r6, r2, #31
 8004df8:	d427      	bmi.n	8004e4a <__sflush_r+0xb2>
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	6062      	str	r2, [r4, #4]
 8004dfe:	04d9      	lsls	r1, r3, #19
 8004e00:	6922      	ldr	r2, [r4, #16]
 8004e02:	6022      	str	r2, [r4, #0]
 8004e04:	d504      	bpl.n	8004e10 <__sflush_r+0x78>
 8004e06:	1c42      	adds	r2, r0, #1
 8004e08:	d101      	bne.n	8004e0e <__sflush_r+0x76>
 8004e0a:	682b      	ldr	r3, [r5, #0]
 8004e0c:	b903      	cbnz	r3, 8004e10 <__sflush_r+0x78>
 8004e0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004e12:	602f      	str	r7, [r5, #0]
 8004e14:	b1b9      	cbz	r1, 8004e46 <__sflush_r+0xae>
 8004e16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004e1a:	4299      	cmp	r1, r3
 8004e1c:	d002      	beq.n	8004e24 <__sflush_r+0x8c>
 8004e1e:	4628      	mov	r0, r5
 8004e20:	f000 fb00 	bl	8005424 <_free_r>
 8004e24:	2300      	movs	r3, #0
 8004e26:	6363      	str	r3, [r4, #52]	@ 0x34
 8004e28:	e00d      	b.n	8004e46 <__sflush_r+0xae>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4628      	mov	r0, r5
 8004e2e:	47b0      	blx	r6
 8004e30:	4602      	mov	r2, r0
 8004e32:	1c50      	adds	r0, r2, #1
 8004e34:	d1c9      	bne.n	8004dca <__sflush_r+0x32>
 8004e36:	682b      	ldr	r3, [r5, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0c6      	beq.n	8004dca <__sflush_r+0x32>
 8004e3c:	2b1d      	cmp	r3, #29
 8004e3e:	d001      	beq.n	8004e44 <__sflush_r+0xac>
 8004e40:	2b16      	cmp	r3, #22
 8004e42:	d11e      	bne.n	8004e82 <__sflush_r+0xea>
 8004e44:	602f      	str	r7, [r5, #0]
 8004e46:	2000      	movs	r0, #0
 8004e48:	e022      	b.n	8004e90 <__sflush_r+0xf8>
 8004e4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e4e:	b21b      	sxth	r3, r3
 8004e50:	e01b      	b.n	8004e8a <__sflush_r+0xf2>
 8004e52:	690f      	ldr	r7, [r1, #16]
 8004e54:	2f00      	cmp	r7, #0
 8004e56:	d0f6      	beq.n	8004e46 <__sflush_r+0xae>
 8004e58:	0793      	lsls	r3, r2, #30
 8004e5a:	680e      	ldr	r6, [r1, #0]
 8004e5c:	bf08      	it	eq
 8004e5e:	694b      	ldreq	r3, [r1, #20]
 8004e60:	600f      	str	r7, [r1, #0]
 8004e62:	bf18      	it	ne
 8004e64:	2300      	movne	r3, #0
 8004e66:	eba6 0807 	sub.w	r8, r6, r7
 8004e6a:	608b      	str	r3, [r1, #8]
 8004e6c:	f1b8 0f00 	cmp.w	r8, #0
 8004e70:	dde9      	ble.n	8004e46 <__sflush_r+0xae>
 8004e72:	6a21      	ldr	r1, [r4, #32]
 8004e74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004e76:	4643      	mov	r3, r8
 8004e78:	463a      	mov	r2, r7
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	47b0      	blx	r6
 8004e7e:	2800      	cmp	r0, #0
 8004e80:	dc08      	bgt.n	8004e94 <__sflush_r+0xfc>
 8004e82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e8a:	81a3      	strh	r3, [r4, #12]
 8004e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e94:	4407      	add	r7, r0
 8004e96:	eba8 0800 	sub.w	r8, r8, r0
 8004e9a:	e7e7      	b.n	8004e6c <__sflush_r+0xd4>
 8004e9c:	dfbffffe 	.word	0xdfbffffe

08004ea0 <_fflush_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	690b      	ldr	r3, [r1, #16]
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	b913      	cbnz	r3, 8004eb0 <_fflush_r+0x10>
 8004eaa:	2500      	movs	r5, #0
 8004eac:	4628      	mov	r0, r5
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	b118      	cbz	r0, 8004eba <_fflush_r+0x1a>
 8004eb2:	6a03      	ldr	r3, [r0, #32]
 8004eb4:	b90b      	cbnz	r3, 8004eba <_fflush_r+0x1a>
 8004eb6:	f000 f8bb 	bl	8005030 <__sinit>
 8004eba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f3      	beq.n	8004eaa <_fflush_r+0xa>
 8004ec2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004ec4:	07d0      	lsls	r0, r2, #31
 8004ec6:	d404      	bmi.n	8004ed2 <_fflush_r+0x32>
 8004ec8:	0599      	lsls	r1, r3, #22
 8004eca:	d402      	bmi.n	8004ed2 <_fflush_r+0x32>
 8004ecc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ece:	f000 faa6 	bl	800541e <__retarget_lock_acquire_recursive>
 8004ed2:	4628      	mov	r0, r5
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	f7ff ff5f 	bl	8004d98 <__sflush_r>
 8004eda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004edc:	07da      	lsls	r2, r3, #31
 8004ede:	4605      	mov	r5, r0
 8004ee0:	d4e4      	bmi.n	8004eac <_fflush_r+0xc>
 8004ee2:	89a3      	ldrh	r3, [r4, #12]
 8004ee4:	059b      	lsls	r3, r3, #22
 8004ee6:	d4e1      	bmi.n	8004eac <_fflush_r+0xc>
 8004ee8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004eea:	f000 fa99 	bl	8005420 <__retarget_lock_release_recursive>
 8004eee:	e7dd      	b.n	8004eac <_fflush_r+0xc>

08004ef0 <fflush>:
 8004ef0:	4601      	mov	r1, r0
 8004ef2:	b920      	cbnz	r0, 8004efe <fflush+0xe>
 8004ef4:	4a04      	ldr	r2, [pc, #16]	@ (8004f08 <fflush+0x18>)
 8004ef6:	4905      	ldr	r1, [pc, #20]	@ (8004f0c <fflush+0x1c>)
 8004ef8:	4805      	ldr	r0, [pc, #20]	@ (8004f10 <fflush+0x20>)
 8004efa:	f000 b8b1 	b.w	8005060 <_fwalk_sglue>
 8004efe:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <fflush+0x24>)
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	f7ff bfcd 	b.w	8004ea0 <_fflush_r>
 8004f06:	bf00      	nop
 8004f08:	20000034 	.word	0x20000034
 8004f0c:	08004ea1 	.word	0x08004ea1
 8004f10:	20000044 	.word	0x20000044
 8004f14:	20000040 	.word	0x20000040

08004f18 <std>:
 8004f18:	2300      	movs	r3, #0
 8004f1a:	b510      	push	{r4, lr}
 8004f1c:	4604      	mov	r4, r0
 8004f1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004f22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f26:	6083      	str	r3, [r0, #8]
 8004f28:	8181      	strh	r1, [r0, #12]
 8004f2a:	6643      	str	r3, [r0, #100]	@ 0x64
 8004f2c:	81c2      	strh	r2, [r0, #14]
 8004f2e:	6183      	str	r3, [r0, #24]
 8004f30:	4619      	mov	r1, r3
 8004f32:	2208      	movs	r2, #8
 8004f34:	305c      	adds	r0, #92	@ 0x5c
 8004f36:	f000 f9f9 	bl	800532c <memset>
 8004f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <std+0x58>)
 8004f3c:	6263      	str	r3, [r4, #36]	@ 0x24
 8004f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8004f74 <std+0x5c>)
 8004f40:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004f42:	4b0d      	ldr	r3, [pc, #52]	@ (8004f78 <std+0x60>)
 8004f44:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004f46:	4b0d      	ldr	r3, [pc, #52]	@ (8004f7c <std+0x64>)
 8004f48:	6323      	str	r3, [r4, #48]	@ 0x30
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8004f80 <std+0x68>)
 8004f4c:	6224      	str	r4, [r4, #32]
 8004f4e:	429c      	cmp	r4, r3
 8004f50:	d006      	beq.n	8004f60 <std+0x48>
 8004f52:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004f56:	4294      	cmp	r4, r2
 8004f58:	d002      	beq.n	8004f60 <std+0x48>
 8004f5a:	33d0      	adds	r3, #208	@ 0xd0
 8004f5c:	429c      	cmp	r4, r3
 8004f5e:	d105      	bne.n	8004f6c <std+0x54>
 8004f60:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f68:	f000 ba58 	b.w	800541c <__retarget_lock_init_recursive>
 8004f6c:	bd10      	pop	{r4, pc}
 8004f6e:	bf00      	nop
 8004f70:	0800517d 	.word	0x0800517d
 8004f74:	0800519f 	.word	0x0800519f
 8004f78:	080051d7 	.word	0x080051d7
 8004f7c:	080051fb 	.word	0x080051fb
 8004f80:	20000240 	.word	0x20000240

08004f84 <stdio_exit_handler>:
 8004f84:	4a02      	ldr	r2, [pc, #8]	@ (8004f90 <stdio_exit_handler+0xc>)
 8004f86:	4903      	ldr	r1, [pc, #12]	@ (8004f94 <stdio_exit_handler+0x10>)
 8004f88:	4803      	ldr	r0, [pc, #12]	@ (8004f98 <stdio_exit_handler+0x14>)
 8004f8a:	f000 b869 	b.w	8005060 <_fwalk_sglue>
 8004f8e:	bf00      	nop
 8004f90:	20000034 	.word	0x20000034
 8004f94:	08004ea1 	.word	0x08004ea1
 8004f98:	20000044 	.word	0x20000044

08004f9c <cleanup_stdio>:
 8004f9c:	6841      	ldr	r1, [r0, #4]
 8004f9e:	4b0c      	ldr	r3, [pc, #48]	@ (8004fd0 <cleanup_stdio+0x34>)
 8004fa0:	4299      	cmp	r1, r3
 8004fa2:	b510      	push	{r4, lr}
 8004fa4:	4604      	mov	r4, r0
 8004fa6:	d001      	beq.n	8004fac <cleanup_stdio+0x10>
 8004fa8:	f7ff ff7a 	bl	8004ea0 <_fflush_r>
 8004fac:	68a1      	ldr	r1, [r4, #8]
 8004fae:	4b09      	ldr	r3, [pc, #36]	@ (8004fd4 <cleanup_stdio+0x38>)
 8004fb0:	4299      	cmp	r1, r3
 8004fb2:	d002      	beq.n	8004fba <cleanup_stdio+0x1e>
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	f7ff ff73 	bl	8004ea0 <_fflush_r>
 8004fba:	68e1      	ldr	r1, [r4, #12]
 8004fbc:	4b06      	ldr	r3, [pc, #24]	@ (8004fd8 <cleanup_stdio+0x3c>)
 8004fbe:	4299      	cmp	r1, r3
 8004fc0:	d004      	beq.n	8004fcc <cleanup_stdio+0x30>
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fc8:	f7ff bf6a 	b.w	8004ea0 <_fflush_r>
 8004fcc:	bd10      	pop	{r4, pc}
 8004fce:	bf00      	nop
 8004fd0:	20000240 	.word	0x20000240
 8004fd4:	200002a8 	.word	0x200002a8
 8004fd8:	20000310 	.word	0x20000310

08004fdc <global_stdio_init.part.0>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	4b0b      	ldr	r3, [pc, #44]	@ (800500c <global_stdio_init.part.0+0x30>)
 8004fe0:	4c0b      	ldr	r4, [pc, #44]	@ (8005010 <global_stdio_init.part.0+0x34>)
 8004fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8005014 <global_stdio_init.part.0+0x38>)
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	2200      	movs	r2, #0
 8004fea:	2104      	movs	r1, #4
 8004fec:	f7ff ff94 	bl	8004f18 <std>
 8004ff0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	2109      	movs	r1, #9
 8004ff8:	f7ff ff8e 	bl	8004f18 <std>
 8004ffc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005000:	2202      	movs	r2, #2
 8005002:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005006:	2112      	movs	r1, #18
 8005008:	f7ff bf86 	b.w	8004f18 <std>
 800500c:	20000378 	.word	0x20000378
 8005010:	20000240 	.word	0x20000240
 8005014:	08004f85 	.word	0x08004f85

08005018 <__sfp_lock_acquire>:
 8005018:	4801      	ldr	r0, [pc, #4]	@ (8005020 <__sfp_lock_acquire+0x8>)
 800501a:	f000 ba00 	b.w	800541e <__retarget_lock_acquire_recursive>
 800501e:	bf00      	nop
 8005020:	20000381 	.word	0x20000381

08005024 <__sfp_lock_release>:
 8005024:	4801      	ldr	r0, [pc, #4]	@ (800502c <__sfp_lock_release+0x8>)
 8005026:	f000 b9fb 	b.w	8005420 <__retarget_lock_release_recursive>
 800502a:	bf00      	nop
 800502c:	20000381 	.word	0x20000381

08005030 <__sinit>:
 8005030:	b510      	push	{r4, lr}
 8005032:	4604      	mov	r4, r0
 8005034:	f7ff fff0 	bl	8005018 <__sfp_lock_acquire>
 8005038:	6a23      	ldr	r3, [r4, #32]
 800503a:	b11b      	cbz	r3, 8005044 <__sinit+0x14>
 800503c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005040:	f7ff bff0 	b.w	8005024 <__sfp_lock_release>
 8005044:	4b04      	ldr	r3, [pc, #16]	@ (8005058 <__sinit+0x28>)
 8005046:	6223      	str	r3, [r4, #32]
 8005048:	4b04      	ldr	r3, [pc, #16]	@ (800505c <__sinit+0x2c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f5      	bne.n	800503c <__sinit+0xc>
 8005050:	f7ff ffc4 	bl	8004fdc <global_stdio_init.part.0>
 8005054:	e7f2      	b.n	800503c <__sinit+0xc>
 8005056:	bf00      	nop
 8005058:	08004f9d 	.word	0x08004f9d
 800505c:	20000378 	.word	0x20000378

08005060 <_fwalk_sglue>:
 8005060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005064:	4607      	mov	r7, r0
 8005066:	4688      	mov	r8, r1
 8005068:	4614      	mov	r4, r2
 800506a:	2600      	movs	r6, #0
 800506c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005070:	f1b9 0901 	subs.w	r9, r9, #1
 8005074:	d505      	bpl.n	8005082 <_fwalk_sglue+0x22>
 8005076:	6824      	ldr	r4, [r4, #0]
 8005078:	2c00      	cmp	r4, #0
 800507a:	d1f7      	bne.n	800506c <_fwalk_sglue+0xc>
 800507c:	4630      	mov	r0, r6
 800507e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005082:	89ab      	ldrh	r3, [r5, #12]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d907      	bls.n	8005098 <_fwalk_sglue+0x38>
 8005088:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800508c:	3301      	adds	r3, #1
 800508e:	d003      	beq.n	8005098 <_fwalk_sglue+0x38>
 8005090:	4629      	mov	r1, r5
 8005092:	4638      	mov	r0, r7
 8005094:	47c0      	blx	r8
 8005096:	4306      	orrs	r6, r0
 8005098:	3568      	adds	r5, #104	@ 0x68
 800509a:	e7e9      	b.n	8005070 <_fwalk_sglue+0x10>

0800509c <iprintf>:
 800509c:	b40f      	push	{r0, r1, r2, r3}
 800509e:	b507      	push	{r0, r1, r2, lr}
 80050a0:	4906      	ldr	r1, [pc, #24]	@ (80050bc <iprintf+0x20>)
 80050a2:	ab04      	add	r3, sp, #16
 80050a4:	6808      	ldr	r0, [r1, #0]
 80050a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80050aa:	6881      	ldr	r1, [r0, #8]
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	f000 fadb 	bl	8005668 <_vfiprintf_r>
 80050b2:	b003      	add	sp, #12
 80050b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80050b8:	b004      	add	sp, #16
 80050ba:	4770      	bx	lr
 80050bc:	20000040 	.word	0x20000040

080050c0 <_puts_r>:
 80050c0:	6a03      	ldr	r3, [r0, #32]
 80050c2:	b570      	push	{r4, r5, r6, lr}
 80050c4:	6884      	ldr	r4, [r0, #8]
 80050c6:	4605      	mov	r5, r0
 80050c8:	460e      	mov	r6, r1
 80050ca:	b90b      	cbnz	r3, 80050d0 <_puts_r+0x10>
 80050cc:	f7ff ffb0 	bl	8005030 <__sinit>
 80050d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050d2:	07db      	lsls	r3, r3, #31
 80050d4:	d405      	bmi.n	80050e2 <_puts_r+0x22>
 80050d6:	89a3      	ldrh	r3, [r4, #12]
 80050d8:	0598      	lsls	r0, r3, #22
 80050da:	d402      	bmi.n	80050e2 <_puts_r+0x22>
 80050dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050de:	f000 f99e 	bl	800541e <__retarget_lock_acquire_recursive>
 80050e2:	89a3      	ldrh	r3, [r4, #12]
 80050e4:	0719      	lsls	r1, r3, #28
 80050e6:	d502      	bpl.n	80050ee <_puts_r+0x2e>
 80050e8:	6923      	ldr	r3, [r4, #16]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d135      	bne.n	800515a <_puts_r+0x9a>
 80050ee:	4621      	mov	r1, r4
 80050f0:	4628      	mov	r0, r5
 80050f2:	f000 f8c5 	bl	8005280 <__swsetup_r>
 80050f6:	b380      	cbz	r0, 800515a <_puts_r+0x9a>
 80050f8:	f04f 35ff 	mov.w	r5, #4294967295
 80050fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050fe:	07da      	lsls	r2, r3, #31
 8005100:	d405      	bmi.n	800510e <_puts_r+0x4e>
 8005102:	89a3      	ldrh	r3, [r4, #12]
 8005104:	059b      	lsls	r3, r3, #22
 8005106:	d402      	bmi.n	800510e <_puts_r+0x4e>
 8005108:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800510a:	f000 f989 	bl	8005420 <__retarget_lock_release_recursive>
 800510e:	4628      	mov	r0, r5
 8005110:	bd70      	pop	{r4, r5, r6, pc}
 8005112:	2b00      	cmp	r3, #0
 8005114:	da04      	bge.n	8005120 <_puts_r+0x60>
 8005116:	69a2      	ldr	r2, [r4, #24]
 8005118:	429a      	cmp	r2, r3
 800511a:	dc17      	bgt.n	800514c <_puts_r+0x8c>
 800511c:	290a      	cmp	r1, #10
 800511e:	d015      	beq.n	800514c <_puts_r+0x8c>
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	6022      	str	r2, [r4, #0]
 8005126:	7019      	strb	r1, [r3, #0]
 8005128:	68a3      	ldr	r3, [r4, #8]
 800512a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800512e:	3b01      	subs	r3, #1
 8005130:	60a3      	str	r3, [r4, #8]
 8005132:	2900      	cmp	r1, #0
 8005134:	d1ed      	bne.n	8005112 <_puts_r+0x52>
 8005136:	2b00      	cmp	r3, #0
 8005138:	da11      	bge.n	800515e <_puts_r+0x9e>
 800513a:	4622      	mov	r2, r4
 800513c:	210a      	movs	r1, #10
 800513e:	4628      	mov	r0, r5
 8005140:	f000 f85f 	bl	8005202 <__swbuf_r>
 8005144:	3001      	adds	r0, #1
 8005146:	d0d7      	beq.n	80050f8 <_puts_r+0x38>
 8005148:	250a      	movs	r5, #10
 800514a:	e7d7      	b.n	80050fc <_puts_r+0x3c>
 800514c:	4622      	mov	r2, r4
 800514e:	4628      	mov	r0, r5
 8005150:	f000 f857 	bl	8005202 <__swbuf_r>
 8005154:	3001      	adds	r0, #1
 8005156:	d1e7      	bne.n	8005128 <_puts_r+0x68>
 8005158:	e7ce      	b.n	80050f8 <_puts_r+0x38>
 800515a:	3e01      	subs	r6, #1
 800515c:	e7e4      	b.n	8005128 <_puts_r+0x68>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	1c5a      	adds	r2, r3, #1
 8005162:	6022      	str	r2, [r4, #0]
 8005164:	220a      	movs	r2, #10
 8005166:	701a      	strb	r2, [r3, #0]
 8005168:	e7ee      	b.n	8005148 <_puts_r+0x88>
	...

0800516c <puts>:
 800516c:	4b02      	ldr	r3, [pc, #8]	@ (8005178 <puts+0xc>)
 800516e:	4601      	mov	r1, r0
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	f7ff bfa5 	b.w	80050c0 <_puts_r>
 8005176:	bf00      	nop
 8005178:	20000040 	.word	0x20000040

0800517c <__sread>:
 800517c:	b510      	push	{r4, lr}
 800517e:	460c      	mov	r4, r1
 8005180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005184:	f000 f8fc 	bl	8005380 <_read_r>
 8005188:	2800      	cmp	r0, #0
 800518a:	bfab      	itete	ge
 800518c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800518e:	89a3      	ldrhlt	r3, [r4, #12]
 8005190:	181b      	addge	r3, r3, r0
 8005192:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005196:	bfac      	ite	ge
 8005198:	6563      	strge	r3, [r4, #84]	@ 0x54
 800519a:	81a3      	strhlt	r3, [r4, #12]
 800519c:	bd10      	pop	{r4, pc}

0800519e <__swrite>:
 800519e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051a2:	461f      	mov	r7, r3
 80051a4:	898b      	ldrh	r3, [r1, #12]
 80051a6:	05db      	lsls	r3, r3, #23
 80051a8:	4605      	mov	r5, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	4616      	mov	r6, r2
 80051ae:	d505      	bpl.n	80051bc <__swrite+0x1e>
 80051b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051b4:	2302      	movs	r3, #2
 80051b6:	2200      	movs	r2, #0
 80051b8:	f000 f8d0 	bl	800535c <_lseek_r>
 80051bc:	89a3      	ldrh	r3, [r4, #12]
 80051be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80051c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80051c6:	81a3      	strh	r3, [r4, #12]
 80051c8:	4632      	mov	r2, r6
 80051ca:	463b      	mov	r3, r7
 80051cc:	4628      	mov	r0, r5
 80051ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80051d2:	f000 b8e7 	b.w	80053a4 <_write_r>

080051d6 <__sseek>:
 80051d6:	b510      	push	{r4, lr}
 80051d8:	460c      	mov	r4, r1
 80051da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051de:	f000 f8bd 	bl	800535c <_lseek_r>
 80051e2:	1c43      	adds	r3, r0, #1
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	bf15      	itete	ne
 80051e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80051ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80051ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80051f2:	81a3      	strheq	r3, [r4, #12]
 80051f4:	bf18      	it	ne
 80051f6:	81a3      	strhne	r3, [r4, #12]
 80051f8:	bd10      	pop	{r4, pc}

080051fa <__sclose>:
 80051fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80051fe:	f000 b89d 	b.w	800533c <_close_r>

08005202 <__swbuf_r>:
 8005202:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005204:	460e      	mov	r6, r1
 8005206:	4614      	mov	r4, r2
 8005208:	4605      	mov	r5, r0
 800520a:	b118      	cbz	r0, 8005214 <__swbuf_r+0x12>
 800520c:	6a03      	ldr	r3, [r0, #32]
 800520e:	b90b      	cbnz	r3, 8005214 <__swbuf_r+0x12>
 8005210:	f7ff ff0e 	bl	8005030 <__sinit>
 8005214:	69a3      	ldr	r3, [r4, #24]
 8005216:	60a3      	str	r3, [r4, #8]
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	071a      	lsls	r2, r3, #28
 800521c:	d501      	bpl.n	8005222 <__swbuf_r+0x20>
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	b943      	cbnz	r3, 8005234 <__swbuf_r+0x32>
 8005222:	4621      	mov	r1, r4
 8005224:	4628      	mov	r0, r5
 8005226:	f000 f82b 	bl	8005280 <__swsetup_r>
 800522a:	b118      	cbz	r0, 8005234 <__swbuf_r+0x32>
 800522c:	f04f 37ff 	mov.w	r7, #4294967295
 8005230:	4638      	mov	r0, r7
 8005232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005234:	6823      	ldr	r3, [r4, #0]
 8005236:	6922      	ldr	r2, [r4, #16]
 8005238:	1a98      	subs	r0, r3, r2
 800523a:	6963      	ldr	r3, [r4, #20]
 800523c:	b2f6      	uxtb	r6, r6
 800523e:	4283      	cmp	r3, r0
 8005240:	4637      	mov	r7, r6
 8005242:	dc05      	bgt.n	8005250 <__swbuf_r+0x4e>
 8005244:	4621      	mov	r1, r4
 8005246:	4628      	mov	r0, r5
 8005248:	f7ff fe2a 	bl	8004ea0 <_fflush_r>
 800524c:	2800      	cmp	r0, #0
 800524e:	d1ed      	bne.n	800522c <__swbuf_r+0x2a>
 8005250:	68a3      	ldr	r3, [r4, #8]
 8005252:	3b01      	subs	r3, #1
 8005254:	60a3      	str	r3, [r4, #8]
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	6022      	str	r2, [r4, #0]
 800525c:	701e      	strb	r6, [r3, #0]
 800525e:	6962      	ldr	r2, [r4, #20]
 8005260:	1c43      	adds	r3, r0, #1
 8005262:	429a      	cmp	r2, r3
 8005264:	d004      	beq.n	8005270 <__swbuf_r+0x6e>
 8005266:	89a3      	ldrh	r3, [r4, #12]
 8005268:	07db      	lsls	r3, r3, #31
 800526a:	d5e1      	bpl.n	8005230 <__swbuf_r+0x2e>
 800526c:	2e0a      	cmp	r6, #10
 800526e:	d1df      	bne.n	8005230 <__swbuf_r+0x2e>
 8005270:	4621      	mov	r1, r4
 8005272:	4628      	mov	r0, r5
 8005274:	f7ff fe14 	bl	8004ea0 <_fflush_r>
 8005278:	2800      	cmp	r0, #0
 800527a:	d0d9      	beq.n	8005230 <__swbuf_r+0x2e>
 800527c:	e7d6      	b.n	800522c <__swbuf_r+0x2a>
	...

08005280 <__swsetup_r>:
 8005280:	b538      	push	{r3, r4, r5, lr}
 8005282:	4b29      	ldr	r3, [pc, #164]	@ (8005328 <__swsetup_r+0xa8>)
 8005284:	4605      	mov	r5, r0
 8005286:	6818      	ldr	r0, [r3, #0]
 8005288:	460c      	mov	r4, r1
 800528a:	b118      	cbz	r0, 8005294 <__swsetup_r+0x14>
 800528c:	6a03      	ldr	r3, [r0, #32]
 800528e:	b90b      	cbnz	r3, 8005294 <__swsetup_r+0x14>
 8005290:	f7ff fece 	bl	8005030 <__sinit>
 8005294:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005298:	0719      	lsls	r1, r3, #28
 800529a:	d422      	bmi.n	80052e2 <__swsetup_r+0x62>
 800529c:	06da      	lsls	r2, r3, #27
 800529e:	d407      	bmi.n	80052b0 <__swsetup_r+0x30>
 80052a0:	2209      	movs	r2, #9
 80052a2:	602a      	str	r2, [r5, #0]
 80052a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052a8:	81a3      	strh	r3, [r4, #12]
 80052aa:	f04f 30ff 	mov.w	r0, #4294967295
 80052ae:	e033      	b.n	8005318 <__swsetup_r+0x98>
 80052b0:	0758      	lsls	r0, r3, #29
 80052b2:	d512      	bpl.n	80052da <__swsetup_r+0x5a>
 80052b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052b6:	b141      	cbz	r1, 80052ca <__swsetup_r+0x4a>
 80052b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052bc:	4299      	cmp	r1, r3
 80052be:	d002      	beq.n	80052c6 <__swsetup_r+0x46>
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 f8af 	bl	8005424 <_free_r>
 80052c6:	2300      	movs	r3, #0
 80052c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80052ca:	89a3      	ldrh	r3, [r4, #12]
 80052cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80052d0:	81a3      	strh	r3, [r4, #12]
 80052d2:	2300      	movs	r3, #0
 80052d4:	6063      	str	r3, [r4, #4]
 80052d6:	6923      	ldr	r3, [r4, #16]
 80052d8:	6023      	str	r3, [r4, #0]
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	f043 0308 	orr.w	r3, r3, #8
 80052e0:	81a3      	strh	r3, [r4, #12]
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	b94b      	cbnz	r3, 80052fa <__swsetup_r+0x7a>
 80052e6:	89a3      	ldrh	r3, [r4, #12]
 80052e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80052ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f0:	d003      	beq.n	80052fa <__swsetup_r+0x7a>
 80052f2:	4621      	mov	r1, r4
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 fc83 	bl	8005c00 <__smakebuf_r>
 80052fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052fe:	f013 0201 	ands.w	r2, r3, #1
 8005302:	d00a      	beq.n	800531a <__swsetup_r+0x9a>
 8005304:	2200      	movs	r2, #0
 8005306:	60a2      	str	r2, [r4, #8]
 8005308:	6962      	ldr	r2, [r4, #20]
 800530a:	4252      	negs	r2, r2
 800530c:	61a2      	str	r2, [r4, #24]
 800530e:	6922      	ldr	r2, [r4, #16]
 8005310:	b942      	cbnz	r2, 8005324 <__swsetup_r+0xa4>
 8005312:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005316:	d1c5      	bne.n	80052a4 <__swsetup_r+0x24>
 8005318:	bd38      	pop	{r3, r4, r5, pc}
 800531a:	0799      	lsls	r1, r3, #30
 800531c:	bf58      	it	pl
 800531e:	6962      	ldrpl	r2, [r4, #20]
 8005320:	60a2      	str	r2, [r4, #8]
 8005322:	e7f4      	b.n	800530e <__swsetup_r+0x8e>
 8005324:	2000      	movs	r0, #0
 8005326:	e7f7      	b.n	8005318 <__swsetup_r+0x98>
 8005328:	20000040 	.word	0x20000040

0800532c <memset>:
 800532c:	4402      	add	r2, r0
 800532e:	4603      	mov	r3, r0
 8005330:	4293      	cmp	r3, r2
 8005332:	d100      	bne.n	8005336 <memset+0xa>
 8005334:	4770      	bx	lr
 8005336:	f803 1b01 	strb.w	r1, [r3], #1
 800533a:	e7f9      	b.n	8005330 <memset+0x4>

0800533c <_close_r>:
 800533c:	b538      	push	{r3, r4, r5, lr}
 800533e:	4d06      	ldr	r5, [pc, #24]	@ (8005358 <_close_r+0x1c>)
 8005340:	2300      	movs	r3, #0
 8005342:	4604      	mov	r4, r0
 8005344:	4608      	mov	r0, r1
 8005346:	602b      	str	r3, [r5, #0]
 8005348:	f7fb ff97 	bl	800127a <_close>
 800534c:	1c43      	adds	r3, r0, #1
 800534e:	d102      	bne.n	8005356 <_close_r+0x1a>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	b103      	cbz	r3, 8005356 <_close_r+0x1a>
 8005354:	6023      	str	r3, [r4, #0]
 8005356:	bd38      	pop	{r3, r4, r5, pc}
 8005358:	2000037c 	.word	0x2000037c

0800535c <_lseek_r>:
 800535c:	b538      	push	{r3, r4, r5, lr}
 800535e:	4d07      	ldr	r5, [pc, #28]	@ (800537c <_lseek_r+0x20>)
 8005360:	4604      	mov	r4, r0
 8005362:	4608      	mov	r0, r1
 8005364:	4611      	mov	r1, r2
 8005366:	2200      	movs	r2, #0
 8005368:	602a      	str	r2, [r5, #0]
 800536a:	461a      	mov	r2, r3
 800536c:	f7fb ffac 	bl	80012c8 <_lseek>
 8005370:	1c43      	adds	r3, r0, #1
 8005372:	d102      	bne.n	800537a <_lseek_r+0x1e>
 8005374:	682b      	ldr	r3, [r5, #0]
 8005376:	b103      	cbz	r3, 800537a <_lseek_r+0x1e>
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	bd38      	pop	{r3, r4, r5, pc}
 800537c:	2000037c 	.word	0x2000037c

08005380 <_read_r>:
 8005380:	b538      	push	{r3, r4, r5, lr}
 8005382:	4d07      	ldr	r5, [pc, #28]	@ (80053a0 <_read_r+0x20>)
 8005384:	4604      	mov	r4, r0
 8005386:	4608      	mov	r0, r1
 8005388:	4611      	mov	r1, r2
 800538a:	2200      	movs	r2, #0
 800538c:	602a      	str	r2, [r5, #0]
 800538e:	461a      	mov	r2, r3
 8005390:	f7fb ff56 	bl	8001240 <_read>
 8005394:	1c43      	adds	r3, r0, #1
 8005396:	d102      	bne.n	800539e <_read_r+0x1e>
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	b103      	cbz	r3, 800539e <_read_r+0x1e>
 800539c:	6023      	str	r3, [r4, #0]
 800539e:	bd38      	pop	{r3, r4, r5, pc}
 80053a0:	2000037c 	.word	0x2000037c

080053a4 <_write_r>:
 80053a4:	b538      	push	{r3, r4, r5, lr}
 80053a6:	4d07      	ldr	r5, [pc, #28]	@ (80053c4 <_write_r+0x20>)
 80053a8:	4604      	mov	r4, r0
 80053aa:	4608      	mov	r0, r1
 80053ac:	4611      	mov	r1, r2
 80053ae:	2200      	movs	r2, #0
 80053b0:	602a      	str	r2, [r5, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f7fb fbe2 	bl	8000b7c <_write>
 80053b8:	1c43      	adds	r3, r0, #1
 80053ba:	d102      	bne.n	80053c2 <_write_r+0x1e>
 80053bc:	682b      	ldr	r3, [r5, #0]
 80053be:	b103      	cbz	r3, 80053c2 <_write_r+0x1e>
 80053c0:	6023      	str	r3, [r4, #0]
 80053c2:	bd38      	pop	{r3, r4, r5, pc}
 80053c4:	2000037c 	.word	0x2000037c

080053c8 <__errno>:
 80053c8:	4b01      	ldr	r3, [pc, #4]	@ (80053d0 <__errno+0x8>)
 80053ca:	6818      	ldr	r0, [r3, #0]
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	20000040 	.word	0x20000040

080053d4 <__libc_init_array>:
 80053d4:	b570      	push	{r4, r5, r6, lr}
 80053d6:	4d0d      	ldr	r5, [pc, #52]	@ (800540c <__libc_init_array+0x38>)
 80053d8:	4c0d      	ldr	r4, [pc, #52]	@ (8005410 <__libc_init_array+0x3c>)
 80053da:	1b64      	subs	r4, r4, r5
 80053dc:	10a4      	asrs	r4, r4, #2
 80053de:	2600      	movs	r6, #0
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	d109      	bne.n	80053f8 <__libc_init_array+0x24>
 80053e4:	4d0b      	ldr	r5, [pc, #44]	@ (8005414 <__libc_init_array+0x40>)
 80053e6:	4c0c      	ldr	r4, [pc, #48]	@ (8005418 <__libc_init_array+0x44>)
 80053e8:	f000 fc78 	bl	8005cdc <_init>
 80053ec:	1b64      	subs	r4, r4, r5
 80053ee:	10a4      	asrs	r4, r4, #2
 80053f0:	2600      	movs	r6, #0
 80053f2:	42a6      	cmp	r6, r4
 80053f4:	d105      	bne.n	8005402 <__libc_init_array+0x2e>
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
 80053f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fc:	4798      	blx	r3
 80053fe:	3601      	adds	r6, #1
 8005400:	e7ee      	b.n	80053e0 <__libc_init_array+0xc>
 8005402:	f855 3b04 	ldr.w	r3, [r5], #4
 8005406:	4798      	blx	r3
 8005408:	3601      	adds	r6, #1
 800540a:	e7f2      	b.n	80053f2 <__libc_init_array+0x1e>
 800540c:	08005db4 	.word	0x08005db4
 8005410:	08005db4 	.word	0x08005db4
 8005414:	08005db4 	.word	0x08005db4
 8005418:	08005db8 	.word	0x08005db8

0800541c <__retarget_lock_init_recursive>:
 800541c:	4770      	bx	lr

0800541e <__retarget_lock_acquire_recursive>:
 800541e:	4770      	bx	lr

08005420 <__retarget_lock_release_recursive>:
 8005420:	4770      	bx	lr
	...

08005424 <_free_r>:
 8005424:	b538      	push	{r3, r4, r5, lr}
 8005426:	4605      	mov	r5, r0
 8005428:	2900      	cmp	r1, #0
 800542a:	d041      	beq.n	80054b0 <_free_r+0x8c>
 800542c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005430:	1f0c      	subs	r4, r1, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	bfb8      	it	lt
 8005436:	18e4      	addlt	r4, r4, r3
 8005438:	f000 f8e0 	bl	80055fc <__malloc_lock>
 800543c:	4a1d      	ldr	r2, [pc, #116]	@ (80054b4 <_free_r+0x90>)
 800543e:	6813      	ldr	r3, [r2, #0]
 8005440:	b933      	cbnz	r3, 8005450 <_free_r+0x2c>
 8005442:	6063      	str	r3, [r4, #4]
 8005444:	6014      	str	r4, [r2, #0]
 8005446:	4628      	mov	r0, r5
 8005448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800544c:	f000 b8dc 	b.w	8005608 <__malloc_unlock>
 8005450:	42a3      	cmp	r3, r4
 8005452:	d908      	bls.n	8005466 <_free_r+0x42>
 8005454:	6820      	ldr	r0, [r4, #0]
 8005456:	1821      	adds	r1, r4, r0
 8005458:	428b      	cmp	r3, r1
 800545a:	bf01      	itttt	eq
 800545c:	6819      	ldreq	r1, [r3, #0]
 800545e:	685b      	ldreq	r3, [r3, #4]
 8005460:	1809      	addeq	r1, r1, r0
 8005462:	6021      	streq	r1, [r4, #0]
 8005464:	e7ed      	b.n	8005442 <_free_r+0x1e>
 8005466:	461a      	mov	r2, r3
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	b10b      	cbz	r3, 8005470 <_free_r+0x4c>
 800546c:	42a3      	cmp	r3, r4
 800546e:	d9fa      	bls.n	8005466 <_free_r+0x42>
 8005470:	6811      	ldr	r1, [r2, #0]
 8005472:	1850      	adds	r0, r2, r1
 8005474:	42a0      	cmp	r0, r4
 8005476:	d10b      	bne.n	8005490 <_free_r+0x6c>
 8005478:	6820      	ldr	r0, [r4, #0]
 800547a:	4401      	add	r1, r0
 800547c:	1850      	adds	r0, r2, r1
 800547e:	4283      	cmp	r3, r0
 8005480:	6011      	str	r1, [r2, #0]
 8005482:	d1e0      	bne.n	8005446 <_free_r+0x22>
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	6053      	str	r3, [r2, #4]
 800548a:	4408      	add	r0, r1
 800548c:	6010      	str	r0, [r2, #0]
 800548e:	e7da      	b.n	8005446 <_free_r+0x22>
 8005490:	d902      	bls.n	8005498 <_free_r+0x74>
 8005492:	230c      	movs	r3, #12
 8005494:	602b      	str	r3, [r5, #0]
 8005496:	e7d6      	b.n	8005446 <_free_r+0x22>
 8005498:	6820      	ldr	r0, [r4, #0]
 800549a:	1821      	adds	r1, r4, r0
 800549c:	428b      	cmp	r3, r1
 800549e:	bf04      	itt	eq
 80054a0:	6819      	ldreq	r1, [r3, #0]
 80054a2:	685b      	ldreq	r3, [r3, #4]
 80054a4:	6063      	str	r3, [r4, #4]
 80054a6:	bf04      	itt	eq
 80054a8:	1809      	addeq	r1, r1, r0
 80054aa:	6021      	streq	r1, [r4, #0]
 80054ac:	6054      	str	r4, [r2, #4]
 80054ae:	e7ca      	b.n	8005446 <_free_r+0x22>
 80054b0:	bd38      	pop	{r3, r4, r5, pc}
 80054b2:	bf00      	nop
 80054b4:	20000388 	.word	0x20000388

080054b8 <sbrk_aligned>:
 80054b8:	b570      	push	{r4, r5, r6, lr}
 80054ba:	4e0f      	ldr	r6, [pc, #60]	@ (80054f8 <sbrk_aligned+0x40>)
 80054bc:	460c      	mov	r4, r1
 80054be:	6831      	ldr	r1, [r6, #0]
 80054c0:	4605      	mov	r5, r0
 80054c2:	b911      	cbnz	r1, 80054ca <sbrk_aligned+0x12>
 80054c4:	f000 fbfa 	bl	8005cbc <_sbrk_r>
 80054c8:	6030      	str	r0, [r6, #0]
 80054ca:	4621      	mov	r1, r4
 80054cc:	4628      	mov	r0, r5
 80054ce:	f000 fbf5 	bl	8005cbc <_sbrk_r>
 80054d2:	1c43      	adds	r3, r0, #1
 80054d4:	d103      	bne.n	80054de <sbrk_aligned+0x26>
 80054d6:	f04f 34ff 	mov.w	r4, #4294967295
 80054da:	4620      	mov	r0, r4
 80054dc:	bd70      	pop	{r4, r5, r6, pc}
 80054de:	1cc4      	adds	r4, r0, #3
 80054e0:	f024 0403 	bic.w	r4, r4, #3
 80054e4:	42a0      	cmp	r0, r4
 80054e6:	d0f8      	beq.n	80054da <sbrk_aligned+0x22>
 80054e8:	1a21      	subs	r1, r4, r0
 80054ea:	4628      	mov	r0, r5
 80054ec:	f000 fbe6 	bl	8005cbc <_sbrk_r>
 80054f0:	3001      	adds	r0, #1
 80054f2:	d1f2      	bne.n	80054da <sbrk_aligned+0x22>
 80054f4:	e7ef      	b.n	80054d6 <sbrk_aligned+0x1e>
 80054f6:	bf00      	nop
 80054f8:	20000384 	.word	0x20000384

080054fc <_malloc_r>:
 80054fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005500:	1ccd      	adds	r5, r1, #3
 8005502:	f025 0503 	bic.w	r5, r5, #3
 8005506:	3508      	adds	r5, #8
 8005508:	2d0c      	cmp	r5, #12
 800550a:	bf38      	it	cc
 800550c:	250c      	movcc	r5, #12
 800550e:	2d00      	cmp	r5, #0
 8005510:	4606      	mov	r6, r0
 8005512:	db01      	blt.n	8005518 <_malloc_r+0x1c>
 8005514:	42a9      	cmp	r1, r5
 8005516:	d904      	bls.n	8005522 <_malloc_r+0x26>
 8005518:	230c      	movs	r3, #12
 800551a:	6033      	str	r3, [r6, #0]
 800551c:	2000      	movs	r0, #0
 800551e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005522:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80055f8 <_malloc_r+0xfc>
 8005526:	f000 f869 	bl	80055fc <__malloc_lock>
 800552a:	f8d8 3000 	ldr.w	r3, [r8]
 800552e:	461c      	mov	r4, r3
 8005530:	bb44      	cbnz	r4, 8005584 <_malloc_r+0x88>
 8005532:	4629      	mov	r1, r5
 8005534:	4630      	mov	r0, r6
 8005536:	f7ff ffbf 	bl	80054b8 <sbrk_aligned>
 800553a:	1c43      	adds	r3, r0, #1
 800553c:	4604      	mov	r4, r0
 800553e:	d158      	bne.n	80055f2 <_malloc_r+0xf6>
 8005540:	f8d8 4000 	ldr.w	r4, [r8]
 8005544:	4627      	mov	r7, r4
 8005546:	2f00      	cmp	r7, #0
 8005548:	d143      	bne.n	80055d2 <_malloc_r+0xd6>
 800554a:	2c00      	cmp	r4, #0
 800554c:	d04b      	beq.n	80055e6 <_malloc_r+0xea>
 800554e:	6823      	ldr	r3, [r4, #0]
 8005550:	4639      	mov	r1, r7
 8005552:	4630      	mov	r0, r6
 8005554:	eb04 0903 	add.w	r9, r4, r3
 8005558:	f000 fbb0 	bl	8005cbc <_sbrk_r>
 800555c:	4581      	cmp	r9, r0
 800555e:	d142      	bne.n	80055e6 <_malloc_r+0xea>
 8005560:	6821      	ldr	r1, [r4, #0]
 8005562:	1a6d      	subs	r5, r5, r1
 8005564:	4629      	mov	r1, r5
 8005566:	4630      	mov	r0, r6
 8005568:	f7ff ffa6 	bl	80054b8 <sbrk_aligned>
 800556c:	3001      	adds	r0, #1
 800556e:	d03a      	beq.n	80055e6 <_malloc_r+0xea>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	442b      	add	r3, r5
 8005574:	6023      	str	r3, [r4, #0]
 8005576:	f8d8 3000 	ldr.w	r3, [r8]
 800557a:	685a      	ldr	r2, [r3, #4]
 800557c:	bb62      	cbnz	r2, 80055d8 <_malloc_r+0xdc>
 800557e:	f8c8 7000 	str.w	r7, [r8]
 8005582:	e00f      	b.n	80055a4 <_malloc_r+0xa8>
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	1b52      	subs	r2, r2, r5
 8005588:	d420      	bmi.n	80055cc <_malloc_r+0xd0>
 800558a:	2a0b      	cmp	r2, #11
 800558c:	d917      	bls.n	80055be <_malloc_r+0xc2>
 800558e:	1961      	adds	r1, r4, r5
 8005590:	42a3      	cmp	r3, r4
 8005592:	6025      	str	r5, [r4, #0]
 8005594:	bf18      	it	ne
 8005596:	6059      	strne	r1, [r3, #4]
 8005598:	6863      	ldr	r3, [r4, #4]
 800559a:	bf08      	it	eq
 800559c:	f8c8 1000 	streq.w	r1, [r8]
 80055a0:	5162      	str	r2, [r4, r5]
 80055a2:	604b      	str	r3, [r1, #4]
 80055a4:	4630      	mov	r0, r6
 80055a6:	f000 f82f 	bl	8005608 <__malloc_unlock>
 80055aa:	f104 000b 	add.w	r0, r4, #11
 80055ae:	1d23      	adds	r3, r4, #4
 80055b0:	f020 0007 	bic.w	r0, r0, #7
 80055b4:	1ac2      	subs	r2, r0, r3
 80055b6:	bf1c      	itt	ne
 80055b8:	1a1b      	subne	r3, r3, r0
 80055ba:	50a3      	strne	r3, [r4, r2]
 80055bc:	e7af      	b.n	800551e <_malloc_r+0x22>
 80055be:	6862      	ldr	r2, [r4, #4]
 80055c0:	42a3      	cmp	r3, r4
 80055c2:	bf0c      	ite	eq
 80055c4:	f8c8 2000 	streq.w	r2, [r8]
 80055c8:	605a      	strne	r2, [r3, #4]
 80055ca:	e7eb      	b.n	80055a4 <_malloc_r+0xa8>
 80055cc:	4623      	mov	r3, r4
 80055ce:	6864      	ldr	r4, [r4, #4]
 80055d0:	e7ae      	b.n	8005530 <_malloc_r+0x34>
 80055d2:	463c      	mov	r4, r7
 80055d4:	687f      	ldr	r7, [r7, #4]
 80055d6:	e7b6      	b.n	8005546 <_malloc_r+0x4a>
 80055d8:	461a      	mov	r2, r3
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	42a3      	cmp	r3, r4
 80055de:	d1fb      	bne.n	80055d8 <_malloc_r+0xdc>
 80055e0:	2300      	movs	r3, #0
 80055e2:	6053      	str	r3, [r2, #4]
 80055e4:	e7de      	b.n	80055a4 <_malloc_r+0xa8>
 80055e6:	230c      	movs	r3, #12
 80055e8:	6033      	str	r3, [r6, #0]
 80055ea:	4630      	mov	r0, r6
 80055ec:	f000 f80c 	bl	8005608 <__malloc_unlock>
 80055f0:	e794      	b.n	800551c <_malloc_r+0x20>
 80055f2:	6005      	str	r5, [r0, #0]
 80055f4:	e7d6      	b.n	80055a4 <_malloc_r+0xa8>
 80055f6:	bf00      	nop
 80055f8:	20000388 	.word	0x20000388

080055fc <__malloc_lock>:
 80055fc:	4801      	ldr	r0, [pc, #4]	@ (8005604 <__malloc_lock+0x8>)
 80055fe:	f7ff bf0e 	b.w	800541e <__retarget_lock_acquire_recursive>
 8005602:	bf00      	nop
 8005604:	20000380 	.word	0x20000380

08005608 <__malloc_unlock>:
 8005608:	4801      	ldr	r0, [pc, #4]	@ (8005610 <__malloc_unlock+0x8>)
 800560a:	f7ff bf09 	b.w	8005420 <__retarget_lock_release_recursive>
 800560e:	bf00      	nop
 8005610:	20000380 	.word	0x20000380

08005614 <__sfputc_r>:
 8005614:	6893      	ldr	r3, [r2, #8]
 8005616:	3b01      	subs	r3, #1
 8005618:	2b00      	cmp	r3, #0
 800561a:	b410      	push	{r4}
 800561c:	6093      	str	r3, [r2, #8]
 800561e:	da08      	bge.n	8005632 <__sfputc_r+0x1e>
 8005620:	6994      	ldr	r4, [r2, #24]
 8005622:	42a3      	cmp	r3, r4
 8005624:	db01      	blt.n	800562a <__sfputc_r+0x16>
 8005626:	290a      	cmp	r1, #10
 8005628:	d103      	bne.n	8005632 <__sfputc_r+0x1e>
 800562a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800562e:	f7ff bde8 	b.w	8005202 <__swbuf_r>
 8005632:	6813      	ldr	r3, [r2, #0]
 8005634:	1c58      	adds	r0, r3, #1
 8005636:	6010      	str	r0, [r2, #0]
 8005638:	7019      	strb	r1, [r3, #0]
 800563a:	4608      	mov	r0, r1
 800563c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005640:	4770      	bx	lr

08005642 <__sfputs_r>:
 8005642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005644:	4606      	mov	r6, r0
 8005646:	460f      	mov	r7, r1
 8005648:	4614      	mov	r4, r2
 800564a:	18d5      	adds	r5, r2, r3
 800564c:	42ac      	cmp	r4, r5
 800564e:	d101      	bne.n	8005654 <__sfputs_r+0x12>
 8005650:	2000      	movs	r0, #0
 8005652:	e007      	b.n	8005664 <__sfputs_r+0x22>
 8005654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005658:	463a      	mov	r2, r7
 800565a:	4630      	mov	r0, r6
 800565c:	f7ff ffda 	bl	8005614 <__sfputc_r>
 8005660:	1c43      	adds	r3, r0, #1
 8005662:	d1f3      	bne.n	800564c <__sfputs_r+0xa>
 8005664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005668 <_vfiprintf_r>:
 8005668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800566c:	460d      	mov	r5, r1
 800566e:	b09d      	sub	sp, #116	@ 0x74
 8005670:	4614      	mov	r4, r2
 8005672:	4698      	mov	r8, r3
 8005674:	4606      	mov	r6, r0
 8005676:	b118      	cbz	r0, 8005680 <_vfiprintf_r+0x18>
 8005678:	6a03      	ldr	r3, [r0, #32]
 800567a:	b90b      	cbnz	r3, 8005680 <_vfiprintf_r+0x18>
 800567c:	f7ff fcd8 	bl	8005030 <__sinit>
 8005680:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005682:	07d9      	lsls	r1, r3, #31
 8005684:	d405      	bmi.n	8005692 <_vfiprintf_r+0x2a>
 8005686:	89ab      	ldrh	r3, [r5, #12]
 8005688:	059a      	lsls	r2, r3, #22
 800568a:	d402      	bmi.n	8005692 <_vfiprintf_r+0x2a>
 800568c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800568e:	f7ff fec6 	bl	800541e <__retarget_lock_acquire_recursive>
 8005692:	89ab      	ldrh	r3, [r5, #12]
 8005694:	071b      	lsls	r3, r3, #28
 8005696:	d501      	bpl.n	800569c <_vfiprintf_r+0x34>
 8005698:	692b      	ldr	r3, [r5, #16]
 800569a:	b99b      	cbnz	r3, 80056c4 <_vfiprintf_r+0x5c>
 800569c:	4629      	mov	r1, r5
 800569e:	4630      	mov	r0, r6
 80056a0:	f7ff fdee 	bl	8005280 <__swsetup_r>
 80056a4:	b170      	cbz	r0, 80056c4 <_vfiprintf_r+0x5c>
 80056a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80056a8:	07dc      	lsls	r4, r3, #31
 80056aa:	d504      	bpl.n	80056b6 <_vfiprintf_r+0x4e>
 80056ac:	f04f 30ff 	mov.w	r0, #4294967295
 80056b0:	b01d      	add	sp, #116	@ 0x74
 80056b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056b6:	89ab      	ldrh	r3, [r5, #12]
 80056b8:	0598      	lsls	r0, r3, #22
 80056ba:	d4f7      	bmi.n	80056ac <_vfiprintf_r+0x44>
 80056bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80056be:	f7ff feaf 	bl	8005420 <__retarget_lock_release_recursive>
 80056c2:	e7f3      	b.n	80056ac <_vfiprintf_r+0x44>
 80056c4:	2300      	movs	r3, #0
 80056c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80056c8:	2320      	movs	r3, #32
 80056ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80056d2:	2330      	movs	r3, #48	@ 0x30
 80056d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005884 <_vfiprintf_r+0x21c>
 80056d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056dc:	f04f 0901 	mov.w	r9, #1
 80056e0:	4623      	mov	r3, r4
 80056e2:	469a      	mov	sl, r3
 80056e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056e8:	b10a      	cbz	r2, 80056ee <_vfiprintf_r+0x86>
 80056ea:	2a25      	cmp	r2, #37	@ 0x25
 80056ec:	d1f9      	bne.n	80056e2 <_vfiprintf_r+0x7a>
 80056ee:	ebba 0b04 	subs.w	fp, sl, r4
 80056f2:	d00b      	beq.n	800570c <_vfiprintf_r+0xa4>
 80056f4:	465b      	mov	r3, fp
 80056f6:	4622      	mov	r2, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	4630      	mov	r0, r6
 80056fc:	f7ff ffa1 	bl	8005642 <__sfputs_r>
 8005700:	3001      	adds	r0, #1
 8005702:	f000 80a7 	beq.w	8005854 <_vfiprintf_r+0x1ec>
 8005706:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005708:	445a      	add	r2, fp
 800570a:	9209      	str	r2, [sp, #36]	@ 0x24
 800570c:	f89a 3000 	ldrb.w	r3, [sl]
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 809f 	beq.w	8005854 <_vfiprintf_r+0x1ec>
 8005716:	2300      	movs	r3, #0
 8005718:	f04f 32ff 	mov.w	r2, #4294967295
 800571c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005720:	f10a 0a01 	add.w	sl, sl, #1
 8005724:	9304      	str	r3, [sp, #16]
 8005726:	9307      	str	r3, [sp, #28]
 8005728:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800572c:	931a      	str	r3, [sp, #104]	@ 0x68
 800572e:	4654      	mov	r4, sl
 8005730:	2205      	movs	r2, #5
 8005732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005736:	4853      	ldr	r0, [pc, #332]	@ (8005884 <_vfiprintf_r+0x21c>)
 8005738:	f7fa fd52 	bl	80001e0 <memchr>
 800573c:	9a04      	ldr	r2, [sp, #16]
 800573e:	b9d8      	cbnz	r0, 8005778 <_vfiprintf_r+0x110>
 8005740:	06d1      	lsls	r1, r2, #27
 8005742:	bf44      	itt	mi
 8005744:	2320      	movmi	r3, #32
 8005746:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800574a:	0713      	lsls	r3, r2, #28
 800574c:	bf44      	itt	mi
 800574e:	232b      	movmi	r3, #43	@ 0x2b
 8005750:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005754:	f89a 3000 	ldrb.w	r3, [sl]
 8005758:	2b2a      	cmp	r3, #42	@ 0x2a
 800575a:	d015      	beq.n	8005788 <_vfiprintf_r+0x120>
 800575c:	9a07      	ldr	r2, [sp, #28]
 800575e:	4654      	mov	r4, sl
 8005760:	2000      	movs	r0, #0
 8005762:	f04f 0c0a 	mov.w	ip, #10
 8005766:	4621      	mov	r1, r4
 8005768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800576c:	3b30      	subs	r3, #48	@ 0x30
 800576e:	2b09      	cmp	r3, #9
 8005770:	d94b      	bls.n	800580a <_vfiprintf_r+0x1a2>
 8005772:	b1b0      	cbz	r0, 80057a2 <_vfiprintf_r+0x13a>
 8005774:	9207      	str	r2, [sp, #28]
 8005776:	e014      	b.n	80057a2 <_vfiprintf_r+0x13a>
 8005778:	eba0 0308 	sub.w	r3, r0, r8
 800577c:	fa09 f303 	lsl.w	r3, r9, r3
 8005780:	4313      	orrs	r3, r2
 8005782:	9304      	str	r3, [sp, #16]
 8005784:	46a2      	mov	sl, r4
 8005786:	e7d2      	b.n	800572e <_vfiprintf_r+0xc6>
 8005788:	9b03      	ldr	r3, [sp, #12]
 800578a:	1d19      	adds	r1, r3, #4
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	9103      	str	r1, [sp, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	bfbb      	ittet	lt
 8005794:	425b      	neglt	r3, r3
 8005796:	f042 0202 	orrlt.w	r2, r2, #2
 800579a:	9307      	strge	r3, [sp, #28]
 800579c:	9307      	strlt	r3, [sp, #28]
 800579e:	bfb8      	it	lt
 80057a0:	9204      	strlt	r2, [sp, #16]
 80057a2:	7823      	ldrb	r3, [r4, #0]
 80057a4:	2b2e      	cmp	r3, #46	@ 0x2e
 80057a6:	d10a      	bne.n	80057be <_vfiprintf_r+0x156>
 80057a8:	7863      	ldrb	r3, [r4, #1]
 80057aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80057ac:	d132      	bne.n	8005814 <_vfiprintf_r+0x1ac>
 80057ae:	9b03      	ldr	r3, [sp, #12]
 80057b0:	1d1a      	adds	r2, r3, #4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	9203      	str	r2, [sp, #12]
 80057b6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80057ba:	3402      	adds	r4, #2
 80057bc:	9305      	str	r3, [sp, #20]
 80057be:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005894 <_vfiprintf_r+0x22c>
 80057c2:	7821      	ldrb	r1, [r4, #0]
 80057c4:	2203      	movs	r2, #3
 80057c6:	4650      	mov	r0, sl
 80057c8:	f7fa fd0a 	bl	80001e0 <memchr>
 80057cc:	b138      	cbz	r0, 80057de <_vfiprintf_r+0x176>
 80057ce:	9b04      	ldr	r3, [sp, #16]
 80057d0:	eba0 000a 	sub.w	r0, r0, sl
 80057d4:	2240      	movs	r2, #64	@ 0x40
 80057d6:	4082      	lsls	r2, r0
 80057d8:	4313      	orrs	r3, r2
 80057da:	3401      	adds	r4, #1
 80057dc:	9304      	str	r3, [sp, #16]
 80057de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e2:	4829      	ldr	r0, [pc, #164]	@ (8005888 <_vfiprintf_r+0x220>)
 80057e4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057e8:	2206      	movs	r2, #6
 80057ea:	f7fa fcf9 	bl	80001e0 <memchr>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d03f      	beq.n	8005872 <_vfiprintf_r+0x20a>
 80057f2:	4b26      	ldr	r3, [pc, #152]	@ (800588c <_vfiprintf_r+0x224>)
 80057f4:	bb1b      	cbnz	r3, 800583e <_vfiprintf_r+0x1d6>
 80057f6:	9b03      	ldr	r3, [sp, #12]
 80057f8:	3307      	adds	r3, #7
 80057fa:	f023 0307 	bic.w	r3, r3, #7
 80057fe:	3308      	adds	r3, #8
 8005800:	9303      	str	r3, [sp, #12]
 8005802:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005804:	443b      	add	r3, r7
 8005806:	9309      	str	r3, [sp, #36]	@ 0x24
 8005808:	e76a      	b.n	80056e0 <_vfiprintf_r+0x78>
 800580a:	fb0c 3202 	mla	r2, ip, r2, r3
 800580e:	460c      	mov	r4, r1
 8005810:	2001      	movs	r0, #1
 8005812:	e7a8      	b.n	8005766 <_vfiprintf_r+0xfe>
 8005814:	2300      	movs	r3, #0
 8005816:	3401      	adds	r4, #1
 8005818:	9305      	str	r3, [sp, #20]
 800581a:	4619      	mov	r1, r3
 800581c:	f04f 0c0a 	mov.w	ip, #10
 8005820:	4620      	mov	r0, r4
 8005822:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005826:	3a30      	subs	r2, #48	@ 0x30
 8005828:	2a09      	cmp	r2, #9
 800582a:	d903      	bls.n	8005834 <_vfiprintf_r+0x1cc>
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0c6      	beq.n	80057be <_vfiprintf_r+0x156>
 8005830:	9105      	str	r1, [sp, #20]
 8005832:	e7c4      	b.n	80057be <_vfiprintf_r+0x156>
 8005834:	fb0c 2101 	mla	r1, ip, r1, r2
 8005838:	4604      	mov	r4, r0
 800583a:	2301      	movs	r3, #1
 800583c:	e7f0      	b.n	8005820 <_vfiprintf_r+0x1b8>
 800583e:	ab03      	add	r3, sp, #12
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	462a      	mov	r2, r5
 8005844:	4b12      	ldr	r3, [pc, #72]	@ (8005890 <_vfiprintf_r+0x228>)
 8005846:	a904      	add	r1, sp, #16
 8005848:	4630      	mov	r0, r6
 800584a:	f3af 8000 	nop.w
 800584e:	4607      	mov	r7, r0
 8005850:	1c78      	adds	r0, r7, #1
 8005852:	d1d6      	bne.n	8005802 <_vfiprintf_r+0x19a>
 8005854:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005856:	07d9      	lsls	r1, r3, #31
 8005858:	d405      	bmi.n	8005866 <_vfiprintf_r+0x1fe>
 800585a:	89ab      	ldrh	r3, [r5, #12]
 800585c:	059a      	lsls	r2, r3, #22
 800585e:	d402      	bmi.n	8005866 <_vfiprintf_r+0x1fe>
 8005860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005862:	f7ff fddd 	bl	8005420 <__retarget_lock_release_recursive>
 8005866:	89ab      	ldrh	r3, [r5, #12]
 8005868:	065b      	lsls	r3, r3, #25
 800586a:	f53f af1f 	bmi.w	80056ac <_vfiprintf_r+0x44>
 800586e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005870:	e71e      	b.n	80056b0 <_vfiprintf_r+0x48>
 8005872:	ab03      	add	r3, sp, #12
 8005874:	9300      	str	r3, [sp, #0]
 8005876:	462a      	mov	r2, r5
 8005878:	4b05      	ldr	r3, [pc, #20]	@ (8005890 <_vfiprintf_r+0x228>)
 800587a:	a904      	add	r1, sp, #16
 800587c:	4630      	mov	r0, r6
 800587e:	f000 f879 	bl	8005974 <_printf_i>
 8005882:	e7e4      	b.n	800584e <_vfiprintf_r+0x1e6>
 8005884:	08005d78 	.word	0x08005d78
 8005888:	08005d82 	.word	0x08005d82
 800588c:	00000000 	.word	0x00000000
 8005890:	08005643 	.word	0x08005643
 8005894:	08005d7e 	.word	0x08005d7e

08005898 <_printf_common>:
 8005898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800589c:	4616      	mov	r6, r2
 800589e:	4698      	mov	r8, r3
 80058a0:	688a      	ldr	r2, [r1, #8]
 80058a2:	690b      	ldr	r3, [r1, #16]
 80058a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058a8:	4293      	cmp	r3, r2
 80058aa:	bfb8      	it	lt
 80058ac:	4613      	movlt	r3, r2
 80058ae:	6033      	str	r3, [r6, #0]
 80058b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058b4:	4607      	mov	r7, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	b10a      	cbz	r2, 80058be <_printf_common+0x26>
 80058ba:	3301      	adds	r3, #1
 80058bc:	6033      	str	r3, [r6, #0]
 80058be:	6823      	ldr	r3, [r4, #0]
 80058c0:	0699      	lsls	r1, r3, #26
 80058c2:	bf42      	ittt	mi
 80058c4:	6833      	ldrmi	r3, [r6, #0]
 80058c6:	3302      	addmi	r3, #2
 80058c8:	6033      	strmi	r3, [r6, #0]
 80058ca:	6825      	ldr	r5, [r4, #0]
 80058cc:	f015 0506 	ands.w	r5, r5, #6
 80058d0:	d106      	bne.n	80058e0 <_printf_common+0x48>
 80058d2:	f104 0a19 	add.w	sl, r4, #25
 80058d6:	68e3      	ldr	r3, [r4, #12]
 80058d8:	6832      	ldr	r2, [r6, #0]
 80058da:	1a9b      	subs	r3, r3, r2
 80058dc:	42ab      	cmp	r3, r5
 80058de:	dc26      	bgt.n	800592e <_printf_common+0x96>
 80058e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058e4:	6822      	ldr	r2, [r4, #0]
 80058e6:	3b00      	subs	r3, #0
 80058e8:	bf18      	it	ne
 80058ea:	2301      	movne	r3, #1
 80058ec:	0692      	lsls	r2, r2, #26
 80058ee:	d42b      	bmi.n	8005948 <_printf_common+0xb0>
 80058f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058f4:	4641      	mov	r1, r8
 80058f6:	4638      	mov	r0, r7
 80058f8:	47c8      	blx	r9
 80058fa:	3001      	adds	r0, #1
 80058fc:	d01e      	beq.n	800593c <_printf_common+0xa4>
 80058fe:	6823      	ldr	r3, [r4, #0]
 8005900:	6922      	ldr	r2, [r4, #16]
 8005902:	f003 0306 	and.w	r3, r3, #6
 8005906:	2b04      	cmp	r3, #4
 8005908:	bf02      	ittt	eq
 800590a:	68e5      	ldreq	r5, [r4, #12]
 800590c:	6833      	ldreq	r3, [r6, #0]
 800590e:	1aed      	subeq	r5, r5, r3
 8005910:	68a3      	ldr	r3, [r4, #8]
 8005912:	bf0c      	ite	eq
 8005914:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005918:	2500      	movne	r5, #0
 800591a:	4293      	cmp	r3, r2
 800591c:	bfc4      	itt	gt
 800591e:	1a9b      	subgt	r3, r3, r2
 8005920:	18ed      	addgt	r5, r5, r3
 8005922:	2600      	movs	r6, #0
 8005924:	341a      	adds	r4, #26
 8005926:	42b5      	cmp	r5, r6
 8005928:	d11a      	bne.n	8005960 <_printf_common+0xc8>
 800592a:	2000      	movs	r0, #0
 800592c:	e008      	b.n	8005940 <_printf_common+0xa8>
 800592e:	2301      	movs	r3, #1
 8005930:	4652      	mov	r2, sl
 8005932:	4641      	mov	r1, r8
 8005934:	4638      	mov	r0, r7
 8005936:	47c8      	blx	r9
 8005938:	3001      	adds	r0, #1
 800593a:	d103      	bne.n	8005944 <_printf_common+0xac>
 800593c:	f04f 30ff 	mov.w	r0, #4294967295
 8005940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005944:	3501      	adds	r5, #1
 8005946:	e7c6      	b.n	80058d6 <_printf_common+0x3e>
 8005948:	18e1      	adds	r1, r4, r3
 800594a:	1c5a      	adds	r2, r3, #1
 800594c:	2030      	movs	r0, #48	@ 0x30
 800594e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005952:	4422      	add	r2, r4
 8005954:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005958:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800595c:	3302      	adds	r3, #2
 800595e:	e7c7      	b.n	80058f0 <_printf_common+0x58>
 8005960:	2301      	movs	r3, #1
 8005962:	4622      	mov	r2, r4
 8005964:	4641      	mov	r1, r8
 8005966:	4638      	mov	r0, r7
 8005968:	47c8      	blx	r9
 800596a:	3001      	adds	r0, #1
 800596c:	d0e6      	beq.n	800593c <_printf_common+0xa4>
 800596e:	3601      	adds	r6, #1
 8005970:	e7d9      	b.n	8005926 <_printf_common+0x8e>
	...

08005974 <_printf_i>:
 8005974:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005978:	7e0f      	ldrb	r7, [r1, #24]
 800597a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800597c:	2f78      	cmp	r7, #120	@ 0x78
 800597e:	4691      	mov	r9, r2
 8005980:	4680      	mov	r8, r0
 8005982:	460c      	mov	r4, r1
 8005984:	469a      	mov	sl, r3
 8005986:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800598a:	d807      	bhi.n	800599c <_printf_i+0x28>
 800598c:	2f62      	cmp	r7, #98	@ 0x62
 800598e:	d80a      	bhi.n	80059a6 <_printf_i+0x32>
 8005990:	2f00      	cmp	r7, #0
 8005992:	f000 80d2 	beq.w	8005b3a <_printf_i+0x1c6>
 8005996:	2f58      	cmp	r7, #88	@ 0x58
 8005998:	f000 80b9 	beq.w	8005b0e <_printf_i+0x19a>
 800599c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80059a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059a4:	e03a      	b.n	8005a1c <_printf_i+0xa8>
 80059a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059aa:	2b15      	cmp	r3, #21
 80059ac:	d8f6      	bhi.n	800599c <_printf_i+0x28>
 80059ae:	a101      	add	r1, pc, #4	@ (adr r1, 80059b4 <_printf_i+0x40>)
 80059b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059b4:	08005a0d 	.word	0x08005a0d
 80059b8:	08005a21 	.word	0x08005a21
 80059bc:	0800599d 	.word	0x0800599d
 80059c0:	0800599d 	.word	0x0800599d
 80059c4:	0800599d 	.word	0x0800599d
 80059c8:	0800599d 	.word	0x0800599d
 80059cc:	08005a21 	.word	0x08005a21
 80059d0:	0800599d 	.word	0x0800599d
 80059d4:	0800599d 	.word	0x0800599d
 80059d8:	0800599d 	.word	0x0800599d
 80059dc:	0800599d 	.word	0x0800599d
 80059e0:	08005b21 	.word	0x08005b21
 80059e4:	08005a4b 	.word	0x08005a4b
 80059e8:	08005adb 	.word	0x08005adb
 80059ec:	0800599d 	.word	0x0800599d
 80059f0:	0800599d 	.word	0x0800599d
 80059f4:	08005b43 	.word	0x08005b43
 80059f8:	0800599d 	.word	0x0800599d
 80059fc:	08005a4b 	.word	0x08005a4b
 8005a00:	0800599d 	.word	0x0800599d
 8005a04:	0800599d 	.word	0x0800599d
 8005a08:	08005ae3 	.word	0x08005ae3
 8005a0c:	6833      	ldr	r3, [r6, #0]
 8005a0e:	1d1a      	adds	r2, r3, #4
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6032      	str	r2, [r6, #0]
 8005a14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e09d      	b.n	8005b5c <_printf_i+0x1e8>
 8005a20:	6833      	ldr	r3, [r6, #0]
 8005a22:	6820      	ldr	r0, [r4, #0]
 8005a24:	1d19      	adds	r1, r3, #4
 8005a26:	6031      	str	r1, [r6, #0]
 8005a28:	0606      	lsls	r6, r0, #24
 8005a2a:	d501      	bpl.n	8005a30 <_printf_i+0xbc>
 8005a2c:	681d      	ldr	r5, [r3, #0]
 8005a2e:	e003      	b.n	8005a38 <_printf_i+0xc4>
 8005a30:	0645      	lsls	r5, r0, #25
 8005a32:	d5fb      	bpl.n	8005a2c <_printf_i+0xb8>
 8005a34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a38:	2d00      	cmp	r5, #0
 8005a3a:	da03      	bge.n	8005a44 <_printf_i+0xd0>
 8005a3c:	232d      	movs	r3, #45	@ 0x2d
 8005a3e:	426d      	negs	r5, r5
 8005a40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a44:	4859      	ldr	r0, [pc, #356]	@ (8005bac <_printf_i+0x238>)
 8005a46:	230a      	movs	r3, #10
 8005a48:	e011      	b.n	8005a6e <_printf_i+0xfa>
 8005a4a:	6821      	ldr	r1, [r4, #0]
 8005a4c:	6833      	ldr	r3, [r6, #0]
 8005a4e:	0608      	lsls	r0, r1, #24
 8005a50:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a54:	d402      	bmi.n	8005a5c <_printf_i+0xe8>
 8005a56:	0649      	lsls	r1, r1, #25
 8005a58:	bf48      	it	mi
 8005a5a:	b2ad      	uxthmi	r5, r5
 8005a5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a5e:	4853      	ldr	r0, [pc, #332]	@ (8005bac <_printf_i+0x238>)
 8005a60:	6033      	str	r3, [r6, #0]
 8005a62:	bf14      	ite	ne
 8005a64:	230a      	movne	r3, #10
 8005a66:	2308      	moveq	r3, #8
 8005a68:	2100      	movs	r1, #0
 8005a6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a6e:	6866      	ldr	r6, [r4, #4]
 8005a70:	60a6      	str	r6, [r4, #8]
 8005a72:	2e00      	cmp	r6, #0
 8005a74:	bfa2      	ittt	ge
 8005a76:	6821      	ldrge	r1, [r4, #0]
 8005a78:	f021 0104 	bicge.w	r1, r1, #4
 8005a7c:	6021      	strge	r1, [r4, #0]
 8005a7e:	b90d      	cbnz	r5, 8005a84 <_printf_i+0x110>
 8005a80:	2e00      	cmp	r6, #0
 8005a82:	d04b      	beq.n	8005b1c <_printf_i+0x1a8>
 8005a84:	4616      	mov	r6, r2
 8005a86:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a8a:	fb03 5711 	mls	r7, r3, r1, r5
 8005a8e:	5dc7      	ldrb	r7, [r0, r7]
 8005a90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a94:	462f      	mov	r7, r5
 8005a96:	42bb      	cmp	r3, r7
 8005a98:	460d      	mov	r5, r1
 8005a9a:	d9f4      	bls.n	8005a86 <_printf_i+0x112>
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	d10b      	bne.n	8005ab8 <_printf_i+0x144>
 8005aa0:	6823      	ldr	r3, [r4, #0]
 8005aa2:	07df      	lsls	r7, r3, #31
 8005aa4:	d508      	bpl.n	8005ab8 <_printf_i+0x144>
 8005aa6:	6923      	ldr	r3, [r4, #16]
 8005aa8:	6861      	ldr	r1, [r4, #4]
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	bfde      	ittt	le
 8005aae:	2330      	movle	r3, #48	@ 0x30
 8005ab0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ab4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ab8:	1b92      	subs	r2, r2, r6
 8005aba:	6122      	str	r2, [r4, #16]
 8005abc:	f8cd a000 	str.w	sl, [sp]
 8005ac0:	464b      	mov	r3, r9
 8005ac2:	aa03      	add	r2, sp, #12
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	f7ff fee6 	bl	8005898 <_printf_common>
 8005acc:	3001      	adds	r0, #1
 8005ace:	d14a      	bne.n	8005b66 <_printf_i+0x1f2>
 8005ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad4:	b004      	add	sp, #16
 8005ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	f043 0320 	orr.w	r3, r3, #32
 8005ae0:	6023      	str	r3, [r4, #0]
 8005ae2:	4833      	ldr	r0, [pc, #204]	@ (8005bb0 <_printf_i+0x23c>)
 8005ae4:	2778      	movs	r7, #120	@ 0x78
 8005ae6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	6831      	ldr	r1, [r6, #0]
 8005aee:	061f      	lsls	r7, r3, #24
 8005af0:	f851 5b04 	ldr.w	r5, [r1], #4
 8005af4:	d402      	bmi.n	8005afc <_printf_i+0x188>
 8005af6:	065f      	lsls	r7, r3, #25
 8005af8:	bf48      	it	mi
 8005afa:	b2ad      	uxthmi	r5, r5
 8005afc:	6031      	str	r1, [r6, #0]
 8005afe:	07d9      	lsls	r1, r3, #31
 8005b00:	bf44      	itt	mi
 8005b02:	f043 0320 	orrmi.w	r3, r3, #32
 8005b06:	6023      	strmi	r3, [r4, #0]
 8005b08:	b11d      	cbz	r5, 8005b12 <_printf_i+0x19e>
 8005b0a:	2310      	movs	r3, #16
 8005b0c:	e7ac      	b.n	8005a68 <_printf_i+0xf4>
 8005b0e:	4827      	ldr	r0, [pc, #156]	@ (8005bac <_printf_i+0x238>)
 8005b10:	e7e9      	b.n	8005ae6 <_printf_i+0x172>
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	f023 0320 	bic.w	r3, r3, #32
 8005b18:	6023      	str	r3, [r4, #0]
 8005b1a:	e7f6      	b.n	8005b0a <_printf_i+0x196>
 8005b1c:	4616      	mov	r6, r2
 8005b1e:	e7bd      	b.n	8005a9c <_printf_i+0x128>
 8005b20:	6833      	ldr	r3, [r6, #0]
 8005b22:	6825      	ldr	r5, [r4, #0]
 8005b24:	6961      	ldr	r1, [r4, #20]
 8005b26:	1d18      	adds	r0, r3, #4
 8005b28:	6030      	str	r0, [r6, #0]
 8005b2a:	062e      	lsls	r6, r5, #24
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	d501      	bpl.n	8005b34 <_printf_i+0x1c0>
 8005b30:	6019      	str	r1, [r3, #0]
 8005b32:	e002      	b.n	8005b3a <_printf_i+0x1c6>
 8005b34:	0668      	lsls	r0, r5, #25
 8005b36:	d5fb      	bpl.n	8005b30 <_printf_i+0x1bc>
 8005b38:	8019      	strh	r1, [r3, #0]
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6123      	str	r3, [r4, #16]
 8005b3e:	4616      	mov	r6, r2
 8005b40:	e7bc      	b.n	8005abc <_printf_i+0x148>
 8005b42:	6833      	ldr	r3, [r6, #0]
 8005b44:	1d1a      	adds	r2, r3, #4
 8005b46:	6032      	str	r2, [r6, #0]
 8005b48:	681e      	ldr	r6, [r3, #0]
 8005b4a:	6862      	ldr	r2, [r4, #4]
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	4630      	mov	r0, r6
 8005b50:	f7fa fb46 	bl	80001e0 <memchr>
 8005b54:	b108      	cbz	r0, 8005b5a <_printf_i+0x1e6>
 8005b56:	1b80      	subs	r0, r0, r6
 8005b58:	6060      	str	r0, [r4, #4]
 8005b5a:	6863      	ldr	r3, [r4, #4]
 8005b5c:	6123      	str	r3, [r4, #16]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b64:	e7aa      	b.n	8005abc <_printf_i+0x148>
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	4632      	mov	r2, r6
 8005b6a:	4649      	mov	r1, r9
 8005b6c:	4640      	mov	r0, r8
 8005b6e:	47d0      	blx	sl
 8005b70:	3001      	adds	r0, #1
 8005b72:	d0ad      	beq.n	8005ad0 <_printf_i+0x15c>
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	079b      	lsls	r3, r3, #30
 8005b78:	d413      	bmi.n	8005ba2 <_printf_i+0x22e>
 8005b7a:	68e0      	ldr	r0, [r4, #12]
 8005b7c:	9b03      	ldr	r3, [sp, #12]
 8005b7e:	4298      	cmp	r0, r3
 8005b80:	bfb8      	it	lt
 8005b82:	4618      	movlt	r0, r3
 8005b84:	e7a6      	b.n	8005ad4 <_printf_i+0x160>
 8005b86:	2301      	movs	r3, #1
 8005b88:	4632      	mov	r2, r6
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	4640      	mov	r0, r8
 8005b8e:	47d0      	blx	sl
 8005b90:	3001      	adds	r0, #1
 8005b92:	d09d      	beq.n	8005ad0 <_printf_i+0x15c>
 8005b94:	3501      	adds	r5, #1
 8005b96:	68e3      	ldr	r3, [r4, #12]
 8005b98:	9903      	ldr	r1, [sp, #12]
 8005b9a:	1a5b      	subs	r3, r3, r1
 8005b9c:	42ab      	cmp	r3, r5
 8005b9e:	dcf2      	bgt.n	8005b86 <_printf_i+0x212>
 8005ba0:	e7eb      	b.n	8005b7a <_printf_i+0x206>
 8005ba2:	2500      	movs	r5, #0
 8005ba4:	f104 0619 	add.w	r6, r4, #25
 8005ba8:	e7f5      	b.n	8005b96 <_printf_i+0x222>
 8005baa:	bf00      	nop
 8005bac:	08005d89 	.word	0x08005d89
 8005bb0:	08005d9a 	.word	0x08005d9a

08005bb4 <__swhatbuf_r>:
 8005bb4:	b570      	push	{r4, r5, r6, lr}
 8005bb6:	460c      	mov	r4, r1
 8005bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	b096      	sub	sp, #88	@ 0x58
 8005bc0:	4615      	mov	r5, r2
 8005bc2:	461e      	mov	r6, r3
 8005bc4:	da0d      	bge.n	8005be2 <__swhatbuf_r+0x2e>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bcc:	f04f 0100 	mov.w	r1, #0
 8005bd0:	bf14      	ite	ne
 8005bd2:	2340      	movne	r3, #64	@ 0x40
 8005bd4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bd8:	2000      	movs	r0, #0
 8005bda:	6031      	str	r1, [r6, #0]
 8005bdc:	602b      	str	r3, [r5, #0]
 8005bde:	b016      	add	sp, #88	@ 0x58
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
 8005be2:	466a      	mov	r2, sp
 8005be4:	f000 f848 	bl	8005c78 <_fstat_r>
 8005be8:	2800      	cmp	r0, #0
 8005bea:	dbec      	blt.n	8005bc6 <__swhatbuf_r+0x12>
 8005bec:	9901      	ldr	r1, [sp, #4]
 8005bee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005bf2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005bf6:	4259      	negs	r1, r3
 8005bf8:	4159      	adcs	r1, r3
 8005bfa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bfe:	e7eb      	b.n	8005bd8 <__swhatbuf_r+0x24>

08005c00 <__smakebuf_r>:
 8005c00:	898b      	ldrh	r3, [r1, #12]
 8005c02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c04:	079d      	lsls	r5, r3, #30
 8005c06:	4606      	mov	r6, r0
 8005c08:	460c      	mov	r4, r1
 8005c0a:	d507      	bpl.n	8005c1c <__smakebuf_r+0x1c>
 8005c0c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c10:	6023      	str	r3, [r4, #0]
 8005c12:	6123      	str	r3, [r4, #16]
 8005c14:	2301      	movs	r3, #1
 8005c16:	6163      	str	r3, [r4, #20]
 8005c18:	b003      	add	sp, #12
 8005c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c1c:	ab01      	add	r3, sp, #4
 8005c1e:	466a      	mov	r2, sp
 8005c20:	f7ff ffc8 	bl	8005bb4 <__swhatbuf_r>
 8005c24:	9f00      	ldr	r7, [sp, #0]
 8005c26:	4605      	mov	r5, r0
 8005c28:	4639      	mov	r1, r7
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	f7ff fc66 	bl	80054fc <_malloc_r>
 8005c30:	b948      	cbnz	r0, 8005c46 <__smakebuf_r+0x46>
 8005c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c36:	059a      	lsls	r2, r3, #22
 8005c38:	d4ee      	bmi.n	8005c18 <__smakebuf_r+0x18>
 8005c3a:	f023 0303 	bic.w	r3, r3, #3
 8005c3e:	f043 0302 	orr.w	r3, r3, #2
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	e7e2      	b.n	8005c0c <__smakebuf_r+0xc>
 8005c46:	89a3      	ldrh	r3, [r4, #12]
 8005c48:	6020      	str	r0, [r4, #0]
 8005c4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c4e:	81a3      	strh	r3, [r4, #12]
 8005c50:	9b01      	ldr	r3, [sp, #4]
 8005c52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c56:	b15b      	cbz	r3, 8005c70 <__smakebuf_r+0x70>
 8005c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c5c:	4630      	mov	r0, r6
 8005c5e:	f000 f81d 	bl	8005c9c <_isatty_r>
 8005c62:	b128      	cbz	r0, 8005c70 <__smakebuf_r+0x70>
 8005c64:	89a3      	ldrh	r3, [r4, #12]
 8005c66:	f023 0303 	bic.w	r3, r3, #3
 8005c6a:	f043 0301 	orr.w	r3, r3, #1
 8005c6e:	81a3      	strh	r3, [r4, #12]
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	431d      	orrs	r5, r3
 8005c74:	81a5      	strh	r5, [r4, #12]
 8005c76:	e7cf      	b.n	8005c18 <__smakebuf_r+0x18>

08005c78 <_fstat_r>:
 8005c78:	b538      	push	{r3, r4, r5, lr}
 8005c7a:	4d07      	ldr	r5, [pc, #28]	@ (8005c98 <_fstat_r+0x20>)
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4604      	mov	r4, r0
 8005c80:	4608      	mov	r0, r1
 8005c82:	4611      	mov	r1, r2
 8005c84:	602b      	str	r3, [r5, #0]
 8005c86:	f7fb fb04 	bl	8001292 <_fstat>
 8005c8a:	1c43      	adds	r3, r0, #1
 8005c8c:	d102      	bne.n	8005c94 <_fstat_r+0x1c>
 8005c8e:	682b      	ldr	r3, [r5, #0]
 8005c90:	b103      	cbz	r3, 8005c94 <_fstat_r+0x1c>
 8005c92:	6023      	str	r3, [r4, #0]
 8005c94:	bd38      	pop	{r3, r4, r5, pc}
 8005c96:	bf00      	nop
 8005c98:	2000037c 	.word	0x2000037c

08005c9c <_isatty_r>:
 8005c9c:	b538      	push	{r3, r4, r5, lr}
 8005c9e:	4d06      	ldr	r5, [pc, #24]	@ (8005cb8 <_isatty_r+0x1c>)
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	4608      	mov	r0, r1
 8005ca6:	602b      	str	r3, [r5, #0]
 8005ca8:	f7fb fb03 	bl	80012b2 <_isatty>
 8005cac:	1c43      	adds	r3, r0, #1
 8005cae:	d102      	bne.n	8005cb6 <_isatty_r+0x1a>
 8005cb0:	682b      	ldr	r3, [r5, #0]
 8005cb2:	b103      	cbz	r3, 8005cb6 <_isatty_r+0x1a>
 8005cb4:	6023      	str	r3, [r4, #0]
 8005cb6:	bd38      	pop	{r3, r4, r5, pc}
 8005cb8:	2000037c 	.word	0x2000037c

08005cbc <_sbrk_r>:
 8005cbc:	b538      	push	{r3, r4, r5, lr}
 8005cbe:	4d06      	ldr	r5, [pc, #24]	@ (8005cd8 <_sbrk_r+0x1c>)
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	4604      	mov	r4, r0
 8005cc4:	4608      	mov	r0, r1
 8005cc6:	602b      	str	r3, [r5, #0]
 8005cc8:	f7fb fb0c 	bl	80012e4 <_sbrk>
 8005ccc:	1c43      	adds	r3, r0, #1
 8005cce:	d102      	bne.n	8005cd6 <_sbrk_r+0x1a>
 8005cd0:	682b      	ldr	r3, [r5, #0]
 8005cd2:	b103      	cbz	r3, 8005cd6 <_sbrk_r+0x1a>
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	bd38      	pop	{r3, r4, r5, pc}
 8005cd8:	2000037c 	.word	0x2000037c

08005cdc <_init>:
 8005cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cde:	bf00      	nop
 8005ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ce2:	bc08      	pop	{r3}
 8005ce4:	469e      	mov	lr, r3
 8005ce6:	4770      	bx	lr

08005ce8 <_fini>:
 8005ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cea:	bf00      	nop
 8005cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cee:	bc08      	pop	{r3}
 8005cf0:	469e      	mov	lr, r3
 8005cf2:	4770      	bx	lr
